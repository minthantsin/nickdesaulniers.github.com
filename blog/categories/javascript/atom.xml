<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: javascript | Nick Desaulniers]]></title>
  <link href="http://nickdesaulniers.github.io/blog/categories/javascript/atom.xml" rel="self"/>
  <link href="http://nickdesaulniers.github.io/"/>
  <updated>2016-08-17T18:59:09-07:00</updated>
  <id>http://nickdesaulniers.github.io/</id>
  <author>
    <name><![CDATA[Nick Desaulniers]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Hidden in Plain Sight - Public Key Crypto]]></title>
    <link href="http://nickdesaulniers.github.io/blog/2015/02/22/public-key-crypto-code-example/"/>
    <updated>2015-02-22T11:48:00-08:00</updated>
    <id>http://nickdesaulniers.github.io/blog/2015/02/22/public-key-crypto-code-example</id>
    <content type="html"><![CDATA[<p>How is it possible for us to communicate securely when there&rsquo;s the possibility
of a third party eavesdropping on us?  How can we communicate private secrets
through public channels?  How do such techniques enable us to bank online and
carry out other sensitive transactions on the Internet while trusting numerous
relays?  In this post, I hope
to explain public key cryptography, with actual code examples, so that the
concepts are a little more concrete.</p>

<p>First, please check out this excellent video on public key crypto:</p>

<p><div class="embed-video-container"><iframe src="//www.youtube.com/embed/YEBfamv-_do" allowfullscreen></iframe></div></p>

<p>Hopefully that explains the gist of the technique, but what might it actually
look like in code?  Let&rsquo;s take a look at example code in JavaScript using the
Node.js crypto module.  We&rsquo;ll later compare the upcoming WebCrypto API and
look at a TLS handshake.</p>

<p>Meet Alice.  Meet Bob. Meet Eve.  Alice would like to send Bob a secret
message.  Alice would not like Eve to view the message.  Assume Eve can
intercept, but not tamper with, everything Alice and Bob try to share with each
other.</p>

<p>Alice chooses a modular exponential key group, such as modp4, then creates a
public and private key.</p>

<p><code>javascript
var group = "modp4";
var aliceDH = crypto.getDiffieHellman(group);
aliceDH.generateKeys();
</code></p>

<p>A modular exponential key group is simply a &ldquo;sufficiently large&rdquo; prime number,
paired with a generator (specific number), such as those defined in
<a href="http://tools.ietf.org/html/rfc2412">RFC2412</a> and
<a href="http://tools.ietf.org/html/rfc3526">RFC3526</a>.</p>

<p>The public key is meant to be shared; it is ok for Eve to know the public key.
The private key must not ever be shared, even with the person communicating to.</p>

<p>Alice then shares her public key and group with Bob.</p>

<p><code>
Public Key:
 &lt;Buffer 96 33 c5 9e b9 07 3e f2 ec 56 6d f4 1a b4 f8 4c 77 e6 5f a0 93 cf 32 d3 22 42 c8 b4 7b 2b 1f a9 55 86 05 a4 60 17 ae f9 ee bf b3 c9 05 a9 31 31 94 0f ... &gt;
Group:
 modp14
</code></p>

<p>Bob now creates a public and private key pair with the same group as Alice.</p>

<p><code>javascript
var bobDH = crypto.getDiffieHellman(group);
bobDH.generateKeys();
</code></p>

<p>Bob shares his public key with Alice.</p>

<p><code>
Public key:
 &lt;Buffer ee d7 e2 00 e5 82 11 eb 67 ab 50 20 30 81 b1 74 7a 51 0d 7e 2a de b7 df db cf ac 57 de a4 f0 bd bc b5 7e ea df b0 3b c3 3a e2 fa 0e ed 22 90 31 01 67 ... &gt;
</code></p>

<p>Alice and Bob now compute a shared secret.</p>

<p><code>javascript
var aliceSecret = aliceDH.computeSecret(bobDH.getPublicKey(), null, "hex");
var bobSecret = bobDH.computeSecret(aliceDH.getPublicKey(), null, "hex");
</code></p>

<p>Alice and Bob have now derived a shared secret from each others' public keys.</p>

<p><code>
aliceSecret === bobSecret; // =&gt; true
</code></p>

<p>Meanwhile, Eve has intercepted Alice and Bob&rsquo;s public keys and group.  Eve
tries to compute the same secret.</p>

<p>```javascript
var eveDH = crypto.getDiffieHellman(group);
eveDH.generateKeys();
var eveSecret = eveDH.computeSecret(aliceDH.getPublicKeys(), null, &ldquo;hex&rdquo;);</p>

<p>eveSecret === aliceSecret; // => false
```</p>

<p>This is because Alice&rsquo;s secret is derived from Alice and Bob&rsquo;s private keys,
which Eve does not have.  Eve may not realize her secret is not the same as
Alice and Bob&rsquo;s until later.</p>

<p>That was asymmetric encryption; using different keys.  The shared secret may
now be used in symmetric encryption; using the same keys.</p>

<p>Alice creates a symmetric block cypher using her favorite algorithm, a hash of
their secret as a key, and random bytes as an initialization vector.</p>

<p><code>javascript
var cypher = "aes-256-ctr";
var hash = "sha256";
var aliceIV = crypto.randomBytes(128);
var aliceHashedSecret = crypto.createHash(hash).update(aliceSecret).digest("binary");
var aliceCypher = crypto.createCypher(cypher, aliceHashedSecret, aliceIV);
</code></p>

<p>Alice then uses her cypher to encrypt her message to Bob.</p>

<p><code>javascript
var cypherText = aliceCypher.update("...");
</code></p>

<p>Alice then sends the cypher text, cypher, and hash to Bob.</p>

<p><code>
cypherText:
 &lt;Buffer bd 29 96 83 fa a8 7d 9c ea 90 ab&gt;
cypher:
 aes-256-ctr
hash:
 sha256
</code></p>

<p>Bob now constructs a symmetric block cypher using the algorithm from Alice,
and a hash of their shared secret.</p>

<p><code>javascript
var bobHashedSecret = crypto.createHash(hash).update(bobSecret).digest("binary");
var bobCypher = crypto.createDecipher(cypher, bobHashedSecret);
</code></p>

<p>Bob now decyphers the encrypted message (cypher text) from Alice.</p>

<p><code>javascript
var plainText = bobCypher.update(cypherText);
console.log(plainText); // =&gt; "I love you"
</code></p>

<p>Eve has intercepted the cypher text, cypher, hash, and tries to decrypt it.</p>

<p>```javascript
var eveHashedSecret = crypto.createHash(hash).update(eveSecret).digest(&ldquo;binary&rdquo;);
var eveCypher = crypto.createDecipher(cypher, eveHashedSecret);
console.log(eveCypher.update(cypherText).toString());</p>

<p>// => ��_r](�i)
```</p>

<p>Here&rsquo;s where Eve realizes her secret is not correct.</p>

<p>This prevents passive eavesdropping, but not active man-in-the-middle (MITM)
attacks.  For example, how does Alice know that the messages she was supposedly
receiving from Bob actually came from Bob, not Eve posing as Bob?</p>

<p>Today, we use a system of certificates to provide authentication.  This system
certainly <a href="http://thenextweb.com/insider/2015/02/19/lenovo-caught-installing-adware-new-computers/">has</a> its
<a href="https://deadbeefsec.wordpress.com/2012/09/30/who-do-you-trust-why-certificate-authorities-are-a-cartel/">flaws</a>,
but it is what we use today.  This is more advanced topic that won&rsquo;t be covered
here.  Trust is a funny thing.</p>

<p>What&rsquo;s interesting to note is that the prime and generator used to generate
Diffie-Hellman public and private keys have strings that represent the
corresponding modular key exponential groups, ie &ldquo;modp14&rdquo;.  Web crypto&rsquo;s API
gives you
<a href="https://hg.mozilla.org/mozilla-central/file/d866ac7f8606/dom/crypto/test/test_WebCrypto_DH.html#l30">finer grain control</a>
to specify the generator and
<a href="https://hg.mozilla.org/mozilla-central/file/d866ac7f8606/dom/crypto/test/test-vectors.js#l662">large prime number</a>
in a Typed Array.  I&rsquo;m not sure why this is; if it allows you to have finer
grain control, or allows you to support newer groups before the implementation
does?  To me, it seems like a source for errors to be made; hopefully someone
will make a library to provide these prime/generator pairs.</p>

<p>One issue with my approach is that I assumed that Alice and Bob both had
support for the same hashing algorithms, modular exponential key group, and
symmetric block cypher.  In the real world, this is not always the case.
Instead, it is much more common for the client to broadcast publicly all of the
algorithms it supports, and the server to pick one.  This list of algorithms is
called a &ldquo;suite,&rdquo; ie &ldquo;cypher suit.&rdquo; I learned this the hard way recently trying
to
<a href="https://stribika.github.io/2015/01/04/secure-secure-shell.html">upgrade</a>
the <a href="https://wiki.mozilla.org/Security/Guidelines/OpenSSH">cypher suit</a>
on my ssh server and finding out that
<a href="https://mochtu.de/2015/01/07/updating-openssh-on-mac-os-x-10-10-yosemite/">my client did not support the lastest cyphers</a>. In this case, Alice and Bob might not have the same
versions of Node.js, which statically link their own versions of OpenSSL. Thus,
one should use <code>cryto.getCiphers()</code> and <code>crypto.getHashes()</code> before assuming
the party they&rsquo;re communicating to can do the math to decrypt. We&rsquo;ll see &ldquo;cypher
suites&rdquo; come up again in TLS handshakes. The NSA
<a href="http://en.wikipedia.org/wiki/NSA_Suite_B_Cryptography">publishes a list of endorsed cryptographic components</a>,
for what it&rsquo;s worth.  There are also neat tricks we can do to prevent the
message from being decrypted at a later time should the private key be
compromised and encrytped message recorded, called Perfect Forward Secrecy.</p>

<p>Let&rsquo;s take a look now at how a browser does a TLS handshake.  Here&rsquo;s a
capture from Wireshark of me navigating to <a href="https://google.com.">https://google.com.</a> First we have a
TLSv1.2 Client Hello to start the handshake.  Here we can see a list of the
cypher suites.</p>

<p><img class="center" src="/images/tls_1_client_hello.png"></p>

<p>Next is the response from the server, a TLSv1.2 Server Hello.  Here you can see
the server has picked a cypher to use.</p>

<p><img class="center" src="/images/tls_2_server_hello.png"></p>

<p>The server then sends its certificate, which contains a copy of its public key.</p>

<p><img class="center" src="/images/tls_3_server_cert.png"></p>

<p>Now that we&rsquo;ve agreed on a cypher suite, the client now sends its public key.
The server sets up a session, that way it may abbreviate the handshake in the
future. Finally, the client may now start making requests to the server with
encrypted application data.</p>

<p><img class="center" src="/images/tls_4_key_exchange.png"></p>

<p>For more information on TLS handshakes, you should read
<a href="https://www.igvita.com/">Ilya Grigorik&rsquo;s</a>
High Performance Browser Networking book chapter
<a href="http://chimera.labs.oreilly.com/books/1230000000545/ch04.html#TLS_HANDSHAKE">TLS Handshake</a>,
<a href="https://wiki.mozilla.org/Security/Server_Side_TLS#DHE_handshake_and_dhparam">Mozilla OpSec&rsquo;s fantastic wiki</a>,
and
<a href="http://security.stackexchange.com/questions/20803/how-does-ssl-tls-work/20833">this exellent Stack Exchange post</a>.
As you might imagine, all of these back and forth trips made during the TLS
handshake add latency overhead when compared to unencrypted HTTP requests.</p>

<p>I hope this post helped you understand how we can use cryptography to exchange
secret information through public channels.  This isn&rsquo;t enough information to
implement a perfectly secure system; end to end security means one single
mistake can compromise the entire system.  Peer review and open source,
<a href="https://danielmiessler.com/writing/cryptography_opensource/">battle tested</a>
implementations
<a href="http://dodcio.defense.gov/OpenSourceSoftwareFAQ.aspx#Q%3a_Doesn.27t_hiding_source_code_automatically_make_software_more_secure.3F">go a long way</a>.</p>

<p><blockquote><p>A cryptosystem should be secure even if everything about the system, except the key, is public knowledge.</p><footer><strong>Kerckhoffs&rsquo;s principle</strong></footer></blockquote></p>

<p>I wanted to write this post because I believe abstinence-only crypto education
isn&rsquo;t working and I cant stand when anyone acts like part of a cabal from their
ivory tower to those trying to learn new things.
Someone will surely cite
<a href="http://matasano.com/articles/javascript-cryptography/">Javascript Cryptography Considered Harmful</a>,
which while valid, misses my point of simply trying to show people more concrete
basics with code examples.
The first crypto system you implement will have its holes, but you
can&rsquo;t go from ignorance of crypto to perfect knowledge without implementing a
few imperfect systems.  Don&rsquo;t be afraid to, just don&rsquo;t start with trying to protect
high value data.  Crypto is dangerous, because it can be difficult to
impossible to tell when your system fails.
<a href="https://nickdesaulniers.github.io/blog/2014/04/18/lets-write-some-x86-64/">Assembly</a>
is also akin to juggling knives, but at least
you&rsquo;ll usually segfault if you mess up and program execution will halt.</p>

<p>With upcoming APIs like
<a href="http://www.w3.org/TR/service-workers/#security-considerations">Service Workers requiring TLS</a>,
protocols like <a href="http://http2.github.io/faq/#does-http2-require-encryption">HTTP2</a>,
pushes for all <a href="http://blog.codinghorror.com/should-all-web-traffic-be-encrypted/">web traffic to be encrypted</a>,
and <a href="https://nickdesaulniers.github.io/blog/2013/07/03/why-ill-be-marching-this-4th/">shitty things governments</a>,
<a href="http://www.theguardian.com/technology/2015/jan/16/david-cameron-encryption-lavabit-ladar-levison">politicians</a>,
and <a href="https://www.youtube.com/watch?v=fpbOEoRrHyU">ISPs</a> do,
web developers are going to have to start boning up on their crypto knowledge.</p>

<p>What are your recommendations for correctly learning crypto?  Leave me some
thoughts in the comments below.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Function.prototype.bind Edge Cases]]></title>
    <link href="http://nickdesaulniers.github.io/blog/2013/09/26/function-dot-prototype-dot-bind-edge-cases/"/>
    <updated>2013-09-26T21:00:00-07:00</updated>
    <id>http://nickdesaulniers.github.io/blog/2013/09/26/function-dot-prototype-dot-bind-edge-cases</id>
    <content type="html"><![CDATA[<p>ECMAScript 5&rsquo;s
<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/bind">Function.prototype.bind</a>
is a great tool that&rsquo;s implemented in all
<a href="http://kangax.github.io/es5-compat-table/#Function.prototype.bind">modern browser JavaScript engines</a>.
It allows you to modify the context,
<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/this">this</a>,
of a function when it is evaluated in the future.  Knowing what <code>this</code> refers to
in various contexts is key to being a professional JavaScript developer; don&rsquo;t
show up to an interview without knowing all about it.</p>

<p>Here&rsquo;s a common use case that developers need to watch for.  Can you spot the
mistake?</p>

<p>```javascript
var person = &ldquo;Bill&rdquo;;</p>

<p>var obj = {
  person: &ldquo;Nick&rdquo;,
  hi: function () {</p>

<pre><code>console.log("Hi " + this.person);
</code></pre>

<p>  }
};</p>

<p>window.addEventListener(&ldquo;DOMContentLoaded&rdquo;, obj.hi);
```</p>

<p>Ooops!!! Turns out that since we added the event listener to the window object,
<code>this</code> in the event handler or callback refers to <code>window</code>.  So this code prints
<code>"Hi Bill"</code> instead of <code>"Hi Nick"</code>.  We could wrap <code>obj.hi</code> in an anonymous function:</p>

<p><code>javascript
window.addEventListener("DOMContentLoaded", function () {
  obj.hi();
});
</code></p>

<p>But that is so needlessly verbose and what we were trying to avoid in the first
place.  The three functions you should know for modifying <code>this</code> (a question I
ask all
my interview candidates) are
<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/call">Function.prototype.call</a>,
<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/apply">Function.prototype.apply</a>,
and
<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/bind">Function.prototype.bind</a>.
<code>call</code> is variadic, while <code>apply</code> takes an array of
arguments, but the two both immediately invoke the function.  We don&rsquo;t want to
do that just yet.  The fix we need is <code>Function.prototype.bind</code>.</p>

<p><code>javascript
window.addEventListener("DOMContentLoaded", obj.hi.bind(obj));
</code></p>

<p>There, now isn&rsquo;t that nice and short?  Instead of saving <code>this</code> as another
variable then closing over it, you can instead use <code>bind</code>!</p>

<p>```javascript
var obj = {
  person: &ldquo;Nick&rdquo;,
  wait: function () {</p>

<pre><code>var self = this;
someButton.onclick = function () {
  console.log(self.person + " clicked!");
};
</code></pre>

<p>  },
};
<code>
becomes
</code>javascript
var obj = {
  person: &ldquo;Nick&rdquo;,
  wait: function () {</p>

<pre><code>someButton.onclick = function () {
  console.log(this.person + " clicked!");
}.bind(this);
</code></pre>

<p>  },
};
```</p>

<p>No need to store <code>this</code> into <code>self</code>, then close over it.  One great shortcut I
use all the time is creating an alias for <code>document.getElementById</code>.</p>

<p><code>javascript
var $ = document.getElementById.bind(document);
$('someElementsId').doSomething();
$('anotherElement').doSomethingElse();
$('aThirdElement').doSomethingDifferent();
$('theFifthElementOops').doSomethingFun();
</code></p>

<p>Why did I bind <code>getElementById</code> back to <code>document</code>?  Try it without the call to
bind.  Any luck?</p>

<p><code>bind</code> can also be great for partially applying functions, too.</p>

<p><code>javascript
function add (a, b) {
  console.log("a: " + a);
  console.log("b: " + b);
  return a + b;
};
var todo = add.bind(null, 4);
console.log(todo(7));
</code>
will print
<code>
a: 4
b: 7
11
</code></p>

<p>What <code>Function.prototype.bind</code> is essentially doing is wrapping <code>add</code> in a
function that essentially looks like:</p>

<p><code>javascript
var todo = function () {
  add.apply(null, [4].concat(Array.prototype.slice.call(arguments)));
};
</code></p>

<p>The array has the captured arguments (just <code>4</code>), and is converting <code>todo</code>&rsquo;s
<code>arguments</code> into an array (a common idiom for converting &ldquo;Array-like&rdquo; objects
into
Arrays), then joining (<code>concat</code>) them and invoking the bound function (<code>apply</code>)
with
the value for <code>this</code> (in this case, <code>null</code>).</p>

<p>In fact, if you look at
<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/bind#Compatibility">the compatibility section of the MDN page for bind</a>,
you&rsquo;ll see a function that returns a function that is essentially the above.
One caveat is that this approach only allows you to partially apply variables in
order.</p>

<p>So <code>bind</code> is a great addition to the language.  Now to the point I wanted to
make;
there are edge cases when <code>bind</code> doesn&rsquo;t work or might trip you up.  The first
is that <code>bind</code>
evaluates
its <code>arguments</code> when bound, not when invoked.  The other is that <code>bind</code> returns
a new
function, always.  And the final is to be careful binding to variadic functions
when you don&rsquo;t intend to use all of the passed in variables.  Um, duh right?
Well, let me show you three examples that have bitten me (recently).  The first
is with ajax calls.</p>

<p>```javascript
function crunch (data) {
  // operate on data
};</p>

<p>var xhr = new XMLHttpRequest;
xhr.open(&ldquo;GET&rdquo;, &ldquo;data.json&rdquo;);
xhr.onload = crunch.bind(this.response);
xhr.send();
```</p>

<p>Oops, while I do want to operate on <code>this.result</code> within <code>crunch</code> with <code>this</code>
referring to <code>xhr</code>, <code>this</code> at the time of binding was referring to <code>window</code>!
Let&rsquo;s
hope <code>window.results</code> is <code>undefined</code>!  What if we changed <code>this.result</code> with
<code>xhr.result</code>?  Well, we&rsquo;re no longer referring to the <code>window</code> object, but
<code>xhr.result</code> is evaluated at bind time (and for an unsent <code>XMLHttpRequest</code>
object,
is <code>null</code>), so we&rsquo;ve bound <code>null</code> as the first argument.  We must delay the
handling
of <code>xhr.onload</code>; either use an anonymous function inline or named function to
control nesting depth.</p>

<p><code>javascript
xhr.onload = function () {
  crunch(this.result);
};
</code></p>

<p>The next is that <code>bind</code> always returns a new function.  Dude, it says that in
the docs,
<a href="http://xkcd.com/293/">RTFM</a>.
Yeah I know, but this case still caught me.  When removing an event
listener, you need to supply the <strong>same</strong> handler function.  Example, a <code>once</code>
function:</p>

<p>```javascript
function todo () {
  document.removeEventListener(&ldquo;myCustomEvent&rdquo;, todo);
  console.log(this.person);
});</p>

<p>document.addEventListener(&ldquo;myCustomEvent&rdquo;, todo.bind({ person: &ldquo;Nick&rdquo; }));
```</p>

<p>Try firing <code>myCustomEvent</code> twice, see what happens!  <code>"Nick"</code> is logged twice.
A <code>once</code> function that handles two separate events is not very good.  In fact,
it will continue
to handle events, since <code>document</code> does not have <code>todo</code> as an event handler for
<code>myCustomEvent</code>
events.  The event listener you bound was a new function; <code>bind</code> always returns
a new function.  The solution:</p>

<p><code>javascript
var todo = function () {
  console.log(this.person);
  document.removeEventListener("myCustomEvent", todo);
}.bind({ person: "Nick" });
document.addEventListener("myCustomEvent", todo);
</code></p>

<p>That would be a good interview question.  The final gotcha is with functions
that are variadic.  Extending one of my earlier examples:
```javascript
var obj = {
  person: &ldquo;Nick&rdquo;,
  wait: function () {</p>

<pre><code>var someButton = document.createElement("button");
someButton.onclick = function () {
  console.log(this.person + " clicked!");
}.bind(this);
someButton.click();
</code></pre>

<p>  },
};
obj.wait();
```</p>

<p>Let&rsquo;s say I thought I could use bind to simplify the <code>onclick</code> using the trick I
did with <code>document.getElementById</code>:</p>

<p>```javascript
var obj = {
  person: &ldquo;Nick&rdquo;,
  wait: function () {</p>

<pre><code>var someButton = document.createElement("button");
someButton.onclick = console.log.bind(console, this.person + " clicked!");
someButton.click();
</code></pre>

<p>  },
};
obj.wait();
```</p>

<p>Can you guess what this prints?  It does prints the expected, but with an
unexpected addition.  Think about what I said about variadic functions.  What
might be wrong here?</p>

<p>Turns out this prints
<code>"Nick clicked! [object MouseEvent]"</code>  This one took me a while to think
through, but luckily I had other experiences with <code>bind</code> that helped me understand
why this occurred.</p>

<p><code>console.log</code> is variadic, so it prints all of its arguments.  When we called
<code>bind</code>
on <code>console.log</code>, we set the <code>onclick</code> handler to be a new function that applied
that expected output with any additional arguments.  Well, <code>onclick</code> handlers are
passed a <code>MouseEvent</code> object (think <code>e.target</code>), which winds up being passed as
the second
argument to <code>console.log</code>.  If this was the example with <code>add</code> from earlier,
<code>this.person + " clicked!"</code> would be the <code>4</code> and the <code>MouseEvent</code> would be the
<code>7</code>:</p>

<p>```javascript
someButton.onclick = function (e) {
  console.log.apply(console, [&ldquo;Nick clicked!&rdquo;].concat([e]));
};</p>

<p>```</p>

<p>I love <code>bind</code>, but sometimes, it will get you.  What are some examples of times
when you&rsquo;ve been bitten by <code>bind</code>?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Making great Node.js modules with CoffeeScript]]></title>
    <link href="http://nickdesaulniers.github.io/blog/2013/08/28/making-great-node-dot-js-modules-with-coffeescript/"/>
    <updated>2013-08-28T10:51:00-07:00</updated>
    <id>http://nickdesaulniers.github.io/blog/2013/08/28/making-great-node-dot-js-modules-with-coffeescript</id>
    <content type="html"><![CDATA[<p><a href="http://nodejs.org/">Node.js</a>
is a great runtime for writing applications in JavaScript, the language
I primarily develop in.
<a href="http://coffeescript.org/">CoffeeScript</a>
is a programming language that compiles
to JavaScript.  Why would we write a reusable piece of code, a
<a href="http://nodejs.org/api/modules.html">module</a>
, in
CoffeeScript?  CoffeeScript is a very high level language and
<a href="http://railscasts.com/episodes/267-coffeescript-basics">beautifully brings together</a>
my favorite aspects of JavaScript,
Ruby, and Python.  In this tutorial, I&rsquo;ll show you how I create reusable open
source modules for Node.js from CoffeeScript, which is something I recently
discovered while creating a
<a href="https://github.com/nickdesaulniers/javascript-playlist-parser">playlist parser module</a>.
The point is to focus on how to turn a quick hack into a nicely laid
out Node.js module.</p>

<p>The steps are as follows:</p>

<ol>
<li>Turn an idea into a git repo.</li>
<li>Add directory structure.</li>
<li>Split library functions from testing.</li>
<li>Add a Build script.</li>
<li>Create node module.</li>
<li>Add LICENSE and README.</li>
<li>Publish.</li>
</ol>


<p>First thing&rsquo;s first, we have to have an idea.  It doesn&rsquo;t have to be
revolutionary, just do one thing and do it well.  That is the first rule of
<a href="http://www.faqs.org/docs/artu/ch01s06.html">UNIX <del>fightclub</del> philosophy</a>,
which resonates well within
<a href="http://blog.izs.me/post/48281998870/unix-philosophy-and-node-js">the Node.js community</a>.
When I&rsquo;m hacking on
something, I start out with a single file to test something out.  Then I
progressively refine the example until it&rsquo;s something reusable.  That way, I
can reuse it, others can reuse it, others can learn from it, and the world can
be a better place.</p>

<p>For this tutorial, I&rsquo;ll show you my process for creating a binding for
<a href="http://nanomsg.org/index.html">nanomsg</a>,
the latest scalability protocol library from the creator of
<a href="http://zeromq.org/">ZeroMQ</a>,
<a href="http://250bpm.com/">Martin Sústrik</a>.
I had played with ZeroMQ in the past and thought that it was really
awesome, and I was excited to see a new library from it&rsquo;s creator, based on C,
since I also really enjoyed his post on why he
<a href="http://250bpm.com/blog:4">shouldn&rsquo;t have written it in C++</a>.</p>

<p>So messing around real quick, let&rsquo;s make sure we have node up to date.  I like
to use
<a href="https://github.com/creationix/nvm">nvm</a>
and the latest stable minor version of node (stable versions have
even minor patch numbers where versions are in the format <code>major.minor.patch</code>,
so v0.11.0 is unstable).  <code>node -v</code> &ndash;> v0.10.17</p>

<p>Then I need to download and install the library that I&rsquo;ll be dynamically
linking to, build, and install it.</p>

<p><code>text
curl -O http://download.nanomsg.org/nanomsg-0.1-alpha.zip &amp;&amp; \
unzip nanomsg-0.1-alpha.zip &amp;&amp; \
cd nanomsg-0.1-alpha &amp;&amp; \
mkdir build &amp;&amp; \
cd build &amp;&amp; \
../configure &amp;&amp; \
make &amp;&amp; \
make install
</code></p>

<p>We&rsquo;ll use
<a href="https://github.com/rbranson/node-ffi">node&rsquo;s FFI module</a>
to interface with the dynamically linked library,
because it&rsquo;s easier to write bindings than using
<a href="http://nodejs.org/api/addons.html">native addons</a>,
and
<a href="https://github.com/rvagg/node-addon-examples/blob/master/README.md#compatibility-notes">v8&rsquo;s API has recently changed causing some headaches for native extensions</a>.</p>

<p><code>npm install ffi</code></p>

<p>We&rsquo;ll be writing the example in CoffeeScript.</p>

<p><code>npm install -g coffee-script</code></p>

<p>Now to mess around we can create main.coffee based on
<a href="https://github.com/250bpm/cppnanomsg/blob/9becc3d5116ab33a7d2c5f06d68a8fea1b781194/binding.cpp#L29">the C++ binding&rsquo;s example</a>:
```coffeescript main.coffee
ffi = require &lsquo;ffi&rsquo;
assert = require &lsquo;assert&rsquo;</p>

<p>AF_SP = 1
NN_PAIR = 16</p>

<p>nanomsg = ffi.Library &lsquo;libnanomsg&rsquo;,
  nn_socket: [ &lsquo;int&rsquo;, [ &lsquo;int&rsquo;, &lsquo;int&rsquo; ]]
  nn_bind: [ &lsquo;int&rsquo;, [ &lsquo;int&rsquo;, &lsquo;string&rsquo; ]]
  nn_connect: [ &lsquo;int&rsquo;, [&lsquo;int&rsquo;, &lsquo;string&rsquo; ]]
  nn_send: [ &lsquo;int&rsquo;, [&lsquo;int&rsquo;, &lsquo;pointer&rsquo;, &lsquo;int&rsquo;, &lsquo;int&rsquo;]]
  nn_recv: [ &lsquo;int&rsquo;, [&lsquo;int&rsquo;, &lsquo;pointer&rsquo;, &lsquo;int&rsquo;, &lsquo;int&rsquo;]]
  nn_errno: [ &lsquo;int&rsquo;, []]</p>

<h1>test</h1>

<p>s1 = nanomsg.nn_socket AF_SP, NN_PAIR
assert s1 >= 0, &lsquo;s1: &rsquo; + nanomsg.nn_errno()</p>

<p>ret = nanomsg.nn_bind s1, &lsquo;inproc://a&rsquo;
assert ret > 0, &lsquo;bind&rsquo;</p>

<p>s2 = nanomsg.nn_socket AF_SP, NN_PAIR
assert s2 >= 0, &lsquo;s2: &rsquo; + nanomsg.nn_errno()</p>

<p>ret = nanomsg.nn_connect s2, &lsquo;inproc://a&rsquo;
assert ret > 0, &lsquo;connect&rsquo;</p>

<p>msg = new Buffer &lsquo;hello&rsquo;
ret = nanomsg.nn_send s2, msg, msg.length, 0
assert ret > 0, &lsquo;send&rsquo;</p>

<p>recv = new Buffer msg.length
ret = nanomsg.nn_recv s1, recv, recv.length, 0
assert ret > 0, &lsquo;recv&rsquo;</p>

<p>console.log recv.toString()
assert msg.toString() is recv.toString(), &lsquo;received message did not match sent&rsquo;
<code>``
</code>coffee main.coffee` &ndash;> hello</p>

<p>This quick example shows that we have something working.  Currently our working
directory should look like:
```text
tree -L 2
.
├── main.coffee
└── node_modules</p>

<pre><code>└── ffi
</code></pre>

<p>2 directories, 1 file
```</p>

<h2>Turn an idea into a git repo</h2>

<p>Next up is to create a repository using a version control system like
<a href="http://git-scm.com/">git</a> and
start saving our work.
<a href="http://www.codinghorror.com/blog/2008/08/check-in-early-check-in-often.html">Check in early, check in often</a>.</p>

<p>Let&rsquo;s add a .gitignore so that were not adding files that really don&rsquo;t need to
be committed.  The node_modules folder is unnecessary because when this node
module is installed, its dependencies will be recursively installed, so
there&rsquo;s no need to commit them to source control.  The swap files are because I
use
<a href="http://www.vim.org/">vim</a>
and I accidentally commit the swap files from open buffers all the time
like a noob.</p>

<p><code>text .gitignore
node_modules/
*.swp
</code></p>

<p>Let&rsquo;s turn this into a git repo:
<code>text
git init &amp;&amp; \
git add . &amp;&amp; \
git commit -am “initial commit”
</code></p>

<p>Up on github, let&rsquo;s <a href="https://github.com/new">create an uninitialized repo</a>
and push to it:
<code>text
git remote add origin git@github.com:nickdesaulniers/node-nanomsg.git &amp;&amp; \
git push -u origin master
</code></p>

<p>So we
<a href="https://github.com/nickdesaulniers/node-nanomsg/commit/19211e7520de9384a0d5b0ce4c08a623c4f2e0b9">have</a>:
```text
tree -L 2 -a
.
├── .gitignore
├── main.coffee
└── node_modules</p>

<pre><code>└── ffi
</code></pre>

<p>2 directories, 2 files
```</p>

<h2>Add directory structure</h2>

<p>Now that we have our repo under version control, let&rsquo;s start adding some
structure. Let&rsquo;s create
<code>src/</code>, <code>lib/</code>, and <code>test/</code> directories.  Our CoffeeScript will live in
<code>src/</code>, compiled JavaScript will be in <code>lib/</code>, and our test code will be in
<code>test/</code>.</p>

<p><code>mkdir src lib test</code></p>

<h2>Split library functions from testing</h2>

<p>Now let&rsquo;s move a copy of <code>main.coffee</code> into <code>src/</code> and one into <code>test/</code>.  We
are going to split the library definition away from the testing logic.
<code>text
cp main.coffee test/test.coffee &amp;&amp; \
git add test/test.coffee &amp;&amp; \
git mv main.coffee src/nanomsg.coffee
</code></p>

<p>This way <code>git status</code> tells us:
```text</p>

<h1>On branch master</h1>

<h1>Changes to be committed:</h1>

<h1>(use &ldquo;git reset HEAD <file>&hellip;&rdquo; to unstage)</h1>

<p>#</p>

<h1>renamed:    main.coffee &ndash;> src/nanomsg.coffee</h1>

<h1>new file:   test/test.coffee</h1>

<p>#
```</p>

<p>Let&rsquo;s edit src/main.coffee to look like:
```coffeescript src/main.coffee
ffi = require &lsquo;ffi&rsquo;</p>

<p>exports = module.exports = ffi.Library &lsquo;libnanomsg&rsquo;,
  nn_socket: [ &lsquo;int&rsquo;, [ &lsquo;int&rsquo;, &lsquo;int&rsquo; ]]
  nn_bind: [ &lsquo;int&rsquo;, [ &lsquo;int&rsquo;, &lsquo;string&rsquo; ]]
  nn_connect: [ &lsquo;int&rsquo;, [&lsquo;int&rsquo;, &lsquo;string&rsquo; ]]
  nn_send: [ &lsquo;int&rsquo;, [&lsquo;int&rsquo;, &lsquo;pointer&rsquo;, &lsquo;int&rsquo;, &lsquo;int&rsquo;]]
  nn_recv: [ &lsquo;int&rsquo;, [&lsquo;int&rsquo;, &lsquo;pointer&rsquo;, &lsquo;int&rsquo;, &lsquo;int&rsquo;]]
  nn_errno: [ &lsquo;int&rsquo;, []]</p>

<p>exports.AF_SP = 1
exports.NN_PAIR = 16
```</p>

<p>and edit the tests to:
```coffeescript test/test.coffee
assert = require &lsquo;assert&rsquo;
nanomsg = require &lsquo;../lib/nanomsg.js&rsquo;</p>

<p>{ AF_SP, NN_PAIR } = nanomsg</p>

<p>s1 = nanomsg.nn_socket AF_SP, NN_PAIR
assert s1 >= 0, &lsquo;s1: &rsquo; + nanomsg.nn_errno()</p>

<p>ret = nanomsg.nn_bind s1, &lsquo;inproc://a&rsquo;
assert ret > 0, &lsquo;bind&rsquo;</p>

<p>s2 = nanomsg.nn_socket AF_SP, NN_PAIR
assert s2 >= 0, &lsquo;s2: &rsquo; + nanomsg.nn_errno()</p>

<p>ret = nanomsg.nn_connect s2, &lsquo;inproc://a&rsquo;
assert ret > 0, &lsquo;connect&rsquo;</p>

<p>msg = new Buffer &lsquo;hello&rsquo;
ret = nanomsg.nn_send s2, msg, msg.length, 0
assert ret > 0, &lsquo;send&rsquo;</p>

<p>recv = new Buffer msg.length
ret = nanomsg.nn_recv s1, recv, recv.length, 0
assert ret > 0, &lsquo;recv&rsquo;</p>

<p>assert msg.toString() is recv.toString(), &lsquo;received message did not match sent&rsquo;
```</p>

<p>Notice how in the test we&rsquo;re including the compiled javascript from <code>lib/</code>
which doesn&rsquo;t exist yet?  If you try running <code>coffee test/test.coffee</code> it
should crash.  Let&rsquo;s make the compiled version.
<code>coffee -o lib -c src/nanomsg.coffee</code></p>

<p>Once the compiled lib exists, we can run our tests with
<code>coffee test/test.coffee</code> and shouldn&rsquo;t see any errors.</p>

<p>Now we should have a little more order, let&rsquo;s
<a href="https://github.com/nickdesaulniers/node-nanomsg/commit/3e3e3918971e2eddbe95e91e0c3cf32e7f8becba">commit</a>.
Hold off on adding
<code>lib/</code> to version control, I&rsquo;ll explain why in a bit.
```text
tree -L 2 -C -a -I &lsquo;.git&rsquo;
.
├── .gitignore
├── lib
│   └── nanomsg.js
├── node_modules
│   └── ffi
├── src
│   └── nanomsg.coffee
└── test</p>

<pre><code>└── test.coffee
</code></pre>

<p>5 directories, 4 files
```</p>

<p>At this point, if we add features and want to rerun our tests, we need to
execute:</p>

<p><code>coffee -o lib -c src/nanomsg.coffee &amp;&amp; coffee test/test.coffee</code></p>

<p>While this command is simple now and easy to reverse search, anyone else
contributing to you project is going to have to know the commands to run the
tests.  Let&rsquo;s use
<a href="http://gruntjs.com/">Grunt</a>,
the JavaScript task runner, to automate our build and test process.</p>

<h2>Add a Build script</h2>

<p><code>text
npm install -g grunt-cli &amp;&amp; \
npm install grunt-contrib-coffee
</code></p>

<p>Create a simple Gruntfile which can also be written in CoffeeScript:
```coffeescript Gruntfile.coffee
module.exports = (grunt) &ndash;>
  grunt.initConfig</p>

<pre><code>coffee:
  compile:
    files:
      'lib/nanomsg.js': ['src/*.coffee']
</code></pre>

<p>  grunt.loadNpmTasks &lsquo;grunt-contrib-coffee&rsquo;
  grunt.registerTask &lsquo;default&rsquo;, [&lsquo;coffee&rsquo;]
```</p>

<p>Running <code>grunt</code> builds our lib which is a start, so let&rsquo;s
<a href="https://github.com/nickdesaulniers/node-nanomsg/commit/293e7378225c761ec496d9dcd09e1f2d331628a2">commit</a>
that.</p>

<p>But <code>grunt</code> is not running our tests.  And our tests don&rsquo;t have nice output.
Let&rsquo;s change that:
<code>text
npm install -g mocha &amp;&amp; \
npm install chai grunt-mocha-test
</code></p>

<p>edit test/test.coffee to:</p>

<p>```coffeescript test/test.coffee
assert = require &lsquo;assert&rsquo;
should = require(&lsquo;chai&rsquo;).should()
nanomsg = require &lsquo;../lib/nanomsg.js&rsquo;</p>

<p>describe &lsquo;nanomsg&rsquo;, &ndash;>
  it &lsquo;should at least work&rsquo;, &ndash;></p>

<pre><code>{ AF_SP, NN_PAIR } = nanomsg

s1 = nanomsg.nn_socket AF_SP, NN_PAIR
s1.should.be.at.least 0

ret = nanomsg.nn_bind s1, 'inproc://a'
ret.should.be.above 0

s2 = nanomsg.nn_socket AF_SP, NN_PAIR
s2.should.be.at.least 0

ret = nanomsg.nn_connect s2, 'inproc://a'
ret.should.be.above 0

msg = new Buffer 'hello'
ret = nanomsg.nn_send s2, msg, msg.length, 0
ret.should.be.above 0

recv = new Buffer msg.length
ret = nanomsg.nn_recv s1, recv, recv.length, 0
ret.should.be.above 0

msg.toString().should.equal recv.toString()
</code></pre>

<p>```</p>

<p>and modify your gruntfile to add a testing step:</p>

<p>```coffeescript Gruntfile.coffee
module.exports = (grunt) &ndash;>
  grunt.initConfig</p>

<pre><code>coffee:
  compile:
    files:
      'lib/nanomsg.js': ['src/*.coffee']
mochaTest:
  options:
    reporter: 'nyan'
  src: ['test/test.coffee']
</code></pre>

<p>  grunt.loadNpmTasks &lsquo;grunt-contrib-coffee&rsquo;
  grunt.loadNpmTasks &lsquo;grunt-mocha-test&rsquo;</p>

<p>  grunt.registerTask &lsquo;default&rsquo;, [&lsquo;coffee&rsquo;, &lsquo;mochaTest&rsquo;]
```</p>

<p>Now when we run <code>grunt</code>, our build process will run, then our test process,
then we should see one incredibly happy
<a href="http://www.nyan.cat/">nyan cat</a>.
The
<a href="http://visionmedia.github.io/mocha/#reporters">nyan cat mocha test reporter</a>
is basically the pinnacle of human intellectual achievement.</p>

<p>```text
grunt
Running &ldquo;coffee:compile&rdquo; (coffee) task
File lib/nanomsg.js created.</p>

<p>Running &ldquo;mochaTest:src&rdquo; (mochaTest) task
 1   &ndash;<strong>,&mdash;&mdash;&mdash;,
 0   &ndash;</strong>|  /_/\
 0   &ndash;<em>~|</em>( ^ .^)</p>

<pre><code> -_ ""  ""
</code></pre>

<p>  1 passing (5 ms)</p>

<p>Done, without errors.
```
<a href="https://github.com/nickdesaulniers/node-nanomsg/commit/a43bcb3f69ca20bb1902472ecc954317e5fe0fe3">Commit time</a>.</p>

<p>```text
tree -L 2 -C -a -I &lsquo;.git&rsquo;
.
├── .gitignore
├── Gruntfile.coffee
├── lib
│   └── nanomsg.js
├── node_modules
│   ├── ffi
│   ├── grunt
│   └── grunt-contrib-coffee
├── src
│   └── nanomsg.coffee
└── test</p>

<pre><code>└── test.coffee
</code></pre>

<p>7 directories, 5 files
```</p>

<h2>Create node module</h2>

<p>Now that we have a more modular design with build and test logic built in,
let&rsquo;s make this module redistributable.  First, let&rsquo;s talk about ignoring
files.  Create a <code>.npmignore</code> file that will specify what not to include in the
module that is downloaded.  Node Package Manager,
<a href="https://npmjs.org/">npm</a>,
will
<a href="https://npmjs.org/doc/developers.html#Keeping-files-out-of-your-package">ignore a bunch of files by default</a>
for us.</p>

<p><code>text .npmignore
Gruntfile.coffee
src/
test/
</code></p>

<p>Here we&rsquo;re ignoring the <code>src/</code> dir, where in our <code>.gitignore</code> we are going to
ignore <code>lib/</code>.</p>

<p><code>text .gitignore
node_modules/
lib/
*.swp
</code></p>

<p>Why are we doing this?  Admittedly, none of this is strictly necessary, but
here&rsquo;s why I think it is useful.  When someone is checking out the source, they
don&rsquo;t need the results of the compilation step, as they can make modifications
and would need to recompile anyways.  Adding <code>lib/nanomsg.js</code> would just be
another thing to download (though its size is relatively insignificant).
Likewise, when someone downloads the module, they most likely just want the
results of the compilation step, not the source, build script, or test suite.
If I was planned on making the compiled JavaScript accessible to a web browser,
I would not add <code>lib/</code> to <code>.gitignore</code>, that way it could be referenced from the
github raw URL.
Again, these are generalizations that are not always true.  To make up for not
having the entire source when installed as a module, we&rsquo;ll make up for it by
adding a link to the repo from of manifest, but first let&rsquo;s
<a href="https://github.com/nickdesaulniers/node-nanomsg/commit/61458d964eaaee2ae6501bfbd186a1fe0d03d827">commit</a>!</p>

<p>Time to create a manifest file that has some basic info about our app.  It&rsquo;s a
pretty good idea to run <code>npm search &lt;packagename&gt;</code> before hand to make sure
your planned package name is not taken.  Since we have all of our dependencies
in a row, let&rsquo;s run
<code>npm init</code>.</p>

<p>```text
This utility will walk you through creating a package.json file.
It only covers the most common items, and tries to guess sane defaults.</p>

<p>See <code>npm help json</code> for definitive documentation on these fields
and exactly what they do.</p>

<p>Use <code>npm install &lt;pkg&gt; --save</code> afterwards to install a package and
save it as a dependency in the package.json file.</p>

<p>Press ^C at any time to quit.
name: (nanomsg)
version: (0.0.0)
description: nanomsg bindings
entry point: (index.js) lib/nanomsg.js
test command: grunt
git repository: (git://github.com/nickdesaulniers/node-nanomsg.git)
keywords: nanomsg
author: Nick Desaulniers
license: (BSD-2-Clause) Beerware
About to write to /Users/Nicholas/code/c/nanomsg/package.json:</p>

<p>{
  &ldquo;name&rdquo;: &ldquo;nanomsg&rdquo;,
  &ldquo;version&rdquo;: &ldquo;0.0.0&rdquo;,
  &ldquo;description&rdquo;: &ldquo;nanomsg bindings&rdquo;,
  &ldquo;main&rdquo;: &ldquo;lib/nanomsg.js&rdquo;,
  &ldquo;directories&rdquo;: {</p>

<pre><code>"test": "test"
</code></pre>

<p>  },
  &ldquo;dependencies&rdquo;: {</p>

<pre><code>"chai": "~1.7.2",
"ffi": "~1.2.5",
"grunt": "~0.4.1",
"grunt-mocha-test": "~0.6.3",
"grunt-contrib-coffee": "~0.7.0"
</code></pre>

<p>  },
  &ldquo;devDependencies&rdquo;: {},
  &ldquo;scripts&rdquo;: {</p>

<pre><code>"test": "grunt"
</code></pre>

<p>  },
  &ldquo;repository&rdquo;: {</p>

<pre><code>"type": "git",
"url": "git://github.com/nickdesaulniers/node-nanomsg.git"
</code></pre>

<p>  },
  &ldquo;keywords&rdquo;: [</p>

<pre><code>"nanomsg"
</code></pre>

<p>  ],
  &ldquo;author&rdquo;: &ldquo;Nick Desaulniers&rdquo;,
  &ldquo;license&rdquo;: &ldquo;Beerware&rdquo;,
  &ldquo;bugs&rdquo;: {</p>

<pre><code>"url": "https://github.com/nickdesaulniers/node-nanomsg/issues"
</code></pre>

<p>  }
}</p>

<p>Is this ok? (yes)
```</p>

<p>That should create for us a nice package.json manifest file for npm.</p>

<p>We can now run our tests with the command <code>npm test</code> in addition to <code>grunt</code>.
Let&rsquo;s hold off on publishing just yet,
<a href="https://github.com/nickdesaulniers/node-nanomsg/commit/6ac3425005c69683df85f75c49e27c9cb634ada6">committing</a>
instead.</p>

<p>```
tree -L 2 -C -a -I &lsquo;.git&rsquo;
.
├── .gitignore
├── .npmignore
├── Gruntfile.coffee
├── lib
│   └── nanomsg.js
├── node_modules
│   ├── .bin
│   ├── chai
│   ├── ffi
│   ├── grunt
│   ├── grunt-contrib-coffee
│   └── grunt-mocha-test
├── package.json
├── src
│   └── nanomsg.coffee
└── test</p>

<pre><code>└── test.coffee
</code></pre>

<p>10 directories, 7 files
```</p>

<h2>Add LICENSE and README</h2>

<p>So we have a module that&rsquo;s almost ready to go.  But how will developers know
how to reuse this code?  As much as I like to
<em><a href="http://bartaz.github.io/impress.js/#/source">view the source, Luke</a></em>,
npm will complain without a readme.  The
<a href="https://github.com/nickdesaulniers/node-nanomsg/commit/95e5a7203740f8ab31758f54491d095567accf70">readme</a>
also looks nice on the github repo.</p>

<pre><code># Node-NanoMSG
Node.js binding for [nanomsg](http://nanomsg.org/index.html).

## Usage

`npm install nanomsg`

```javascript
var nanomsg = require('nanomsg');
var assert = require('assert');
var AF_SP = nanomsg.AF_SP;
var NN_PAIR = nanomsg.NN_PAIR;
var msg = new Buffer('hello');
var recv = new Buffer(msg.length);
var s1, s2, ret;

s1 = nanomsg.nn_socket(AF_SP, NN_PAIR);
assert(s1 &gt;= 0, 's1: ' + nanomsg.errno());

ret = nanomsg.nn_bind(s1, 'inproc://a');
assert(ret &gt; 0, 'bind');

s2 = nanomsg.nn_socket(AF_SP, NN_PAIR);
assert(s2 &gt;= 0, 's2: ' + nanomsg.errno());

ret = nanomsg.nn_connect(s2, 'inproc://a');
assert(ret &gt; 0, 'connect');

ret = nanomsg.nn_send(s2, msg, msg.length, 0);
assert(ret &gt; 0, 'send');

ret = nanomsg.recv(s1, recv, recv.length, 0);
assert(ret &gt; 0, 'recv');

assert(msg.toString() === recv.toString(), "didn't receive sent message");
console.log(recv.toString());
</code></pre>

<p>Before we publish, let&rsquo;s create a
<a href="https://github.com/nickdesaulniers/node-nanomsg/commit/48a55d0c51099f6b90cae5f190a8eb2b94140eae">license</a>
file, because though we are making
our code publicly viewable,
<a href="https://help.github.com/articles/open-source-licensing#what-happens-if-i-dont-choose-a-license">public source code without an explicit license is still under copyright and cannot be reused</a>.</p>

<p><code>text LICENSE
/*
 * ----------------------------------------------------------------------------
 * "THE BEER-WARE LICENSE" (Revision 42):
 * &lt;nick@mozilla.com&gt; wrote this file. As long as you retain this notice you
 * can do whatever you want with this stuff. If we meet some day, and you think
 * this stuff is worth it, you can buy me a beer in return. Nick Desaulniers
 * ----------------------------------------------------------------------------
 */
</code></p>

<p>If you want to be more serious, maybe instead shoot for an MIT or BSD style
license if you don&rsquo;t care what your repo gets used for or GPL style if you do.
<a href="http://www.tldrlegal.com/">TLDRLegal</a> has a great breakdown on common licenses.</p>

<p>```text
tree -L 2 -C -a -I &lsquo;.git&rsquo;
.
├── .gitignore
├── .npmignore
├── Gruntfile.coffee
├── LICENSE
├── README.md
├── lib
│   └── nanomsg.js
├── node_modules
│   ├── .bin
│   ├── chai
│   ├── ffi
│   ├── grunt
│   ├── grunt-contrib-coffee
│   └── grunt-mocha-test
├── package.json
├── src
│   └── nanomsg.coffee
└── test</p>

<pre><code>└── test.coffee
</code></pre>

<p>10 directories, 9 files
```</p>

<h2>Publish</h2>

<p><code>npm publish</code>
<code>text
npm http PUT https://registry.npmjs.org/nanomsg
npm http 201 https://registry.npmjs.org/nanomsg
npm http GET https://registry.npmjs.org/nanomsg
npm http 200 https://registry.npmjs.org/nanomsg
npm http PUT https://registry.npmjs.org/nanomsg/-/nanomsg-0.0.0.tgz/-rev/1-20f1ec5ca2eed51e840feff22479bb5d
npm http 201 https://registry.npmjs.org/nanomsg/-/nanomsg-0.0.0.tgz/-rev/1-20f1ec5ca2eed51e840feff22479bb5d
npm http PUT https://registry.npmjs.org/nanomsg/0.0.0/-tag/latest
npm http 201 https://registry.npmjs.org/nanomsg/0.0.0/-tag/latest
+ nanomsg@0.0.0
</code></p>

<p>Finally as a sanity check, I like to make a new folder elsewhere, and run
through the steps in the readme manually to make sure the package is reuseable.
Which is good, since in the readme I
<a href="https://github.com/nickdesaulniers/node-nanomsg/commit/c145d3b3a8e85354f1bfb61d8342531ec6bbaa0a">accidentally forgot</a>
the <code>nn_</code> prefix in
front of errno and recv!</p>

<p>After updating the example in the readme, let&rsquo;s
<a href="https://github.com/nickdesaulniers/node-nanomsg/commit/a6280ca85c4b9cbaac36f5b427bc052961d7e972">bump the version number</a>
and
republish.  Use <code>npm version</code> without arguments to find the current version,
then <code>npm version patch</code> to bump it.  You have to commit the readme changes
before bumping the version.  Finally don&rsquo;t forget to rerun <code>npm publish</code>.</p>

<p>Our
<a href="https://github.com/nickdesaulniers/node-nanomsg/tree/a6280ca85c4b9cbaac36f5b427bc052961d7e972">final directory structure</a>
ends up looking like:
```text
tree -L 2 -C -a -I &lsquo;.git&rsquo;
.
├── .gitignore
├── .npmignore
├── Gruntfile.coffee
├── LICENSE
├── README.md
├── lib
│   └── nanomsg.js
├── node_modules
│   ├── .bin
│   ├── chai
│   ├── ffi
│   ├── grunt
│   ├── grunt-contrib-coffee
│   └── grunt-mocha-test
├── package.json
├── src
│   └── nanomsg.coffee
└── test</p>

<pre><code>└── test.coffee
</code></pre>

<p>10 directories, 9 files
```
Lastly, I&rsquo;ll
<a href="https://github.com/250bpm/nanomsg/pull/122">reach out to</a>
Martin Sústrik and let him know that nanomsg has a new binding.</p>

<p>The bindings are far from complete, the test coverage could be better, and the
API is very C like and could use some OO syntactic sugar, but we&rsquo;re at a great
starting point and ready to rock and roll.  If you&rsquo;d like to help out, fork
<a href="https://github.com/nickdesaulniers/node-nanomsg.git">https://github.com/nickdesaulniers/node-nanomsg.git</a>.</p>

<p>What are some of your thoughts on build steps, testing, and directory layout of
node module?  This
tutorial was definitely not meant to be an authoritarian guide.  I look forward
to your comments on your experiences!</p>
]]></content>
  </entry>
  
</feed>
