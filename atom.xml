<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Nick Desaulniers]]></title>
  <link href="http://nickdesaulniers.github.io/atom.xml" rel="self"/>
  <link href="http://nickdesaulniers.github.io/"/>
  <updated>2016-05-15T19:32:52-07:00</updated>
  <id>http://nickdesaulniers.github.io/</id>
  <author>
    <name><![CDATA[Nick Desaulniers]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[What's in a Word?]]></title>
    <link href="http://nickdesaulniers.github.io/blog/2016/05/15/whats-in-a-word/"/>
    <updated>2016-05-15T17:58:00-07:00</updated>
    <id>http://nickdesaulniers.github.io/blog/2016/05/15/whats-in-a-word</id>
    <content type="html"><![CDATA[<p>Recently, there some was some confusion between myself and a coworker over the
definition of a &ldquo;word.&rdquo;  I&rsquo;m currently working on a blog post about data
alignment and figured it would be good to clarify some things now, that we can
refer to later.</p>

<p>Having studied computer engineering and being quite fond of processor design,
when I think of a &ldquo;word,&rdquo; I think of the number of bits wide a processor&rsquo;s
general purpose registers are
(aka <a href="https://en.wikipedia.org/wiki/Word_%28computer_architecture%29#Size_families">word size</a>).
This places hard requirements on the largest representable number and address
space.  A 64 bit processor can represent 2<sup>64</sup>-1 (1.8x10<sup>19</sup>) as the largest
unsigned long integer, and address up to 2<sup>64</sup>-1 (16 EiB) different addresses in
memory.</p>

<p>Further, word size limits the possible combinations of operations the processor
can perform, length of immediate values used, size of binary files, memory
needed to store pointers, and puts pressure on instruction caches.</p>

<p>Word size also has implications on loads and stores based on alignment, as
we&rsquo;ll see in a follow up post.</p>

<p>When I think of 8 bit computers, I think of my first microcontroller: an
Arduino with an Atmel AVR processor.  When I think of 16 bit computers, I think
of my first game console, a Super Nintendo with a Ricoh 5A22.  When I think of
32 bit computers, I think of my first desktop with Intel&rsquo;s Pentium III.  And
when I think of 64 bit computers, I think modern smartphones with ARMv8
instruction sets.  When someone mentions a particular word size, what are the
machines that come to mind for you?</p>

<p>So to me, when someone&rsquo;s talking about a 64b processor, to that machine (and
me) a word is 64b.  When we&rsquo;re referring to a 8b processor, a word is 8b.</p>

<p>Now, some confusion.</p>

<p>Back in my previous blog posts about
<a href="http://nickdesaulniers.github.io/blog/2014/04/18/lets-write-some-x86-64/">x86-64 assembly</a>,
<a href="http://nickdesaulniers.github.io/blog/2015/05/25/interpreter-compiler-jit/">JITs</a>, or
<a href="http://nickdesaulniers.github.io/blog/2016/01/20/debugging-x86-64-assembly-with-lldb-and-dtrace/">debugging</a>,
you might have seen me use instructions that have suffixes of b for byte (8b),
w for word (16b), dw for double word (32b), and qw for quad word (64b) (since
SSE2 there&rsquo;s also double quadwords of 128b).</p>

<p>Wait a minute!  How suddenly does a &ldquo;word&rdquo; refer to 16b on a 64b processor, as
opposed to a 64b &ldquo;word?&rdquo;</p>

<p>In short, historical baggage.  Intel&rsquo;s first hit processor was the
<a href="https://en.wikipedia.org/wiki/Intel_4004">4004</a>,
a 4b processor released in 1971.  It wasn&rsquo;t until 1979 that Intel created the
16b
<a href="https://en.wikipedia.org/wiki/Intel_8086">8086 processor</a>.</p>

<p>The 8086 was created to compete with other 16b processors that beat it to the
market, like the
<a href="https://en.wikipedia.org/wiki/Zilog_Z80">Zilog Z80</a>
(any Gameboy emulator fans out there?  Yes, I know about the Sharp LR35902).
The 8086 was the first design in the
<a href="https://en.wikipedia.org/wiki/X86">x86 family</a>,
and it allowed for the same assembly syntax from the earlier 8008, 8080, and
8085 to be reassembled for it.  The 8086&rsquo;s little brother (8088) would be used
in
<a href="https://en.wikipedia.org/wiki/IBM_Personal_Computer#Open_standards">IBM&rsquo;s PC</a>,
and the rest is history.  x86 would become one of the most successful
ISAs in history.</p>

<p>For backwards compatibility, it seems that both Microsoft&rsquo;s (whose success has
tracked that of x86 since MS-DOS and IBM&rsquo;s PC) and Intel&rsquo;s documentation refers
to words still as being 16b. This allowed 16b PE32+ executables to be run on
32b or even 64b newer versions of Windows, without requiring recompilation of
source or source code modification.</p>

<p>This isn&rsquo;t necessarily wrong to refer to a word based on backwards
compatibility, it&rsquo;s just important to understand the context in which the term
&ldquo;word&rdquo; is being used, and that there might be some confusion if you have a
background with x86 assembly, Windows API programming, or processor design.</p>

<p>So the next time someone asks: why does Intel&rsquo;s documentation commonly refer to
a &ldquo;word&rdquo; as 16b, you can tell them that the x86 and x86-64 ISAs have maintained
the notion of a word being 16b since the first x86 processor, the 8086, which
was a 16b processor.</p>

<p><em>Side Note: for an excellent historical perspective programming early x86
chips, I recommend Michael Abrash&rsquo;s</em>
<a href="http://www.gamedev.net/page/resources/_/technical/graphics-programming-and-theory/graphics-programming-black-book-r1698">Graphics Programming Black Book</a>.
<em>For instance he talks about 8086&rsquo;s little brother, the 8088, being a 16b chip
but only having an 8b bus with which to access memory. This caused a mysterious</em>
<a href="http://downloads.gamedev.net/pdf/gpbb/gpbb4.pdf">&ldquo;cycle eater&rdquo;</a>
<em>to prevent fast access to 16b variables, though they were the processor&rsquo;s
natural size.  Michael also alludes to alignment issues we&rsquo;ll see in a follow
up post.</em></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Intro to Debugging x86-64 Assembly]]></title>
    <link href="http://nickdesaulniers.github.io/blog/2016/01/20/debugging-x86-64-assembly-with-lldb-and-dtrace/"/>
    <updated>2016-01-20T20:04:00-08:00</updated>
    <id>http://nickdesaulniers.github.io/blog/2016/01/20/debugging-x86-64-assembly-with-lldb-and-dtrace</id>
    <content type="html"><![CDATA[<p>I&rsquo;m hacking on an assembly project, and wanted to document some of the tricks I
was using for figuring out what was going on.  This post might seem a little
basic for folks who spend all day heads down in gdb or who do this stuff
professionally, but I just wanted to share a quick intro to some tools that
others may find useful.
(<a href="https://pchiusano.github.io/2014-10-11/defensive-writing.html">oh god, I&rsquo;m doing it</a>)</p>

<p>If your coming from gdb to lldb, there&rsquo;s a few differences in commands.  LLDB
has
<a href="http://lldb.llvm.org/lldb-gdb.html">great documentation</a>
on some of the differences. Everything in this post about LLDB is pretty much
there.</p>

<p>The bread and butter commands when working with gdb or lldb are:</p>

<ul>
<li>r (run the program)</li>
<li>s (step in)</li>
<li>n (step over)</li>
<li>finish (step out)</li>
<li>c (continue)</li>
<li>q (quit the program)</li>
</ul>


<p>You can hit enter if you want to run the last command again, which is really
useful if you want to keep stepping over statements repeatedly.</p>

<p>I&rsquo;ve been using LLDB on OSX.  Let&rsquo;s say I want to debug a program I can build,
but is crashing or something:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>sudo lldb ./asmttpd web_root
</span></code></pre></td></tr></table></div></figure>


<p>Setting a breakpoint on jump to label:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="o">(</span>lldb<span class="o">)</span> b sys_write
</span><span class='line'>Breakpoint 3: <span class="nv">where</span> <span class="o">=</span> asmttpd<span class="sb">`</span>sys_write, <span class="nv">address</span> <span class="o">=</span> 0x00000000000029ae
</span></code></pre></td></tr></table></div></figure>


<p>Running the program until breakpoint hit:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="o">(</span>lldb<span class="o">)</span> r
</span><span class='line'>Process 32236 launched: <span class="s1">&#39;./asmttpd&#39;</span> <span class="o">(</span>x86_64<span class="o">)</span>
</span><span class='line'>Process 32236 stopped
</span><span class='line'>* thread <span class="c">#1: tid = 0xe69b9, 0x00000000000029ae asmttpd`sys_write, queue = &#39;com.apple.main-thread&#39;, stop reason = breakpoint 3.1</span>
</span><span class='line'>    frame <span class="c">#0: 0x00000000000029ae asmttpd`sys_write</span>
</span><span class='line'>asmttpd<span class="sb">`</span>sys_write:
</span><span class='line'>-&gt;  0x29ae &lt;+0&gt;: pushq  %rdi
</span><span class='line'>    0x29af &lt;+1&gt;: pushq  %rsi
</span><span class='line'>    0x29b0 &lt;+2&gt;: pushq  %rdx
</span><span class='line'>    0x29b1 &lt;+3&gt;: pushq  %r10
</span></code></pre></td></tr></table></div></figure>


<p>Seeing more of the current stack frame:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="o">(</span>lldb<span class="o">)</span> d
</span><span class='line'>asmttpd<span class="sb">`</span>sys_write:
</span><span class='line'>-&gt;  0x29ae &lt;+0&gt;:  pushq  %rdi
</span><span class='line'>    0x29af &lt;+1&gt;:  pushq  %rsi
</span><span class='line'>    0x29b0 &lt;+2&gt;:  pushq  %rdx
</span><span class='line'>    0x29b1 &lt;+3&gt;:  pushq  %r10
</span><span class='line'>    0x29b3 &lt;+5&gt;:  pushq  %r8
</span><span class='line'>    0x29b5 &lt;+7&gt;:  pushq  %r9
</span><span class='line'>    0x29b7 &lt;+9&gt;:  pushq  %rbx
</span><span class='line'>    0x29b8 &lt;+10&gt;: pushq  %rcx
</span><span class='line'>    0x29b9 &lt;+11&gt;: movq   %rsi, %rdx
</span><span class='line'>    0x29bc &lt;+14&gt;: movq   %rdi, %rsi
</span><span class='line'>    0x29bf &lt;+17&gt;: movq   <span class="nv">$0x1</span>, %rdi
</span><span class='line'>    0x29c6 &lt;+24&gt;: movq   <span class="nv">$0x2000004</span>, %rax
</span><span class='line'>    0x29cd &lt;+31&gt;: syscall
</span><span class='line'>    0x29cf &lt;+33&gt;: popq   %rcx
</span><span class='line'>    0x29d0 &lt;+34&gt;: popq   %rbx
</span><span class='line'>    0x29d1 &lt;+35&gt;: popq   %r9
</span><span class='line'>    0x29d3 &lt;+37&gt;: popq   %r8
</span><span class='line'>    0x29 &lt;+39&gt;: popq   %r10
</span><span class='line'>    0x29d7 &lt;+41&gt;: popq   %rdx
</span><span class='line'>    0x29d8 &lt;+42&gt;: popq   %rsi
</span><span class='line'>    0x29d9 &lt;+43&gt;: popq   %rdi
</span><span class='line'>    0x29da &lt;+44&gt;: retq
</span></code></pre></td></tr></table></div></figure>


<p>Getting a back trace (call stack):</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="o">(</span>lldb<span class="o">)</span> bt
</span><span class='line'>* thread <span class="c">#1: tid = 0xe69b9, 0x00000000000029ae asmttpd`sys_write, queue = &#39;com.apple.main-thread&#39;, stop reason = breakpoint 3.1</span>
</span><span class='line'>  * frame <span class="c">#0: 0x00000000000029ae asmttpd`sys_write</span>
</span><span class='line'>    frame <span class="c">#1: 0x00000000000021b6 asmttpd`print_line + 16</span>
</span><span class='line'>    frame <span class="c">#2: 0x0000000000002ab3 asmttpd`start + 35</span>
</span><span class='line'>    frame <span class="c">#3: 0x00007fff9900c5ad libdyld.dylib`start + 1</span>
</span><span class='line'>    frame <span class="c">#4: 0x00007fff9900c5ad libdyld.dylib`start + 1</span>
</span></code></pre></td></tr></table></div></figure>


<p>peeking at the upper stack frame:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="o">(</span>lldb<span class="o">)</span> up
</span><span class='line'>frame <span class="c">#1: 0x00000000000021b6 asmttpd`print_line + 16</span>
</span><span class='line'>asmttpd<span class="sb">`</span>print_line:
</span><span class='line'>    0x21b6 &lt;+16&gt;: movabsq <span class="nv">$0x30cb</span>, %rdi
</span><span class='line'>    0x21c0 &lt;+26&gt;: movq   <span class="nv">$0x1</span>, %rsi
</span><span class='line'>    0x21c7 &lt;+33&gt;: callq  0x29ae                    ; sys_write
</span><span class='line'>    0x21cc &lt;+38&gt;: popq   %rcx
</span></code></pre></td></tr></table></div></figure>


<p>back down to the breakpoint-halted stack frame:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="o">(</span>lldb<span class="o">)</span> down
</span><span class='line'>frame <span class="c">#0: 0x00000000000029ae asmttpd`sys_write</span>
</span><span class='line'>asmttpd<span class="sb">`</span>sys_write:
</span><span class='line'>-&gt;  0x29ae &lt;+0&gt;: pushq  %rdi
</span><span class='line'>    0x29af &lt;+1&gt;: pushq  %rsi
</span><span class='line'>    0x29b0 &lt;+2&gt;: pushq  %rdx
</span><span class='line'>    0x29b1 &lt;+3&gt;: pushq  %r10
</span></code></pre></td></tr></table></div></figure>


<p>dumping the values of registers:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="o">(</span>lldb<span class="o">)</span> register <span class="nb">read</span>
</span><span class='line'>General Purpose Registers:
</span><span class='line'>       <span class="nv">rax</span> <span class="o">=</span> 0x0000000000002a90  asmttpd<span class="sb">`</span>start
</span><span class='line'>       <span class="nv">rbx</span> <span class="o">=</span> 0x0000000000000000
</span><span class='line'>       <span class="nv">rcx</span> <span class="o">=</span> 0x00007fff5fbffaf8
</span><span class='line'>       <span class="nv">rdx</span> <span class="o">=</span> 0x00007fff5fbffa40
</span><span class='line'>       <span class="nv">rdi</span> <span class="o">=</span> 0x00000000000030cc  start_text
</span><span class='line'>       <span class="nv">rsi</span> <span class="o">=</span> 0x000000000000000f
</span><span class='line'>       <span class="nv">rbp</span> <span class="o">=</span> 0x00007fff5fbffa18
</span><span class='line'>       <span class="nv">rsp</span> <span class="o">=</span> 0x00007fff5fbff9b8
</span><span class='line'>        <span class="nv">r8</span> <span class="o">=</span> 0x0000000000000000
</span><span class='line'>        <span class="nv">r9</span> <span class="o">=</span> 0x00007fff7b1670c8  atexit_mutex + 24
</span><span class='line'>       <span class="nv">r10</span> <span class="o">=</span> 0x00000000ffffffff
</span><span class='line'>       <span class="nv">r11</span> <span class="o">=</span> 0xffffffff00000000
</span><span class='line'>       <span class="nv">r12</span> <span class="o">=</span> 0x0000000000000000
</span><span class='line'>       <span class="nv">r13</span> <span class="o">=</span> 0x0000000000000000
</span><span class='line'>       <span class="nv">r14</span> <span class="o">=</span> 0x0000000000000000
</span><span class='line'>       <span class="nv">r15</span> <span class="o">=</span> 0x0000000000000000
</span><span class='line'>       <span class="nv">rip</span> <span class="o">=</span> 0x00000000000029ae  asmttpd<span class="sb">`</span>sys_write
</span><span class='line'>    <span class="nv">rflags</span> <span class="o">=</span> 0x0000000000000246
</span><span class='line'>        <span class="nv">cs</span> <span class="o">=</span> 0x000000000000002b
</span><span class='line'>        <span class="nv">fs</span> <span class="o">=</span> 0x0000000000000000
</span><span class='line'>        <span class="nv">gs</span> <span class="o">=</span> 0x0000000000000000
</span></code></pre></td></tr></table></div></figure>


<p>read just one register:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="o">(</span>lldb<span class="o">)</span> register <span class="nb">read </span>rdi
</span><span class='line'>     <span class="nv">rdi</span> <span class="o">=</span> 0x00000000000030cc  start_text
</span></code></pre></td></tr></table></div></figure>


<p>When you&rsquo;re trying to figure out what system calls are made by some C code,
using dtruss is very helpful.  dtruss is available on OSX and seems to be some
kind of wrapper around DTrace.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>cat sleep.c
</span><span class='line'><span class="c">#include &lt;time.h&gt;</span>
</span><span class='line'>int main <span class="o">()</span> <span class="o">{</span>
</span><span class='line'>  struct timespec <span class="nv">rqtp</span> <span class="o">=</span> <span class="o">{</span>
</span><span class='line'>    2,
</span><span class='line'>    0
</span><span class='line'>  <span class="o">}</span>;
</span><span class='line'>
</span><span class='line'>  nanosleep<span class="o">(</span>&amp;rqtp, NULL<span class="o">)</span>;
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$ </span>clang sleep.c
</span><span class='line'>
</span><span class='line'><span class="nv">$ </span>sudo dtruss ./a.out
</span><span class='line'>...all kinds of fun stuff
</span><span class='line'>__semwait_signal<span class="o">(</span>0xB03, 0x0, 0x1<span class="o">)</span>    <span class="o">=</span> -1 Err#60
</span></code></pre></td></tr></table></div></figure>


<p>If you compile with <code>-g</code> to emit debug symbols, you can use lldb&rsquo;s disassemble
command to get the equivalent assembly:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>clang sleep.c -g
</span><span class='line'><span class="nv">$ </span>lldb a.out
</span><span class='line'><span class="o">(</span>lldb<span class="o">)</span> target create <span class="s2">&quot;a.out&quot;</span>
</span><span class='line'>Current executable <span class="nb">set </span>to <span class="s1">&#39;a.out&#39;</span> <span class="o">(</span>x86_64<span class="o">)</span>.
</span><span class='line'><span class="o">(</span>lldb<span class="o">)</span> b main
</span><span class='line'>Breakpoint 1: <span class="nv">where</span> <span class="o">=</span> a.out<span class="sb">`</span>main + 16 at sleep.c:3, <span class="nv">address</span> <span class="o">=</span> 0x0000000100000f40
</span><span class='line'><span class="o">(</span>lldb<span class="o">)</span> r
</span><span class='line'>Process 33213 launched: <span class="s1">&#39;/Users/Nicholas/code/assembly/asmttpd/a.out&#39;</span> <span class="o">(</span>x86_64<span class="o">)</span>
</span><span class='line'>Process 33213 stopped
</span><span class='line'>* thread <span class="c">#1: tid = 0xeca04, 0x0000000100000f40 a.out`main + 16 at sleep.c:3, queue = &#39;com.apple.main-thread&#39;, stop reason = breakpoint 1.1</span>
</span><span class='line'>    frame <span class="c">#0: 0x0000000100000f40 a.out`main + 16 at sleep.c:3</span>
</span><span class='line'>   1    <span class="c">#include &lt;time.h&gt;</span>
</span><span class='line'>   2    int main <span class="o">()</span> <span class="o">{</span>
</span><span class='line'>-&gt; 3      struct timespec <span class="nv">rqtp</span> <span class="o">=</span> <span class="o">{</span>
</span><span class='line'>   4        2,
</span><span class='line'>   5        0
</span><span class='line'>   6      <span class="o">}</span>;
</span><span class='line'>   7
</span><span class='line'><span class="o">(</span>lldb<span class="o">)</span> disassemble
</span><span class='line'>a.out<span class="sb">`</span>main:
</span><span class='line'>    0x100000f30 &lt;+0&gt;:  pushq  %rbp
</span><span class='line'>    0x100000f31 &lt;+1&gt;:  movq   %rsp, %rbp
</span><span class='line'>    0x100000f34 &lt;+4&gt;:  subq   <span class="nv">$0x20</span>, %rsp
</span><span class='line'>    0x100000f38 &lt;+8&gt;:  leaq   -0x10<span class="o">(</span>%rbp<span class="o">)</span>, %rdi
</span><span class='line'>    0x100000f3c &lt;+12&gt;: xorl   %eax, %eax
</span><span class='line'>    0x100000f3e &lt;+14&gt;: movl   %eax, %esi
</span><span class='line'>-&gt;  0x100000f40 &lt;+16&gt;: movq   0x49<span class="o">(</span>%rip<span class="o">)</span>, %rcx
</span><span class='line'>    0x100000f47 &lt;+23&gt;: movq   %rcx, -0x10<span class="o">(</span>%rbp<span class="o">)</span>
</span><span class='line'>    0x100000f4b &lt;+27&gt;: movq   0x46<span class="o">(</span>%rip<span class="o">)</span>, %rcx
</span><span class='line'>    0x100000f52 &lt;+34&gt;: movq   %rcx, -0x8<span class="o">(</span>%rbp<span class="o">)</span>
</span><span class='line'>    0x100000f56 &lt;+38&gt;: callq  0x100000f68               ; symbol stub <span class="k">for</span>: nanosleep
</span><span class='line'>    0x100000f5b &lt;+43&gt;: xorl   %edx, %edx
</span><span class='line'>    0x100000f5d &lt;+45&gt;: movl   %eax, -0x14<span class="o">(</span>%rbp<span class="o">)</span>
</span><span class='line'>    0x100000f60 &lt;+48&gt;: movl   %edx, %eax
</span><span class='line'>    0x100000f62 &lt;+50&gt;: addq   <span class="nv">$0x20</span>, %rsp
</span><span class='line'>    0x100000f66 &lt;+54&gt;: popq   %rbp
</span><span class='line'>    0x100000f67 &lt;+55&gt;: retq
</span></code></pre></td></tr></table></div></figure>


<p>Anyways, I&rsquo;ve been learning some interesting things about OSX that I&rsquo;ll be
sharing soon. If you&rsquo;d like to learn more about x86-64 assembly programming,
you should read my other posts about
<a href="http://nickdesaulniers.github.io/blog/2014/04/18/lets-write-some-x86-64/">writing x86-64</a>
and a toy
<a href="http://nickdesaulniers.github.io/blog/2015/05/25/interpreter-compiler-jit/">JIT for Brainfuck</a>
(<a href="https://www.reddit.com/r/programming/comments/377ov9/interpreter_compiler_jit/crkkrz4">the creator of Brainfuck liked it</a>).</p>

<p>I should also do a post on
<a href="http://rr-project.org/">Mozilla&rsquo;s rr</a>,
because it can do amazing things like step backwards.  Another day&hellip;</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[My SIGGRAPH 2015 Experience]]></title>
    <link href="http://nickdesaulniers.github.io/blog/2015/08/14/my-siggraph-2015-experience/"/>
    <updated>2015-08-14T10:10:00-07:00</updated>
    <id>http://nickdesaulniers.github.io/blog/2015/08/14/my-siggraph-2015-experience</id>
    <content type="html"><![CDATA[<p>I was recently lucky enough to get to attend my first SIGGRAPH conference this
year.  While I didn&rsquo;t attend any talks, I did spend some time in the expo. Here
is a collection of some of the neat things I saw at SIGGRAPH 2015.  Sorry it&rsquo;s
not more collected; I didn&rsquo;t have the intention of writing a blog post until
after folks kept asking me &ldquo;how was it?&rdquo;</p>

<h2>VR</h2>

<p>Most booths had demos on VR headsets.  Many were DK2&rsquo;s and GearVR&rsquo;s.  AMD and
NVIDIA had Crescent Bay&rsquo;s (next gen VR headset).  It was noticeably lighter than
the DK2, and I thought it rendered better quality.  It had nicer cable bundling,
and
headphones built in, that could fold up and lock out of the way that made it
nice to put on/take off.  I also tried a Sony Morpheus.  They had a very
engaging demo that was a tie in to the upcoming movie about tight rope walking,
&ldquo;The Walk&rdquo;.  They had a thin PVC pipe taped to the floor that you had to
balance on, and a fan, and you were tight rope walking between the Twin Towers.
Looking down and trying to balance was terrifying.  There were some demos with
a strange mobile VR setup where folks had a backpack on that had an open laptop
hanging off the back and could walk around.  Toyota and Ford had demos where you
could inspect their vehicles in virtual space.  I did not see a single HTC/Valve
Vive at SIGGRAPH.</p>

<p><img class="center" src="http://nickdesaulniers.github.io/images/siggraph/s8.jpg">
<img class="center" src="http://nickdesaulniers.github.io/images/siggraph/s1.jpg">
<img class="center" src="http://nickdesaulniers.github.io/images/siggraph/s3.jpg">
<img class="center" src="http://nickdesaulniers.github.io/images/siggraph/s2.jpg">
<img class="center" src="http://nickdesaulniers.github.io/images/siggraph/s4.jpg"></p>

<h2>AR</h2>

<p>Epson had some AR glasses. They were very glasses friendly, unlike most VR
headsets.  The nose piece was flexible, and if you flattened it out, the headset
could rest on top of your glasses and worked well.  The headset had some very
thick compound lenses.  There was a front facing camera and they had a simple
demo using image recognition of simple logos (like QR codes) that helped provide
position data.  There were other demos with orientation tracking that worked
well.  They didn&rsquo;t have positional sensor info, but had some hack that tried to
estimate positional velocity off the angular momentum (I spoke with the
programmer who implemented it).  <a href="https://moverio.epson.biz/">https://moverio.epson.biz/</a></p>

<h2>Holograms</h2>

<p>There was a demo of holograms using tilted pieces of plastic arranged in a box.
Also, there was a multiple (200+) projector array that projected a scene onto a
special screen.  When walking around the screen, the viewing angle always seemed
correct.  It was very convincing, except for the jarring restart of the animated
loop which could be smoothed out (think looping/seamless gifs).</p>

<p><img class="center" src="http://nickdesaulniers.github.io/images/siggraph/s5.jpg"></p>

<h2>VR/3D video</h2>

<p>Google cardboard had a booth showing off 3D videos from youtube.  I had a hard
time telling if the video were stereoscopic or monoptic since the demo videos
only had things in the distance so it was hard to tell if parallax was
implemented correctly.  A bunch of booths were showing off 3D video, but as far
as I could tell, all of the correctly rendered stereoscopic shots were computer
rendered.  I could not find a single instance with footage shot from a
stereoscopic rig, though I tried.</p>

<h2>Booths/Expo</h2>

<p>NVIDIA and Intel had the largest booths, followed by Pixar&rsquo;s Renderman.  Felt
like a GDC event, smaller, but definitely larger than GDC next.  More focus on
shiny photorealism demos, artistic tools, less on game engines themselves.</p>

<h2>Vulcan/OpenGL ES 3.2</h2>

<p>Intel had demos of Vulcan and OpenGL ES 3.2.  For 3.2 they were showing off
tessellation shaders, I think.  For the Vulcan demo, they had a cool demo showing
how with
a particle demo scene rendered with OpenGL 4, a single CPU was pegged, it was
using a lot of power, and had pretty abysmal framerate.  When rendering the same
scene with Vulcan, they were able to more evenly distribute the workload across
CPUs, achieve higher framerate, while using less power.  The API to Vulcan is
<em>still</em> not published, so no source code is available. It was explained to me
that Vulcan is still not thread safe; instead you get the freedom to implement
synchronization rather than the driver.</p>

<h2>Planetarium</h2>

<p>There was a neat demo of a planetarium projector being repurposed to display
an &ldquo;on rails&rdquo; demo of a virtual scene.  You didn&rsquo;t get parallax since it was
being projected on a hemisphere, but it was neat in that like IMAX your entire
FOV was encompassed, but you could move your head, not see any pixels, and
didn&rsquo;t experience any motion sickness or disorientation.</p>

<p><img class="center" src="http://nickdesaulniers.github.io/images/siggraph/s7.jpg"></p>

<h2>X3D/X3DOM</h2>

<p>I spoke with some folks at the X3D booth about X3DOM.  To me, it seems like a
bunch of previous attempts have kind of added on too much complexity in an
effort to support every use case under the sun, rather than just accept
limitations, so much so that getting started writing hello world became
difficult.  Some of the folks I spoke to at the booth echoed this sentiment, but
also noted the lack of authoring tools as things that hurt adoption.  I have
some neat things I&rsquo;m working on in this space, based on this and other prior
works, that I plan on showing off at the upcoming BrazilJS.</p>

<h2>Maker Faire</h2>

<p>There was a cool maker faire, some things I&rsquo;ll have to order for family members
(young hackers in training) were <a href="http://cannybots.com/">Canny bots</a>,
<a href="http://ebeeproject.net/">eBee</a> and <a href="http://www.withpiper.com/">Piper</a>.</p>

<p><img class="center" src="http://nickdesaulniers.github.io/images/siggraph/s6.jpg"></p>

<h2>Experimental tech</h2>

<p>Bunch of neat input devices, one I liked used directional sound as tactile
feedback.  One demo was rearranging icons on a home screen.  Rather than touch
the screen, there was a field of tiny speakers that would blast your finger with
sound when it entered to simulate the feeling of vibration. It would vibrate
to let you know you had &ldquo;grabbed&rdquo; and icon, and then drag it.</p>

<h2>Book Signing</h2>

<p>This was the first time I got to see my book printed in physical form!  It
looked gorgeous, hardcover printed in color.  I met about half of the fellow
authors who were also at SIGGRAPH, and our editor.  I even got to meet Eric
Haines, who reviewed my chapter before publication!</p>

<p><img class="center" src="http://nickdesaulniers.github.io/images/siggraph/s9.jpg">
<img class="center" src="http://nickdesaulniers.github.io/images/siggraph/s10.jpg">
<img class="center" src="http://nickdesaulniers.github.io/images/siggraph/s11.jpg"></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Additional C/C++ Tooling]]></title>
    <link href="http://nickdesaulniers.github.io/blog/2015/07/23/additional-c-slash-c-plus-plus-tooling/"/>
    <updated>2015-07-23T21:10:00-07:00</updated>
    <id>http://nickdesaulniers.github.io/blog/2015/07/23/additional-c-slash-c-plus-plus-tooling</id>
    <content type="html"><![CDATA[<p><a href="http://shop.oreilly.com/product/0636920025108.do">21st Century C by Ben Klemens</a>
was a great read. It had a section with an
intro to autotools, git, and gdb.
There are a few other useful tools that came to mind that I&rsquo;ve used when
working with C and C++ codebases. These tools are a great way to start
contributing to
<a href="https://github.com/nickdesaulniers/What-Open-Source-Means-To-Me#what-open-source-means-to-me">Open Source</a>
C &amp; C++ codebases; running these tools on
the code or adding them to the codebases.  A lot of these favor command line,
open source utilities. See how many you are familiar with!</p>

<h2>Build Tools</h2>

<h3>CMake</h3>

<p>The first tool I&rsquo;d like to take a look at is
<a href="http://www.cmake.org/overview/">CMake</a>.  CMake is yet another build tool; I
realize how contentious it is to even discuss one of the many.  From my
experience working with
<a href="https://kripken.github.io/emscripten-site/docs/introducing_emscripten/about_emscripten.html">Emscripten</a>,
we recommend the use of CMake for people
writing portable C/C++ programs.  CMake is able to emit Makefiles for unixes,
project files for Xcode on OSX, and project files for Visual Studio on Windows.
There are also a few other &ldquo;generators&rdquo; that you can use.</p>

<p>I&rsquo;ve been really impressed with CMake&rsquo;s modules for
<a href="http://www.cmake.org/cmake/help/v3.0/command/find_package.html">finding dependencies</a>
and
<a href="http://www.cmake.org/cmake/help/v3.0/module/ExternalProject.html">another for fetching and building external dependencies</a>.
I think
<a href="https://www.youtube.com/watch?v=nshzjMDD79w">C++ needs a package manager badly</a>,
and I think CMake would be a solid foundation for one.</p>

<p>The syntax isn&rsquo;t the greatest, but when I wanted to try to build one of my C++
projects on Windows which I know nothing about developing on, I was able to
install CMake and Visual Studio and get my project building.  If you can build
your code on one platform, it will usually build on the others.</p>

<p>If you&rsquo;re not worried about writing cross platform C/C++, maybe CMake is not
worth the effort, but I find it useful.  I wrestle with the syntax sometimes,
but documentation is not bad and it&rsquo;s something you deal with early on in the
development of a project and hopefully never have to touch again (how I wish
that were true).</p>

<h2>Code Formatters</h2>

<h3>ClangFormat</h3>

<p>Another contentious point of concern amongst developers is code style.
<a href="http://google-styleguide.googlecode.com/svn/trunk/cppguide.html">Big companies</a>
with lots of C++ code have
<a href="https://developer.mozilla.org/en-US/docs/Mozilla/Developer_guide/Coding_Style#CC_practices">documents</a>
explaining their stylistic choices.  Don&rsquo;t waste another hour of your life
arguing about something that really doesn&rsquo;t matter.
<a href="http://clang.llvm.org/docs/ClangFormat.html">ClangFormat</a> will help you
codify your style and format your code for you to match the style.  Simply
write the code however you want, and run the formatter on it before commiting
it.</p>

<p>It can also emit a .clang-format file that you can commit and clang-format will automatically look for that file and use the rules codified there.</p>

<h2>Linters</h2>

<h3>Flint / Flint++</h3>

<p><a href="https://github.com/facebook/flint">Flint</a> is a C++ linter in use at Facebook.
Since it moved from being
implemented in C++ to D, I&rsquo;ve had issues building it.  I&rsquo;ve had better luck
with a fork that&rsquo;s pure C++ without any of the third party dependencies Flint
originally had, called
<a href="https://github.com/L2Program/FlintPlusPlus">Flint++</a>.  While not quite full-on
static analyzers, both can be used for finding potential issues in your code
ahead of time. Linters can look at individual files in isolation; you don&rsquo;t
have to wait for long recompiles like you would with a static analyzer.</p>

<h2>Static Analyzers</h2>

<h3>Scan-build</h3>

<p><a href="http://clang-analyzer.llvm.org/scan-build.html">Scan-build</a> is a static
analyzer for C and C++ code.  You build your code &ldquo;through&rdquo; it, then use the
sibling tool scan-view to see the results.  Scan-view will emit and open an
html file that shows a list of the errors it detected.  It will insert
hyperlinks into the resulting document that step you through how certain
conditions could lead to a null pointer dereference, for example.  You can also
save and share those html files with others in the project. Static analyzers
will help you catch bugs at compile time before you run the code.</p>

<h2>Runtime Sanitizers</h2>

<h3>ASan and UBSan</h3>

<p>Clang&rsquo;s Address (ASan) and Undefined Behavior (UBSan) sanitizers are simply
compiler flags that can be used to detect errors at runtime.  ASan and UBSan
two of the more popular tools, but there are actually a ton and more being
implemented.  See the list
<a href="http://clang.llvm.org/docs/UsersManual.html#controlling-code-generation">here</a>.
These sanitizers will catch bugs at runtime, so you&rsquo;ll have to run the code
to notice any violations, at variable runtime performance costs per sanitizer.
ASan and TSan (Thread Sanitizer) made it into gcc4.8 and UBSan is in gcc4.9.</p>

<h2>Header Analysis</h2>

<h3>Include What You Use</h3>

<p><a href="https://github.com/include-what-you-use/include-what-you-use">Include What You Use</a>
(IWYU) helps you find unused or unnecessary <code>#include</code> preprocessor directives.
It should be obvious how this can help improve compile times. IWYU can also
help cut down on recompiles by recommending forward declarations under certain
conditions.
I look forward to the C++ module proposal being adopted, but until then this
tool can help you spot cruft that can be removed.</p>

<h2>Rapid Recompiles</h2>

<h3>ccache</h3>

<p><a href="https://ccache.samba.org/">ccache</a> greatly improves recompile times by caching
the results of parts of the compilation process.
<a href="https://github.com/nickdesaulniers/dotfiles/blob/49984b3e82022e5ce82e778fc8ce990f8e1e554a/.mozconfig#L1">I use when building Firefox</a>,
and it saves a great deal of time.</p>

<h3>distcc</h3>

<p><a href="https://github.com/distcc/distcc">distcc</a> is a distributed build system.
<a href="http://blog.dholbert.org/">Some folks at Mozilla</a> speed up their Firefox builds with it.</p>

<h2>Memory Leak Detectors</h2>

<h3>Valgrind</h3>

<p><a href="http://valgrind.org/info/about.html">Valgrind</a> has a
<a href="http://valgrind.org/info/about.html">suite of tools</a>, my
favorite being memcheck for finding memory leaks. Unfortunately, it doesn&rsquo;t
seem to work on OSX since 10.10.
<a href="https://code.google.com/p/address-sanitizer/wiki/ComparisonOfMemoryTools">This page</a>
referring to ASan seems to indicate that it can do everything Valgrind&rsquo;s
Memcheck can, at less of a runtime performance cost, but I&rsquo;m not sure how true
this is exactly.</p>

<h3>leaks</h3>

<p>A much more primitive tool for finding leaks from the command line, BSD&rsquo;s have
<code>leaks</code>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">MallocStackLogging</span><span class="o">=</span>1 ./a.out
</span><span class='line'>leaks a.out
</span><span class='line'>...
</span></code></pre></td></tr></table></div></figure>


<h2>Profilers</h2>

<h3>Perf</h3>

<p>Perf, and
<a href="http://www.brendangregg.com/flamegraphs.html">Brendan Gregg&rsquo;s tools for emitting SVG flamegraphs</a>
from the output
are helpful for finding where time is spent in a program. In fact, there are
numerous perfomance analysis tools that are Linux specific.  My recommendation
is spend some time on <a href="http://www.brendangregg.com/linuxperf.html">Brendan Gregg&rsquo;s blog</a>.</p>

<h3>DTrace</h3>

<p>OSX doesn&rsquo;t have the same tooling as Linux, but DTrace was ported to it.  I&rsquo;ve
used it to find sampling profiles of my code before. Again,
<a href="http://www.brendangregg.com/dtrace.html">Brendan Gregg&rsquo;s blog</a> is a good
resource; there are some fantastic DTrace one liners.</p>

<h2>Debuggers</h2>

<h3>lldb</h3>

<p>lldb is analogous to gdb.  I can&rsquo;t say I have enough experience with LLDB and GDB to note the difference between the two, but LLDB did show the relative statements forward and back from the current statement by default.  I&rsquo;m informed by my friends/mortal enemies using emacs that this is less of an issue when using emacs/gdb in combination.</p>

<h2>Fuzzers</h2>

<h3>American Fuzzy Lop</h3>

<p><a href="http://lcamtuf.coredump.cx/afl/">American Fuzzy Lop</a> (AFL) is a neat program
that performs fuzzing on programs
that take inputs from files and repeatedly runs the program, modifies the
input trying to get full code coverage, and tries to find crashes.  It&rsquo;s been
getting lots of attention lately, and while I haven&rsquo;t used it myself yet, it
seems like a very powerful tool. Mozilla employs the use of fuzzers on their
JavaScript engine, for instance (not AFL, but
<a href="http://www.squarefree.com/2007/08/02/introducing-jsfunfuzz/">one developed in house</a>).</p>

<h2>Disassemblers</h2>

<h3>gobjdump</h3>

<p>If you really need to make sure the higher level code you&rsquo;re writing is getting
translated into the assembly your expecting, <code>gobjdump -S</code> will intermix the
emitted binary&rsquo;s disassembled assembly and the source code.  This was used
extensively while developing <a href="http://nickdesaulniers.github.io/blog/2015/05/25/interpreter-compiler-jit/">my Brainfuck JIT</a>.</p>

<h2>Conclusion</h2>

<p>Hopefully you learned of some useful tools that you should know about when
working with C or C++.  What did I miss?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Interpreter, Compiler, JIT]]></title>
    <link href="http://nickdesaulniers.github.io/blog/2015/05/25/interpreter-compiler-jit/"/>
    <updated>2015-05-25T08:35:00-07:00</updated>
    <id>http://nickdesaulniers.github.io/blog/2015/05/25/interpreter-compiler-jit</id>
    <content type="html"><![CDATA[<p>Interpreters and compilers are interesting programs, themselves used to run or
translate other programs, respectively.  Those other programs that might be
interpreted might be languages like JavaScript, Ruby, Python, PHP, and Perl.  The
other programs that might be compiled are C, C++, and to some extent Java and
C#.</p>

<p>Taking the time to do translation to native machine code ahead of
time can result in better performance at runtime, but an interpreter can get to work right away without spending any time translating.  There happens to be a sweet spot
somewhere in between interpretation and compilation that combines the best of
both worlds.  Such a technique
is called Just In Time (JIT) compiling.  While interpreting, compiling, and JIT&#8217;ing code might sound radically different, they&rsquo;re actually strikingly similar.  In
this post, I hope to show how similar by comparing the code for an interpreter,
a compiler, and a JIT compiler for the language Brainfuck in around 100 lines
of C code each.</p>

<p>All of the code in the post is up on <a href="https://github.com/nickdesaulniers/bf_interpreter_jit_compiler">GitHub</a>.</p>

<div class="embed-video-container"><iframe src="http://nickdesaulniers.github.io//www.youtube.com/embed/_C5AHaS1mOA" allowfullscreen></iframe></div>


<p>Brainfuck is an interesting, if hard to read, language.  It only has eight
operations it can perform <code>&gt; &lt; + - . , [ ]</code>, yet is Turing complete.  There&rsquo;s nothing really to
lex; each character is a token, and if the token is not one of the eight
operators, it&rsquo;s ignored.  There&rsquo;s also not much of a grammar to parse; the
forward jumping and backwards jumping operators should be matched for well
formed input, but that&rsquo;s about it.  In this post, we&rsquo;ll skip over validating
input assuming well formed input so we can focus on the interpretation/code
generation.  You can read more about it on the
<a href="http://en.wikipedia.org/wiki/Brainfuck">Wikipedia page</a>,
which we&rsquo;ll be using as a reference throughout.</p>

<p>A Brainfuck program operates on a 30,000 element byte array initialized to all
zeros.  It starts off with an instruction pointer, that initially points to the
first element in the data array or &ldquo;tape.&rdquo;  In C code for an interpreter that
might look like:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="c1">// Initialize the tape with 30,000 zeroes.</span>
</span><span class='line'><span class="kt">unsigned</span> <span class="kt">char</span> <span class="n">tape</span> <span class="p">[</span><span class="mi">30000</span><span class="p">]</span> <span class="o">=</span> <span class="p">{</span> <span class="mi">0</span> <span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Set the pointer to point at the left most cell of the tape.</span>
</span><span class='line'><span class="kt">unsigned</span> <span class="kt">char</span><span class="o">*</span> <span class="n">ptr</span> <span class="o">=</span> <span class="n">tape</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Then, since we&rsquo;re performing an operation for each character in the Brainfuck
source, we can have a for loop over every character with a nested switch
statement containing case statements for each operator.</p>

<p>The first two operators, <code>&gt;</code> and <code>&lt;</code> increment and decrement the data pointer.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="k">case</span> <span class="sc">&#39;&gt;&#39;</span>: <span class="o">++</span><span class="n">ptr</span><span class="p">;</span> <span class="k">break</span><span class="p">;</span>
</span><span class='line'><span class="k">case</span> <span class="sc">&#39;&lt;&#39;</span>: <span class="o">--</span><span class="n">ptr</span><span class="p">;</span> <span class="k">break</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>One thing that could be bad is that because the interpreter is written in C and
we&rsquo;re representing the tape as an array but we&rsquo;re not validating our inputs,
there&rsquo;s potential for stack buffer overrun since we&rsquo;re not performing bounds
checks.  Again, punting and assuming well formed input to keep the code and the
point more precise.</p>

<p>Next up are the <code>+</code> and <code>-</code> operators, used for incrementing and decrementing
the cell pointed to by the data pointer by one.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="k">case</span> <span class="sc">&#39;+&#39;</span>: <span class="o">++</span><span class="p">(</span><span class="o">*</span><span class="n">ptr</span><span class="p">);</span> <span class="k">break</span><span class="p">;</span>
</span><span class='line'><span class="k">case</span> <span class="sc">&#39;-&#39;</span>: <span class="o">--</span><span class="p">(</span><span class="o">*</span><span class="n">ptr</span><span class="p">);</span> <span class="k">break</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>The operators <code>.</code> and <code>,</code> provide Brainfuck&rsquo;s only means of input or output, by
writing the value pointed to by the instruction pointer to stdout as an ASCII
value, or reading one byte from stdin as an ASCII value and writing it to the
cell pointed to by the instruction pointer.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="k">case</span> <span class="sc">&#39;.&#39;</span>: <span class="n">putchar</span><span class="p">(</span><span class="o">*</span><span class="n">ptr</span><span class="p">);</span> <span class="k">break</span><span class="p">;</span>
</span><span class='line'><span class="k">case</span> <span class="sc">&#39;,&#39;</span>: <span class="o">*</span><span class="n">ptr</span> <span class="o">=</span> <span class="n">getchar</span><span class="p">();</span> <span class="k">break</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Finally, our looping constructs, <code>[</code> and <code>]</code>.  From the definition on Wikipedia
for <code>[</code>: <code>if the byte at the data pointer is zero, then instead of moving the
instruction pointer forward to the next command, jump it forward to the command
after the matching ] command</code> and for <code>]</code>: <code>if the byte at the data pointer is
nonzero, then instead of moving the instruction pointer forward to the next
command, jump it back to the command after the matching [ command.</code></p>

<p>I interpret that as:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="k">case</span> <span class="sc">&#39;[&#39;</span>:
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="p">(</span><span class="o">*</span><span class="n">ptr</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">loop</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>    <span class="k">while</span> <span class="p">(</span><span class="n">loop</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="kt">unsigned</span> <span class="kt">char</span> <span class="n">current_char</span> <span class="o">=</span> <span class="n">input</span><span class="p">[</span><span class="o">++</span><span class="n">i</span><span class="p">];</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="n">current_char</span> <span class="o">==</span> <span class="sc">&#39;]&#39;</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="o">--</span><span class="n">loop</span><span class="p">;</span>
</span><span class='line'>      <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="n">current_char</span> <span class="o">==</span> <span class="sc">&#39;[&#39;</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="o">++</span><span class="n">loop</span><span class="p">;</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">break</span><span class="p">;</span>
</span><span class='line'><span class="k">case</span> <span class="sc">&#39;]&#39;</span>:
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="o">*</span><span class="n">ptr</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">loop</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>    <span class="k">while</span> <span class="p">(</span><span class="n">loop</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="kt">unsigned</span> <span class="kt">char</span> <span class="n">current_char</span> <span class="o">=</span> <span class="n">input</span><span class="p">[</span><span class="o">--</span><span class="n">i</span><span class="p">];</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="n">current_char</span> <span class="o">==</span> <span class="sc">&#39;[&#39;</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="o">--</span><span class="n">loop</span><span class="p">;</span>
</span><span class='line'>      <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="n">current_char</span> <span class="o">==</span> <span class="sc">&#39;]&#39;</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="o">++</span><span class="n">loop</span><span class="p">;</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">break</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Where the variable <code>loop</code> keeps track of open brackets for which we&rsquo;ve not seen
a matching close bracket, aka our nested depth.</p>

<p>So <a href="https://github.com/nickdesaulniers/bf_interpreter_jit_compiler/blob/master/interpreter.c">we can see the interpreter is quite basic</a>, in around 50 SLOC were able to
read a byte, and immediately perform an action based on the operator.  How we
perform that operation might not be the fastest though.</p>

<p>How about if we want to compile the Brainfuck source code to native machine
code?  Well, we need to know a little bit about our host machine&rsquo;s Instruction
Set Architecture (ISA) and Application Binary Interface (ABI).  The rest of the
code in this post will not be as portable as the above C code, since it assumes
an x86-64 ISA and UNIX ABI.  Now would be a good time to <a href="http://nickdesaulniers.github.io/blog/2014/04/18/lets-write-some-x86-64/">take a detour and learn more about writing assembly for x86-64</a>.  The interpreter is even portable enough to <a href="https://github.com/nickdesaulniers/bf_interpreter_jit_compiler#emscripten">build with Emscripten and run in a browser</a>!</p>

<p>For our compiler, we&rsquo;ll iterate over every character in the source file again,
switching on the recognized operator.  This time, instead of performing an
action right away, we&rsquo;ll print assembly instructions to stdout.  Doing so
requires running the compiler on an input file, redirecting stdout to a file,
then running the system assembler and linker on that file.  We&rsquo;ll stick with
just compiling and not assembling (though it&rsquo;s not too difficult), and linking
(for now).</p>

<p>First, we need to print a prologue for our compiled code:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="k">const</span> <span class="kt">char</span><span class="o">*</span> <span class="k">const</span> <span class="n">prologue</span> <span class="o">=</span>
</span><span class='line'>  <span class="s">&quot;.text</span><span class="se">\n</span><span class="s">&quot;</span>
</span><span class='line'>  <span class="s">&quot;.globl _main</span><span class="se">\n</span><span class="s">&quot;</span>
</span><span class='line'>  <span class="s">&quot;_main:</span><span class="se">\n</span><span class="s">&quot;</span>
</span><span class='line'>  <span class="s">&quot;  pushq %rbp</span><span class="se">\n</span><span class="s">&quot;</span>
</span><span class='line'>  <span class="s">&quot;  movq %rsp, %rbp</span><span class="se">\n</span><span class="s">&quot;</span>
</span><span class='line'>  <span class="s">&quot;  pushq %r12</span><span class="se">\n</span><span class="s">&quot;</span>        <span class="c1">// store callee saved register</span>
</span><span class='line'>  <span class="s">&quot;  subq $30008, %rsp</span><span class="se">\n</span><span class="s">&quot;</span> <span class="c1">// allocate 30,008 B on stack, and realign</span>
</span><span class='line'>  <span class="s">&quot;  leaq (%rsp), %rdi</span><span class="se">\n</span><span class="s">&quot;</span> <span class="c1">// address of beginning of tape</span>
</span><span class='line'>  <span class="s">&quot;  movl $0, %esi</span><span class="se">\n</span><span class="s">&quot;</span>     <span class="c1">// fill with 0&#39;s</span>
</span><span class='line'>  <span class="s">&quot;  movq $30000, %rdx</span><span class="se">\n</span><span class="s">&quot;</span> <span class="c1">// length 30,000 B</span>
</span><span class='line'>  <span class="s">&quot;  call _memset</span><span class="se">\n</span><span class="s">&quot;</span>      <span class="c1">// memset</span>
</span><span class='line'>  <span class="s">&quot;  movq %rsp, %r12&quot;</span><span class="p">;</span>
</span><span class='line'><span class="n">puts</span><span class="p">(</span><span class="n">prologue</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>During the linking phase, we&rsquo;ll make sure to link in libc so we can call
memset.  What we&rsquo;re doing is backing up callee saved registers we&rsquo;ll be using,
stack allocating the tape, realigning the stack (<a href="http://nickdesaulniers.github.io/blog/2014/04/18/lets-write-some-x86-64/">x86-64 ABI point #1</a>), copying
the address of the only item on the stack into a register for our first
argument, setting the second argument to the constant <code>0</code>, the third arg to
<code>30000</code>, then calling memset.  Finally, we use the callee saved register %r12
as our instruction pointer, which is the address into a value on the stack.</p>

<p>We
can expect the call to memset to result in a segfault if simply subtract just
30000B, and not realign for the 2 registers (64 b each, 8 B each) we pushed on
the stack.  The first pushed register aligns the stack on a 16 B boundary, the
second misaligns it; that&rsquo;s why we allocate an additional 8 B on the stack
(<a href="http://nickdesaulniers.github.io/blog/2014/04/18/lets-write-some-x86-64/">x86-64 ABI point #1</a>).  The stack is mis-aligned upon function entry in x86-64.
30000 is a multiple of 16.</p>

<p><img class="center" src="http://nickdesaulniers.github.io/images/compiler_stack_alignment.png"></p>

<p>Moving the instruction pointer (<code>&gt;</code>, <code>&lt;</code>) and modifying the pointed to value
(<code>+</code>, <code>-</code>) are straight-forward:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="k">case</span> <span class="sc">&#39;&gt;&#39;</span>:
</span><span class='line'>  <span class="n">puts</span><span class="p">(</span><span class="s">&quot;  inc %r12&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="k">break</span><span class="p">;</span>
</span><span class='line'><span class="k">case</span> <span class="sc">&#39;&lt;&#39;</span>:
</span><span class='line'>  <span class="n">puts</span><span class="p">(</span><span class="s">&quot;  dec %r12&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="k">break</span><span class="p">;</span>
</span><span class='line'><span class="k">case</span> <span class="sc">&#39;+&#39;</span>:
</span><span class='line'>  <span class="n">puts</span><span class="p">(</span><span class="s">&quot;  incb (%r12)&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="k">break</span><span class="p">;</span>
</span><span class='line'><span class="k">case</span> <span class="sc">&#39;-&#39;</span>:
</span><span class='line'>  <span class="n">puts</span><span class="p">(</span><span class="s">&quot;  decb (%r12)&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="k">break</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>For output, <code>.</code>, we need to copy the pointed to byte into the register for the
first argument to putchar.  We
explicitly zero out the register before calling putchar, since it takes an int
(32 b), but we&rsquo;re only copying a char (8 b) (Look up C&rsquo;s type promotion rules for more info).  x86-64 has an instruction that does both, movzXX, Where the first X is the source size (b, w) and the second is the destination size (w, l, q).  Thus movzbl moves a <strong>b</strong>yte (8 b) into a doub<strong>l</strong>e word (32 b).  %rdi and %edi are the same register, but %rdi is the full
64 b register, while %edi is the lowest (or least significant) 32 b.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="k">case</span> <span class="sc">&#39;.&#39;</span>:
</span><span class='line'>  <span class="c1">// move byte to double word and zero upper bits since putchar takes an</span>
</span><span class='line'>  <span class="c1">// int.</span>
</span><span class='line'>  <span class="n">puts</span><span class="p">(</span><span class="s">&quot;  movzbl (%r12), %edi&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="n">puts</span><span class="p">(</span><span class="s">&quot;  call _putchar&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="k">break</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Input (<code>,</code>) is easy; call getchar, move the resulting lowest byte into the cell
pointed to by the instruction pointer.  %al is the lowest 8 b of the 64 b %rax register.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="k">case</span> <span class="sc">&#39;,&#39;</span>:
</span><span class='line'>  <span class="n">puts</span><span class="p">(</span><span class="s">&quot;  call _getchar&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="n">puts</span><span class="p">(</span><span class="s">&quot;  movb %al, (%r12)&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="k">break</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>As usual, the looping constructs (<code>[</code> &amp; <code>]</code>) are much more work.  We have to
match up jumps to matching labels, but for an assembly program, labels must be
unique.  One way we can solve for this is whenever we encounter an opening
brace, push a monotonically increasing number that represents the numbers of
opening brackets we&rsquo;ve seen so far onto a stack like data structure.  Then, we
do our comparison and jump to what will be the label that should be produced by
the matching close label.  Next, we insert our starting label, and finally
increment the number of brackets seen.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="k">case</span> <span class="sc">&#39;[&#39;</span>:
</span><span class='line'>  <span class="n">stack_push</span><span class="p">(</span><span class="o">&amp;</span><span class="n">stack</span><span class="p">,</span> <span class="n">num_brackets</span><span class="p">);</span>
</span><span class='line'>  <span class="n">puts</span><span class="p">(</span><span class="s">&quot;  cmpb $0, (%r12)&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="n">printf</span><span class="p">(</span><span class="s">&quot;  je bracket_%d_end</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">num_brackets</span><span class="p">);</span>
</span><span class='line'>  <span class="n">printf</span><span class="p">(</span><span class="s">&quot;bracket_%d_start:</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">num_brackets</span><span class="o">++</span><span class="p">);</span>
</span><span class='line'>  <span class="k">break</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>For close brackets, we pop the number of brackets seen (or rather, number of
pending open brackets which we have yet to see a matching close bracket) off of
the stack, do our comparison, jump to the matching start label, and finally
place our end label.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="k">case</span> <span class="sc">&#39;]&#39;</span>:
</span><span class='line'>  <span class="n">stack_pop</span><span class="p">(</span><span class="o">&amp;</span><span class="n">stack</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">matching_bracket</span><span class="p">);</span>
</span><span class='line'>  <span class="n">puts</span><span class="p">(</span><span class="s">&quot;  cmpb $0, (%r12)&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="n">printf</span><span class="p">(</span><span class="s">&quot;  jne bracket_%d_start</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">matching_bracket</span><span class="p">);</span>
</span><span class='line'>  <span class="n">printf</span><span class="p">(</span><span class="s">&quot;bracket_%d_end:</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">matching_bracket</span><span class="p">);</span>
</span><span class='line'>  <span class="k">break</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>So for sequential loops (<code>[][]</code>) we can expect the relevant assembly to look
like:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='gas'><span class='line'>  <span class="nf">cmpb</span> <span class="no">$0</span><span class="p">,</span> <span class="p">(</span><span class="nv">%r12</span><span class="p">)</span>
</span><span class='line'>  <span class="nf">je</span> <span class="no">bracket_0_end</span>
</span><span class='line'><span class="nl">bracket_0_start:</span>
</span><span class='line'>
</span><span class='line'>  <span class="nf">cmpb</span> <span class="no">$0</span><span class="p">,</span> <span class="p">(</span><span class="nv">%r12</span><span class="p">)</span>
</span><span class='line'>  <span class="nf">jne</span> <span class="no">bracket_0_start</span>
</span><span class='line'><span class="nl">bracket_0_end:</span>
</span><span class='line'>
</span><span class='line'>  <span class="nf">cmpb</span> <span class="no">$0</span><span class="p">,</span> <span class="p">(</span><span class="nv">%r12</span><span class="p">)</span>
</span><span class='line'>  <span class="nf">je</span> <span class="no">bracket_1_end</span>
</span><span class='line'><span class="nl">bracket_1_start:</span>
</span><span class='line'>
</span><span class='line'>  <span class="nf">cmpb</span> <span class="no">$0</span><span class="p">,</span> <span class="p">(</span><span class="nv">%r12</span><span class="p">)</span>
</span><span class='line'>  <span class="nf">jne</span> <span class="no">bracket_1_start</span>
</span><span class='line'><span class="nl">bracket_1_end:</span>
</span></code></pre></td></tr></table></div></figure>


<p>and for nested loops (<code>[[]]</code>), we can expect assembly like the following (note
the difference in the order of numbered start and end labels):</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='gas'><span class='line'>  <span class="nf">cmpb</span> <span class="no">$0</span><span class="p">,</span> <span class="p">(</span><span class="nv">%r12</span><span class="p">)</span>
</span><span class='line'>  <span class="nf">je</span> <span class="no">bracket_0_end</span>
</span><span class='line'><span class="nl">bracket_0_start:</span>
</span><span class='line'>
</span><span class='line'>  <span class="nf">cmpb</span> <span class="no">$0</span><span class="p">,</span> <span class="p">(</span><span class="nv">%r12</span><span class="p">)</span>
</span><span class='line'>  <span class="nf">je</span> <span class="no">bracket_1_end</span>
</span><span class='line'><span class="nl">bracket_1_start:</span>
</span><span class='line'>
</span><span class='line'>  <span class="nf">cmpb</span> <span class="no">$0</span><span class="p">,</span> <span class="p">(</span><span class="nv">%r12</span><span class="p">)</span>
</span><span class='line'>  <span class="nf">jne</span> <span class="no">bracket_1_start</span>
</span><span class='line'><span class="nl">bracket_1_end:</span>
</span><span class='line'>
</span><span class='line'>  <span class="nf">cmpb</span> <span class="no">$0</span><span class="p">,</span> <span class="p">(</span><span class="nv">%r12</span><span class="p">)</span>
</span><span class='line'>  <span class="nf">jne</span> <span class="no">bracket_0_start</span>
</span><span class='line'><span class="nl">bracket_0_end:</span>
</span></code></pre></td></tr></table></div></figure>


<p>Finally, we need an epilogue to clean up the stack and callee saved registers
after ourselves.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="k">const</span> <span class="kt">char</span><span class="o">*</span> <span class="k">const</span> <span class="n">epilogue</span> <span class="o">=</span>
</span><span class='line'>  <span class="s">&quot;  addq $30008, %rsp</span><span class="se">\n</span><span class="s">&quot;</span> <span class="c1">// clean up tape from stack.</span>
</span><span class='line'>  <span class="s">&quot;  popq %r12</span><span class="se">\n</span><span class="s">&quot;</span> <span class="c1">// restore callee saved register</span>
</span><span class='line'>  <span class="s">&quot;  popq %rbp</span><span class="se">\n</span><span class="s">&quot;</span>
</span><span class='line'>  <span class="s">&quot;  ret</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">;</span>
</span><span class='line'><span class="n">puts</span><span class="p">(</span><span class="n">epilogue</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>The compiler is a pain when modifying and running a Brainfuck
program; it takes a couple extra commands to compile the Brainfuck program to
assembly, assemble the assembly into an object file, link it into an
executable, and run it whereas with the interpreter we can just run it.  The
trade off is that the compiled version is quite a bit faster.  How much faster?
Let&rsquo;s save that for later.</p>

<p>Wouldn&rsquo;t it be nice if there was a translation &amp; execution technique that
didn&rsquo;t force us to compile our code every time we changed it and wanted to run
it, but also performance closer to that of compiled code?  That&rsquo;s where a JIT
compiler comes in!</p>

<p>For the basics of JITing code, make sure you read <a href="http://nickdesaulniers.github.io/blog/2013/04/03/basic-jit/">my previous article on the basics of JITing code in C</a>.  We&rsquo;re going to follow the same technique of
creating executable memory, copying bytes into that memory, casting it to a
function pointer, then calling it.  Just like the interpreter and the compiler,
we&rsquo;re going to do a unique action for each recognized token.  What&rsquo;s different is
that for each operator, we&rsquo;re going to push opcodes into a dynamic array, that
way it can grow based on our sequential reading of input and will simplify our calculation of relative offsets for branching operations.</p>

<p>The other special thing we&rsquo;re going to do it that we&rsquo;re going to pass
the address of our libc functions (memset, putchar, and getchar) into our
JIT&#8217;ed function at runtime.  This avoids those kooky stub functions you might
see in a disassembled executable.  That means we&rsquo;ll be invoking our JIT&#8217;ed
function like:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="k">typedef</span> <span class="kt">void</span><span class="o">*</span> <span class="nf">fn_memset</span> <span class="p">(</span><span class="kt">void</span><span class="o">*</span><span class="p">,</span> <span class="kt">int</span><span class="p">,</span> <span class="kt">size_t</span><span class="p">);</span>
</span><span class='line'><span class="k">typedef</span> <span class="kt">int</span> <span class="nf">fn_putchar</span> <span class="p">(</span><span class="kt">int</span><span class="p">);</span>
</span><span class='line'><span class="k">typedef</span> <span class="kt">int</span> <span class="nf">fn_getchar</span> <span class="p">();</span>
</span><span class='line'><span class="kt">void</span> <span class="p">(</span><span class="o">*</span><span class="n">jitted_func</span><span class="p">)</span> <span class="p">(</span><span class="n">fn_memset</span><span class="p">,</span> <span class="n">fn_putchar</span><span class="p">,</span> <span class="n">fn_getchar</span><span class="p">)</span> <span class="o">=</span> <span class="n">mem</span><span class="p">;</span>
</span><span class='line'><span class="n">jitted_func</span><span class="p">(</span><span class="n">memset</span><span class="p">,</span> <span class="n">putchar</span><span class="p">,</span> <span class="n">getchar</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>Where mem is our mmap&#8217;ed executable memory with our opcodes copied into it, and
the typedef&rsquo;s are for the respective function signatures for our function
pointers we&rsquo;ll be passing to our JIT&#8217;ed code.  We&rsquo;re kind of getting ahead of
ourselves, but knowing how we will invoke the dynamically created executable
code will give us an idea of how the code itself will work.</p>

<p>The prologue is quite a bit involved, so we&rsquo;ll take it step at a time.  First,
we have the usual prologue:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="kt">char</span> <span class="n">prologue</span> <span class="p">[]</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>  <span class="mh">0x55</span><span class="p">,</span> <span class="c1">// push rbp</span>
</span><span class='line'>  <span class="mh">0x48</span><span class="p">,</span> <span class="mh">0x89</span><span class="p">,</span> <span class="mh">0xE5</span><span class="p">,</span> <span class="c1">// mov rsp, rbp</span>
</span></code></pre></td></tr></table></div></figure>


<p>Then we want to back up our callee saved registers that we&rsquo;ll be using.  Expect horrific and difficult to debug bugs if you forget to do this.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'>  <span class="mh">0x41</span><span class="p">,</span> <span class="mh">0x54</span><span class="p">,</span> <span class="c1">// pushq %r12</span>
</span><span class='line'>  <span class="mh">0x41</span><span class="p">,</span> <span class="mh">0x55</span><span class="p">,</span> <span class="c1">// pushq %r13</span>
</span><span class='line'>  <span class="mh">0x41</span><span class="p">,</span> <span class="mh">0x56</span><span class="p">,</span> <span class="c1">// pushq %r14</span>
</span></code></pre></td></tr></table></div></figure>


<p>At this point, %rdi will contain the address of memset, %rsi will contain the
address of putchar, and %rdx will contain the address of getchar, see
<a href="http://nickdesaulniers.github.io/blog/2014/04/18/lets-write-some-x86-64/">x86-64 ABI point #2</a>.  We want to store these in callee saved registers before
calling any of them, else they may clobber %rdi, %rsi, or %rdx since they&rsquo;re
not &ldquo;callee saved,&rdquo; rather &ldquo;call clobbered.&rdquo;  See <a href="http://nickdesaulniers.github.io/blog/2014/04/18/lets-write-some-x86-64/">x86-64 ABI point #4</a>.</p>

<p><img class="center" src="http://nickdesaulniers.github.io/images/prologue1.png"></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'>  <span class="mh">0x49</span><span class="p">,</span> <span class="mh">0x89</span><span class="p">,</span> <span class="mh">0xFC</span><span class="p">,</span> <span class="c1">// movq %rdi, %r12</span>
</span><span class='line'>  <span class="mh">0x49</span><span class="p">,</span> <span class="mh">0x89</span><span class="p">,</span> <span class="mh">0xF5</span><span class="p">,</span> <span class="c1">// movq %rsi, %r13</span>
</span><span class='line'>  <span class="mh">0x49</span><span class="p">,</span> <span class="mh">0x89</span><span class="p">,</span> <span class="mh">0xD6</span><span class="p">,</span> <span class="c1">// movq %rdx, %r14</span>
</span></code></pre></td></tr></table></div></figure>


<p>At this point, %r12 will contain the address of memset, %r13 will contain the
address of putchar, and %r14 will contain the address of getchar.</p>

<p><img class="center" src="http://nickdesaulniers.github.io/images/prologue2.png"></p>

<p>Next up is allocating 30008 B on the stack:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'>  <span class="mh">0x48</span><span class="p">,</span> <span class="mh">0x81</span><span class="p">,</span> <span class="mh">0xEC</span><span class="p">,</span> <span class="mh">0x38</span><span class="p">,</span> <span class="mh">0x75</span><span class="p">,</span> <span class="mh">0x00</span><span class="p">,</span> <span class="mh">0x00</span><span class="p">,</span> <span class="c1">// subq $30008, %rsp</span>
</span></code></pre></td></tr></table></div></figure>


<p>This is our first hint at how numbers, whose value is larger than the maximum
representable value in a byte, are represented on x86-64.  Where in this
instruction is the value 30008?  The answer is the 4 byte sequence
<code>0x38, 0x75, 0x00, 0x00</code>.  The x86-64 architecture is &ldquo;Little Endian,&rdquo; which
means that the least significant bit (LSB) is first and the most significant
bit (MSB) is last.  When humans do math, they typically represent numbers the
other way, or “Big Endian.”  Thus we write decimal ten as &ldquo;10&rdquo; and not &ldquo;01.&rdquo;
So that means that <code>0x38, 0x75, 0x00, 0x00</code> in Little Endian is
<code>0x00, 0x00, 0x75, 0x38</code> in Big Endian, which then is
<code>7*16^3+5*16^2+3*16^1+8*16^0</code>
which is <code>30008</code> in decimal, the amount of bytes we want to subtract from the
stack. We&rsquo;re allocating an additional 8 B on the stack for alignment
requirements, similar to the compiler.  By pushing even numbers of 64 b
registers, we need to realign our stack pointer.</p>

<p><img class="center" src="http://nickdesaulniers.github.io/images/prologue3.png"></p>

<p>Next in the prologue, we set up and call memset:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'>  <span class="c1">// address of beginning of tape</span>
</span><span class='line'>  <span class="mh">0x48</span><span class="p">,</span> <span class="mh">0x8D</span><span class="p">,</span> <span class="mh">0x3C</span><span class="p">,</span> <span class="mh">0x24</span><span class="p">,</span> <span class="c1">// leaq (%rsp), %rdi</span>
</span><span class='line'>  <span class="c1">// fill with 0&#39;s</span>
</span><span class='line'>  <span class="mh">0xBE</span><span class="p">,</span> <span class="mh">0x00</span><span class="p">,</span> <span class="mh">0x00</span><span class="p">,</span> <span class="mh">0x00</span><span class="p">,</span> <span class="mh">0x00</span><span class="p">,</span> <span class="c1">// movl $0, %esi</span>
</span><span class='line'>  <span class="c1">// length 30,000 B</span>
</span><span class='line'>  <span class="mh">0x48</span><span class="p">,</span> <span class="mh">0xC7</span><span class="p">,</span> <span class="mh">0xC2</span><span class="p">,</span> <span class="mh">0x30</span><span class="p">,</span> <span class="mh">0x75</span><span class="p">,</span> <span class="mh">0x00</span><span class="p">,</span> <span class="mh">0x00</span><span class="p">,</span> <span class="c1">// movq $30000, %rdx</span>
</span><span class='line'>  <span class="c1">// memset</span>
</span><span class='line'>  <span class="mh">0x41</span><span class="p">,</span> <span class="mh">0xFF</span><span class="p">,</span> <span class="mh">0xD4</span><span class="p">,</span> <span class="c1">// callq *%r12</span>
</span></code></pre></td></tr></table></div></figure>


<p>After invoking memset, %rdi, %rsi, &amp; %rcx will contain garbage values since
they are &ldquo;call clobbered&rdquo; registers.  At this point we no longer need memset,
so we now use %r12 as our instruction pointer.  %rsp will point to the top
(technically the bottom) of the stack, which is the beginning of our memset&#8217;ed
tape.  That&rsquo;s the end of our prologue.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'>  <span class="mh">0x49</span><span class="p">,</span> <span class="mh">0x89</span><span class="p">,</span> <span class="mh">0xE4</span> <span class="c1">// movq %rsp, %r12</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p><img class="center" src="http://nickdesaulniers.github.io/images/prologue4.png"></p>

<p>We can then push our prologue into our dynamic array implementation:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">vector_push</span><span class="p">(</span><span class="o">&amp;</span><span class="n">instruction_stream</span><span class="p">,</span> <span class="n">prologue</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">prologue</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now we iterate over our Brainfuck program and switch on the operations again.
For pointer increment and decrement, we just nudge %r12.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="k">case</span> <span class="sc">&#39;&gt;&#39;</span>:
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>    <span class="kt">char</span> <span class="n">opcodes</span> <span class="p">[]</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>      <span class="mh">0x49</span><span class="p">,</span> <span class="mh">0xFF</span><span class="p">,</span> <span class="mh">0xC4</span> <span class="c1">// inc %r12</span>
</span><span class='line'>    <span class="p">};</span>
</span><span class='line'>    <span class="n">vector_push</span><span class="p">(</span><span class="o">&amp;</span><span class="n">instruction_stream</span><span class="p">,</span> <span class="n">opcodes</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">opcodes</span><span class="p">));</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">break</span><span class="p">;</span>
</span><span class='line'><span class="k">case</span> <span class="sc">&#39;&lt;&#39;</span>:
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>    <span class="kt">char</span> <span class="n">opcodes</span> <span class="p">[]</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>      <span class="mh">0x49</span><span class="p">,</span> <span class="mh">0xFF</span><span class="p">,</span> <span class="mh">0xCC</span> <span class="c1">// dec %r12</span>
</span><span class='line'>    <span class="p">};</span>
</span><span class='line'>    <span class="n">vector_push</span><span class="p">(</span><span class="o">&amp;</span><span class="n">instruction_stream</span><span class="p">,</span> <span class="n">opcodes</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">opcodes</span><span class="p">));</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">break</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>That extra fun block in the switch statement is because in C/C++, we <a href="http://stackoverflow.com/a/8550253/1027966">can&rsquo;t
define variables in the branches of switch statements</a>.</p>

<p>Pointer deref then increment/decrement are equally uninspiring:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="k">case</span> <span class="sc">&#39;+&#39;</span>:
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>    <span class="kt">char</span> <span class="n">opcodes</span> <span class="p">[]</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>      <span class="mh">0x41</span><span class="p">,</span> <span class="mh">0xFE</span><span class="p">,</span> <span class="mh">0x04</span><span class="p">,</span> <span class="mh">0x24</span> <span class="c1">// incb (%r12)</span>
</span><span class='line'>    <span class="p">};</span>
</span><span class='line'>    <span class="n">vector_push</span><span class="p">(</span><span class="o">&amp;</span><span class="n">instruction_stream</span><span class="p">,</span> <span class="n">opcodes</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">opcodes</span><span class="p">));</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">break</span><span class="p">;</span>
</span><span class='line'><span class="k">case</span> <span class="sc">&#39;-&#39;</span>:
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>    <span class="kt">char</span> <span class="n">opcodes</span> <span class="p">[]</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>      <span class="mh">0x41</span><span class="p">,</span> <span class="mh">0xFE</span><span class="p">,</span> <span class="mh">0x0C</span><span class="p">,</span> <span class="mh">0x24</span> <span class="c1">// decv (%r12)</span>
</span><span class='line'>    <span class="p">};</span>
</span><span class='line'>    <span class="n">vector_push</span><span class="p">(</span><span class="o">&amp;</span><span class="n">instruction_stream</span><span class="p">,</span> <span class="n">opcodes</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">opcodes</span><span class="p">));</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">break</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>I/O might be interesting, but in x86-64 we have an opcode for calling the
function at the end of a pointer.  %r13 contains the address of putchar while
%r14 contains the address of getchar.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="k">case</span> <span class="sc">&#39;.&#39;</span>:
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>    <span class="kt">char</span> <span class="n">opcodes</span> <span class="p">[]</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>      <span class="mh">0x41</span><span class="p">,</span> <span class="mh">0x0F</span><span class="p">,</span> <span class="mh">0xB6</span><span class="p">,</span> <span class="mh">0x3C</span><span class="p">,</span> <span class="mh">0x24</span><span class="p">,</span> <span class="c1">// movzbl (%r12), %edi</span>
</span><span class='line'>      <span class="mh">0x41</span><span class="p">,</span> <span class="mh">0xFF</span><span class="p">,</span> <span class="mh">0xD5</span> <span class="c1">// callq *%r13</span>
</span><span class='line'>    <span class="p">};</span>
</span><span class='line'>    <span class="n">vector_push</span><span class="p">(</span><span class="o">&amp;</span><span class="n">instruction_stream</span><span class="p">,</span> <span class="n">opcodes</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">opcodes</span><span class="p">));</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">break</span><span class="p">;</span>
</span><span class='line'><span class="k">case</span> <span class="sc">&#39;,&#39;</span>:
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>    <span class="kt">char</span> <span class="n">opcodes</span> <span class="p">[]</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>      <span class="mh">0x41</span><span class="p">,</span> <span class="mh">0xFF</span><span class="p">,</span> <span class="mh">0xD6</span><span class="p">,</span> <span class="c1">// callq *%r14</span>
</span><span class='line'>      <span class="mh">0x41</span><span class="p">,</span> <span class="mh">0x88</span><span class="p">,</span> <span class="mh">0x04</span><span class="p">,</span> <span class="mh">0x24</span> <span class="c1">// movb %al, (%r12)</span>
</span><span class='line'>    <span class="p">};</span>
</span><span class='line'>    <span class="n">vector_push</span><span class="p">(</span><span class="o">&amp;</span><span class="n">instruction_stream</span><span class="p">,</span> <span class="n">opcodes</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">opcodes</span><span class="p">));</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">break</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now with our looping constructs, we get to the fun part.  With the compiler, we
deferred the concept of &ldquo;relocation&rdquo; to the assembler.  We simply emitted
labels, that the assembler turned into relative offsets (jumps by values
relative to the last byte in the jump instruction).  We&rsquo;ve found ourselves in a
Catch-22 though: how many bytes forward do we jump to the matching close
bracket that we haven&rsquo;t seen yet?</p>

<p>Normally, an assembler might have a data structure known as a
&ldquo;relocation table.&rdquo;  It keeps track of the first byte after a label and jumps,
rewriting jumps-to-labels (which aren&rsquo;t kept around in the resulting binary
executable) to relative jumps.  Spidermonkey, Firefox&rsquo;s JavaScript Virtual
Machine has two classes for this, <a href="http://mxr.mozilla.org/mozilla-central/source/js/src/jit/MacroAssembler.cpp">MacroAssembler</a> and <a href="http://mxr.mozilla.org/mozilla-central/source/js/src/jit/Label.h">Label</a>.  Spidermonkey
embeds a linked list in the opcodes it generates for jumps with which it&rsquo;s yet
to see a label for.  Once it finds the label, it walks the linked list (which
itself is embedded in the emitted instruction stream) patching up these
locations as it goes.</p>

<p>For Brainfuck, we don&rsquo;t have to anything quite as fancy since each label only
ends up having one jump site.  Instead, we can use a stack of integers that are
offsets into our dynamic array, and do the relocation once we know where
exactly we&rsquo;re jumping to.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="k">case</span> <span class="sc">&#39;[&#39;</span>:
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>    <span class="kt">char</span> <span class="n">opcodes</span> <span class="p">[]</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>      <span class="mh">0x41</span><span class="p">,</span> <span class="mh">0x80</span><span class="p">,</span> <span class="mh">0x3C</span><span class="p">,</span> <span class="mh">0x24</span><span class="p">,</span> <span class="mh">0x00</span><span class="p">,</span> <span class="c1">// cmpb $0, (%r12)</span>
</span><span class='line'>      <span class="c1">// Needs to be patched up</span>
</span><span class='line'>      <span class="mh">0x0F</span><span class="p">,</span> <span class="mh">0x84</span><span class="p">,</span> <span class="mh">0x00</span><span class="p">,</span> <span class="mh">0x00</span><span class="p">,</span> <span class="mh">0x00</span><span class="p">,</span> <span class="mh">0x00</span> <span class="c1">// je &lt;32b relative offset, 2&#39;s compliment, LE&gt;</span>
</span><span class='line'>    <span class="p">};</span>
</span><span class='line'>    <span class="n">vector_push</span><span class="p">(</span><span class="o">&amp;</span><span class="n">instruction_stream</span><span class="p">,</span> <span class="n">opcodes</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">opcodes</span><span class="p">));</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="n">stack_push</span><span class="p">(</span><span class="o">&amp;</span><span class="n">relocation_table</span><span class="p">,</span> <span class="n">instruction_stream</span><span class="p">.</span><span class="n">size</span><span class="p">);</span> <span class="c1">// create a label after</span>
</span><span class='line'>  <span class="k">break</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>First we push the compare and jump opcodes, but for now we leave the relative
offset blank (four zero bytes).  We will come back and patch it up later.
Then, we push the current length of dynamic array, which just so happens to be
the offset into the instruction stream of the next instruction.</p>

<p>All of the relocation magic happens in the case for the closing bracket.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="k">case</span> <span class="sc">&#39;]&#39;</span>:
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>    <span class="kt">char</span> <span class="n">opcodes</span> <span class="p">[]</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>      <span class="mh">0x41</span><span class="p">,</span> <span class="mh">0x80</span><span class="p">,</span> <span class="mh">0x3C</span><span class="p">,</span> <span class="mh">0x24</span><span class="p">,</span> <span class="mh">0x00</span><span class="p">,</span> <span class="c1">// cmpb $0, (%r12)</span>
</span><span class='line'>      <span class="c1">// Needs to be patched up</span>
</span><span class='line'>      <span class="mh">0x0F</span><span class="p">,</span> <span class="mh">0x85</span><span class="p">,</span> <span class="mh">0x00</span><span class="p">,</span> <span class="mh">0x00</span><span class="p">,</span> <span class="mh">0x00</span><span class="p">,</span> <span class="mh">0x00</span> <span class="c1">// jne &lt;33b relative offset, 2&#39;s compliment, LE&gt;</span>
</span><span class='line'>    <span class="p">};</span>
</span><span class='line'>    <span class="n">vector_push</span><span class="p">(</span><span class="o">&amp;</span><span class="n">instruction_stream</span><span class="p">,</span> <span class="n">opcodes</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">opcodes</span><span class="p">));</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="c1">// ...</span>
</span></code></pre></td></tr></table></div></figure>


<p>First, we push our comparison and jump instructions into the dynamic array.
We should know the relative offset we need to jump back to at this point, and
thus don&rsquo;t need to push four empty bytes, but it makes the following math a
little simpler, as were not done yet with this case.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'>  <span class="c1">// ...</span>
</span><span class='line'>  <span class="n">stack_pop</span><span class="p">(</span><span class="o">&amp;</span><span class="n">relocation_table</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">relocation_site</span><span class="p">);</span>
</span><span class='line'>  <span class="n">relative_offset</span> <span class="o">=</span> <span class="n">instruction_stream</span><span class="p">.</span><span class="n">size</span> <span class="o">-</span> <span class="n">relocation_site</span><span class="p">;</span>
</span><span class='line'>  <span class="c1">// ...</span>
</span></code></pre></td></tr></table></div></figure>


<p><img class="center" src="http://nickdesaulniers.github.io/images/relative_jump_unknown.png"></p>

<p>We pop the matching offset into the dynamic array (from the matching open
bracket), and calculate the difference from the current size of the instruction
stream to the matching offset to get our relative offset.  What&rsquo;s interesting
is that this offset is equal in magnitude for the forward and backwards jumps
that we now need to patch up.  We simply go back in our instruction stream 4 B,
and write that relative offset negated as a 32 b LE number (patching our
backwards jump), then go back to the site of our forward jump minus 4 B and
write that relative offset as a 32 b LE number (patching our forwards jump).</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'>  <span class="c1">// ...</span>
</span><span class='line'>  <span class="n">vector_write32LE</span><span class="p">(</span><span class="o">&amp;</span><span class="n">instruction_stream</span><span class="p">,</span> <span class="n">instruction_stream</span><span class="p">.</span><span class="n">size</span> <span class="o">-</span> <span class="mi">4</span><span class="p">,</span> <span class="o">-</span><span class="n">relative_offset</span><span class="p">);</span>
</span><span class='line'>  <span class="n">vector_write32LE</span><span class="p">(</span><span class="o">&amp;</span><span class="n">instruction_stream</span><span class="p">,</span> <span class="n">relocation_site</span> <span class="o">-</span> <span class="mi">4</span><span class="p">,</span> <span class="n">relative_offset</span><span class="p">);</span>
</span><span class='line'>  <span class="k">break</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Thus, when writing a JIT, one must worry about manual relocation.  From the
<a href="http://www.intel.com/content/dam/www/public/us/en/documents/manuals/64-ia-32-architectures-software-developer-instruction-set-reference-manual-325383.pdf">Intel 64 and IA-32 Architectures Software Developer’s Manual Volume 2 (2A, 2B &amp; 2C): Instruction Set Reference, A-Z</a> &ldquo;A relative offset
(rel8, rel16, or rel32) is generally specified as a label in assembly code, but
at the machine code level, it is encoded as a signed, 8-bit or 32-bit immediate
value, which is added to the instruction pointer.&rdquo;</p>

<p>The last thing we push onto our instruction stream is clean up code in the
epilogue.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="kt">char</span> <span class="n">epilogue</span> <span class="p">[]</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>  <span class="mh">0x48</span><span class="p">,</span> <span class="mh">0x81</span><span class="p">,</span> <span class="mh">0xC4</span><span class="p">,</span> <span class="mh">0x38</span><span class="p">,</span> <span class="mh">0x75</span><span class="p">,</span> <span class="mh">0x00</span><span class="p">,</span> <span class="mh">0x00</span><span class="p">,</span> <span class="c1">// addq $30008, %rsp</span>
</span><span class='line'>  <span class="c1">// restore callee saved registers</span>
</span><span class='line'>  <span class="mh">0x41</span><span class="p">,</span> <span class="mh">0x5E</span><span class="p">,</span> <span class="c1">// popq %r14</span>
</span><span class='line'>  <span class="mh">0x41</span><span class="p">,</span> <span class="mh">0x5D</span><span class="p">,</span> <span class="c1">// popq %r13</span>
</span><span class='line'>  <span class="mh">0x41</span><span class="p">,</span> <span class="mh">0x5C</span><span class="p">,</span> <span class="c1">// popq %r12</span>
</span><span class='line'>  <span class="mh">0x5d</span><span class="p">,</span> <span class="c1">// pop rbp</span>
</span><span class='line'>  <span class="mh">0xC3</span> <span class="c1">// ret</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'><span class="n">vector_push</span><span class="p">(</span><span class="o">&amp;</span><span class="n">instruction_stream</span><span class="p">,</span> <span class="n">epilogue</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">epilogue</span><span class="p">));</span>
</span></code></pre></td></tr></table></div></figure>


<p>A dynamic array of bytes isn&rsquo;t really useful, so we need to create executable
memory the size of the current instruction stream and copy all of the machine
opcodes into it, cast it to a function pointer, call it, and finally clean up:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="kt">void</span><span class="o">*</span> <span class="n">mem</span> <span class="o">=</span> <span class="n">mmap</span><span class="p">(</span><span class="nb">NULL</span><span class="p">,</span> <span class="n">instruction_stream</span><span class="p">.</span><span class="n">size</span><span class="p">,</span> <span class="n">PROT_WRITE</span> <span class="o">|</span> <span class="n">PROT_EXEC</span><span class="p">,</span>
</span><span class='line'>  <span class="n">MAP_ANON</span> <span class="o">|</span> <span class="n">MAP_PRIVATE</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
</span><span class='line'><span class="n">memcpy</span><span class="p">(</span><span class="n">mem</span><span class="p">,</span> <span class="n">instruction_stream</span><span class="p">.</span><span class="n">data</span><span class="p">,</span> <span class="n">instruction_stream</span><span class="p">.</span><span class="n">size</span><span class="p">);</span>
</span><span class='line'><span class="kt">void</span> <span class="p">(</span><span class="o">*</span><span class="n">jitted_func</span><span class="p">)</span> <span class="p">(</span><span class="n">fn_memset</span><span class="p">,</span> <span class="n">fn_putchar</span><span class="p">,</span> <span class="n">fn_getchar</span><span class="p">)</span> <span class="o">=</span> <span class="n">mem</span><span class="p">;</span>
</span><span class='line'><span class="n">jitted_func</span><span class="p">(</span><span class="n">memcpy</span><span class="p">,</span> <span class="n">putchar</span><span class="p">,</span> <span class="n">getchar</span><span class="p">);</span>
</span><span class='line'><span class="n">munmap</span><span class="p">(</span><span class="n">mem</span><span class="p">,</span> <span class="n">instruction_stream</span><span class="p">.</span><span class="n">size</span><span class="p">);</span>
</span><span class='line'><span class="n">vector_destroy</span><span class="p">(</span><span class="o">&amp;</span><span class="n">instruction_stream</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>Note: we could have used the instruction stream rewinding technique to move the address of memset, putchar, and getchar as 64 b immediate values into %r12-%r14, which would have <a href="https://github.com/nickdesaulniers/bf_interpreter_jit_compiler/pull/6/files">simplified our JIT&rsquo;d function&rsquo;s type signature</a>.</p>

<p>Compile that, and we now have <a href="https://github.com/nickdesaulniers/bf_interpreter_jit_compiler/blob/master/jit.c">a function that will JIT compile and execute Brainfuck in roughly 141 SLOC</a>.  And, we can make changes to our Brainfuck program and not have to recompile it like we did with the Brainfuck compiler.</p>

<p>Hopefully it&rsquo;s becoming apparent how similar an interpreter, compiler, and JIT
behave.  In the interpreter, we immediately execute some operation.  In the
compiler, we emit the equivalent text based assembly instructions corresponding
to what the higher level language might get translated to in the interpreter.
In the JIT, we emit the binary opcodes into executable memory and manually
perform relocation, where the binary opcodes are equivalent to the text based
assembly we might emit in the compiler.  A production ready JIT would probably have macros for each operation in the JIT would perform, so the code would look more like the compiler rather than raw arrays of bytes (though the preprocessor would translate those macros into such).  The entire process is basically disassembling C code with <code>gobjdump -S -M suffix a.out</code>, and punching in hex like one would a Gameshark.</p>

<p>Compare pointer incrementing from the three:</p>

<p>Interpreter:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="k">case</span> <span class="sc">&#39;&gt;&#39;</span>: <span class="o">++</span><span class="n">ptr</span><span class="p">;</span> <span class="k">break</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Compiler:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="k">case</span> <span class="sc">&#39;&gt;&#39;</span>:
</span><span class='line'>  <span class="n">puts</span><span class="p">(</span><span class="s">&quot;  inc %r12&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="k">break</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>JIT:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="k">case</span> <span class="sc">&#39;&gt;&#39;</span>:
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>    <span class="kt">char</span> <span class="n">opcodes</span> <span class="p">[]</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>      <span class="mh">0x49</span><span class="p">,</span> <span class="mh">0xFF</span><span class="p">,</span> <span class="mh">0xC4</span> <span class="c1">// inc %r12</span>
</span><span class='line'>    <span class="p">};</span>
</span><span class='line'>    <span class="n">vector_push</span><span class="p">(</span><span class="o">&amp;</span><span class="n">instruction_stream</span><span class="p">,</span> <span class="n">opcodes</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">opcodes</span><span class="p">));</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">break</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Or compare the full sources of the <a href="https://github.com/nickdesaulniers/bf_interpreter_jit_compiler/blob/master/interpreter.c">the interpreter</a>, <a href="https://github.com/nickdesaulniers/bf_interpreter_jit_compiler/blob/master/compiler.c">the compiler</a>, and <a href="https://github.com/nickdesaulniers/bf_interpreter_jit_compiler/blob/master/jit.c">the JIT</a>. Each at ~100 lines of code should be fairly easy to digest.</p>

<p>Let&rsquo;s now examine the performance of these three.  One of the longer running
Brainfuck programs I can find is <a href="https://github.com/nickdesaulniers/bf_interpreter_jit_compiler/blob/master/samples/mandelbrot.b">one that prints the Mandelbrot set as ASCII art to stdout</a>.</p>

<p><video width='' height='' preload='none' controls poster=''><source src='http://nickdesaulniers.github.io/video/jit.mp4 ' ></video></p>

<p>Running the UNIX command <code>time</code> on the interpreter, compiled
result, and the JIT, we should expect numbers similar to:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="err">$</span> <span class="n">time</span> <span class="p">.</span><span class="o">/</span><span class="n">interpreter</span> <span class="p">..</span><span class="o">/</span><span class="n">samples</span><span class="o">/</span><span class="n">mandelbrot</span><span class="p">.</span><span class="n">b</span>
</span><span class='line'><span class="mf">43.54</span><span class="n">s</span> <span class="n">user</span> <span class="mf">0.03</span><span class="n">s</span> <span class="n">system</span> <span class="mi">99</span><span class="o">%</span> <span class="n">cpu</span> <span class="mf">43.581</span> <span class="n">total</span>
</span><span class='line'>
</span><span class='line'><span class="err">$</span> <span class="p">.</span><span class="o">/</span><span class="n">compiler</span> <span class="p">..</span><span class="o">/</span><span class="n">samples</span><span class="o">/</span><span class="n">mandelbrot</span><span class="p">.</span><span class="n">b</span> <span class="o">&gt;</span> <span class="n">temp</span><span class="p">.</span><span class="n">s</span><span class="p">;</span> <span class="p">..</span><span class="o">/</span><span class="n">assemble</span><span class="p">.</span><span class="n">sh</span> <span class="n">temp</span><span class="p">.</span><span class="n">s</span><span class="p">;</span> <span class="n">time</span> <span class="p">.</span><span class="o">/</span><span class="n">a</span><span class="p">.</span><span class="n">out</span>
</span><span class='line'><span class="mf">3.24</span><span class="n">s</span> <span class="n">user</span> <span class="mf">0.01</span><span class="n">s</span> <span class="n">system</span> <span class="mi">99</span><span class="o">%</span> <span class="n">cpu</span> <span class="mf">3.254</span> <span class="n">total</span>
</span><span class='line'>
</span><span class='line'><span class="err">$</span> <span class="n">time</span> <span class="p">.</span><span class="o">/</span><span class="n">jit</span> <span class="p">..</span><span class="o">/</span><span class="n">samples</span><span class="o">/</span><span class="n">mandelbrot</span><span class="p">.</span><span class="n">b</span>
</span><span class='line'><span class="mf">3.27</span><span class="n">s</span> <span class="n">user</span> <span class="mf">0.01</span><span class="n">s</span> <span class="n">system</span> <span class="mi">99</span><span class="o">%</span> <span class="n">cpu</span> <span class="mf">3.282</span> <span class="n">total</span>
</span></code></pre></td></tr></table></div></figure>


<p>The interpreter is an order of magnitude slower than the compiled result or run
of the JIT.  Then again, the interpreter isn&rsquo;t able to jump back and forth as
efficiently as the compiler or JIT, since it scans back and forth for matching
brackets O(N), while the other two can jump to where they need to go in a few instructions O(1).  A production interpreter would probably translate the higher level language to a byte code, and thus be able to calculate the offsets used for jumps directly, rather than scanning back and forth.</p>

<p>The interpreter bounces back and forth between looking up an operation, then
doing something based on the operation, then lookup, etc..  The compiler and JIT preform the translation first, then the execution, not interleaving the two.</p>

<p>The compiled result is the fastest, as expected, since it doesn&rsquo;t have the
overhead the JIT does of having to read the input file or build up the
instructions to execute at runtime.  The compiler has read
and translated the input file ahead of time.</p>

<p>What if we take into account the
time it takes to compile the source code, and run it?</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="err">$</span> <span class="n">time</span> <span class="p">(.</span><span class="o">/</span><span class="n">compiler</span> <span class="p">..</span><span class="o">/</span><span class="n">samples</span><span class="o">/</span><span class="n">mandelbrot</span><span class="p">.</span><span class="n">b</span> <span class="o">&gt;</span> <span class="n">temp</span><span class="p">.</span><span class="n">s</span><span class="p">;</span> <span class="p">..</span><span class="o">/</span><span class="n">assemble</span><span class="p">.</span><span class="n">sh</span> <span class="n">temp</span><span class="p">.</span><span class="n">s</span><span class="p">;</span> <span class="p">.</span><span class="o">/</span><span class="n">a</span><span class="p">.</span><span class="n">out</span><span class="p">)</span>
</span><span class='line'><span class="mf">3.27</span><span class="n">s</span> <span class="n">user</span> <span class="mf">0.08</span><span class="n">s</span> <span class="n">system</span> <span class="mi">99</span><span class="o">%</span> <span class="n">cpu</span> <span class="mf">3.353</span> <span class="n">total</span>
</span></code></pre></td></tr></table></div></figure>


<p>Including the time it takes to compile the code then run it, the compiled
results are now slightly slower than the JIT (though I bet the multiple processes we start up are suspect), but with the JIT we pay the price
to compile each and every time we run our code.  With the compiler, we pay that
tax once.  When compilation time is cheap, as is the case with our Brainfuck
compiler &amp; JIT, it makes sense to prefer the JIT; it allows us to quickly make
changes to our code and re-run it.  When compilation is expensive, we might
only want to pay the compilation tax once, especially if we plan on running the
program repeatedly.</p>

<p>JIT&rsquo;s are neat but compared to compilers can be more complex to
implement.  They also repeatedly re-parse input files and re-build instruction
streams at runtime. Where they can shine is bridging the gap for dynamically
typed languages where the runtime itself is much more dynamic, and thus harder
(if not, impossible) to optimize ahead of time.  Being able to jump into JIT&rsquo;d
native code from an
interpreter and back gives you the best of both (interpreted and compiled)
worlds.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hidden in Plain Sight - Public Key Crypto]]></title>
    <link href="http://nickdesaulniers.github.io/blog/2015/02/22/public-key-crypto-code-example/"/>
    <updated>2015-02-22T11:48:00-08:00</updated>
    <id>http://nickdesaulniers.github.io/blog/2015/02/22/public-key-crypto-code-example</id>
    <content type="html"><![CDATA[<p>How is it possible for us to communicate securely when there&rsquo;s the possibility
of a third party eavesdropping on us?  How can we communicate private secrets
through public channels?  How do such techniques enable us to bank online and
carry out other sensitive transactions on the Internet while trusting numerous
relays?  In this post, I hope
to explain public key cryptography, with actual code examples, so that the
concepts are a little more concrete.</p>

<p>First, please check out this excellent video on public key crypto:</p>

<div class="embed-video-container"><iframe src="http://nickdesaulniers.github.io//www.youtube.com/embed/YEBfamv-_do" allowfullscreen></iframe></div>


<p>Hopefully that explains the gist of the technique, but what might it actually
look like in code?  Let&rsquo;s take a look at example code in JavaScript using the
Node.js crypto module.  We&rsquo;ll later compare the upcoming WebCrypto API and
look at a TLS handshake.</p>

<p>Meet Alice.  Meet Bob. Meet Eve.  Alice would like to send Bob a secret
message.  Alice would not like Eve to view the message.  Assume Eve can
intercept, but not tamper with, everything Alice and Bob try to share with each
other.</p>

<p>Alice chooses a modular exponential key group, such as modp4, then creates a
public and private key.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">group</span> <span class="o">=</span> <span class="s2">&quot;modp4&quot;</span><span class="p">;</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">aliceDH</span> <span class="o">=</span> <span class="nx">crypto</span><span class="p">.</span><span class="nx">getDiffieHellman</span><span class="p">(</span><span class="nx">group</span><span class="p">);</span>
</span><span class='line'><span class="nx">aliceDH</span><span class="p">.</span><span class="nx">generateKeys</span><span class="p">();</span>
</span></code></pre></td></tr></table></div></figure>


<p>A modular exponential key group is simply a &ldquo;sufficiently large&rdquo; prime number,
paired with a generator (specific number), such as those defined in
<a href="http://tools.ietf.org/html/rfc2412">RFC2412</a> and
<a href="http://tools.ietf.org/html/rfc3526">RFC3526</a>.</p>

<p>The public key is meant to be shared; it is ok for Eve to know the public key.
The private key must not ever be shared, even with the person communicating to.</p>

<p>Alice then shares her public key and group with Bob.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">Public</span> <span class="nx">Key</span><span class="o">:</span>
</span><span class='line'> <span class="o">&lt;</span><span class="nx">Buffer</span> <span class="mi">96</span> <span class="mi">33</span> <span class="nx">c5</span> <span class="mi">9</span><span class="nx">e</span> <span class="nx">b9</span> <span class="mi">07</span> <span class="mi">3</span><span class="nx">e</span> <span class="nx">f2</span> <span class="nx">ec</span> <span class="mi">56</span> <span class="mi">6</span><span class="nx">d</span> <span class="nx">f4</span> <span class="mi">1</span><span class="nx">a</span> <span class="nx">b4</span> <span class="nx">f8</span> <span class="mi">4</span><span class="nx">c</span> <span class="mi">77</span> <span class="nx">e6</span> <span class="mi">5</span><span class="nx">f</span> <span class="nx">a0</span> <span class="mi">93</span> <span class="nx">cf</span> <span class="mi">32</span> <span class="nx">d3</span> <span class="mi">22</span> <span class="mi">42</span> <span class="nx">c8</span> <span class="nx">b4</span> <span class="mi">7</span><span class="nx">b</span> <span class="mi">2</span><span class="nx">b</span> <span class="mi">1</span><span class="nx">f</span> <span class="nx">a9</span> <span class="mi">55</span> <span class="mi">86</span> <span class="mi">05</span> <span class="nx">a4</span> <span class="mi">60</span> <span class="mi">17</span> <span class="nx">ae</span> <span class="nx">f9</span> <span class="nx">ee</span> <span class="nx">bf</span> <span class="nx">b3</span> <span class="nx">c9</span> <span class="mi">05</span> <span class="nx">a9</span> <span class="mi">31</span> <span class="mi">31</span> <span class="mi">94</span> <span class="mi">0</span><span class="nx">f</span> <span class="p">...</span> <span class="o">&gt;</span>
</span><span class='line'><span class="nx">Group</span><span class="o">:</span>
</span><span class='line'> <span class="nx">modp14</span>
</span></code></pre></td></tr></table></div></figure>


<p>Bob now creates a public and private key pair with the same group as Alice.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">bobDH</span> <span class="o">=</span> <span class="nx">crypto</span><span class="p">.</span><span class="nx">getDiffieHellman</span><span class="p">(</span><span class="nx">group</span><span class="p">);</span>
</span><span class='line'><span class="nx">bobDH</span><span class="p">.</span><span class="nx">generateKeys</span><span class="p">();</span>
</span></code></pre></td></tr></table></div></figure>


<p>Bob shares his public key with Alice.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">Public</span> <span class="nx">key</span><span class="o">:</span>
</span><span class='line'> <span class="o">&lt;</span><span class="nx">Buffer</span> <span class="nx">ee</span> <span class="nx">d7</span> <span class="nx">e2</span> <span class="mi">00</span> <span class="nx">e5</span> <span class="mi">82</span> <span class="mi">11</span> <span class="nx">eb</span> <span class="mi">67</span> <span class="nx">ab</span> <span class="mi">50</span> <span class="mi">20</span> <span class="mi">30</span> <span class="mi">81</span> <span class="nx">b1</span> <span class="mi">74</span> <span class="mi">7</span><span class="nx">a</span> <span class="mi">51</span> <span class="mi">0</span><span class="nx">d</span> <span class="mi">7</span><span class="nx">e</span> <span class="mi">2</span><span class="nx">a</span> <span class="nx">de</span> <span class="nx">b7</span> <span class="nx">df</span> <span class="nx">db</span> <span class="nx">cf</span> <span class="nx">ac</span> <span class="mi">57</span> <span class="nx">de</span> <span class="nx">a4</span> <span class="nx">f0</span> <span class="nx">bd</span> <span class="nx">bc</span> <span class="nx">b5</span> <span class="mi">7</span><span class="nx">e</span> <span class="nx">ea</span> <span class="nx">df</span> <span class="nx">b0</span> <span class="mi">3</span><span class="nx">b</span> <span class="nx">c3</span> <span class="mi">3</span><span class="nx">a</span> <span class="nx">e2</span> <span class="nx">fa</span> <span class="mi">0</span><span class="nx">e</span> <span class="nx">ed</span> <span class="mi">22</span> <span class="mi">90</span> <span class="mi">31</span> <span class="mi">01</span> <span class="mi">67</span> <span class="p">...</span> <span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Alice and Bob now compute a shared secret.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">aliceSecret</span> <span class="o">=</span> <span class="nx">aliceDH</span><span class="p">.</span><span class="nx">computeSecret</span><span class="p">(</span><span class="nx">bobDH</span><span class="p">.</span><span class="nx">getPublicKey</span><span class="p">(),</span> <span class="kc">null</span><span class="p">,</span> <span class="s2">&quot;hex&quot;</span><span class="p">);</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">bobSecret</span> <span class="o">=</span> <span class="nx">bobDH</span><span class="p">.</span><span class="nx">computeSecret</span><span class="p">(</span><span class="nx">aliceDH</span><span class="p">.</span><span class="nx">getPublicKey</span><span class="p">(),</span> <span class="kc">null</span><span class="p">,</span> <span class="s2">&quot;hex&quot;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>Alice and Bob have now derived a shared secret from each others&#8217; public keys.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">aliceSecret</span> <span class="o">===</span> <span class="nx">bobSecret</span><span class="p">;</span> <span class="c1">// =&gt; true</span>
</span></code></pre></td></tr></table></div></figure>


<p>Meanwhile, Eve has intercepted Alice and Bob&rsquo;s public keys and group.  Eve
tries to compute the same secret.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">eveDH</span> <span class="o">=</span> <span class="nx">crypto</span><span class="p">.</span><span class="nx">getDiffieHellman</span><span class="p">(</span><span class="nx">group</span><span class="p">);</span>
</span><span class='line'><span class="nx">eveDH</span><span class="p">.</span><span class="nx">generateKeys</span><span class="p">();</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">eveSecret</span> <span class="o">=</span> <span class="nx">eveDH</span><span class="p">.</span><span class="nx">computeSecret</span><span class="p">(</span><span class="nx">aliceDH</span><span class="p">.</span><span class="nx">getPublicKeys</span><span class="p">(),</span> <span class="kc">null</span><span class="p">,</span> <span class="s2">&quot;hex&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="nx">eveSecret</span> <span class="o">===</span> <span class="nx">aliceSecret</span><span class="p">;</span> <span class="c1">// =&gt; false</span>
</span></code></pre></td></tr></table></div></figure>


<p>This is because Alice&rsquo;s secret is derived from Alice and Bob&rsquo;s private keys,
which Eve does not have.  Eve may not realize her secret is not the same as
Alice and Bob&rsquo;s until later.</p>

<p>That was asymmetric encryption; using different keys.  The shared secret may
now be used in symmetric encryption; using the same keys.</p>

<p>Alice creates a symmetric block cypher using her favorite algorithm, a hash of
their secret as a key, and random bytes as an initialization vector.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">cypher</span> <span class="o">=</span> <span class="s2">&quot;aes-256-ctr&quot;</span><span class="p">;</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">hash</span> <span class="o">=</span> <span class="s2">&quot;sha256&quot;</span><span class="p">;</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">aliceIV</span> <span class="o">=</span> <span class="nx">crypto</span><span class="p">.</span><span class="nx">randomBytes</span><span class="p">(</span><span class="mi">128</span><span class="p">);</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">aliceHashedSecret</span> <span class="o">=</span> <span class="nx">crypto</span><span class="p">.</span><span class="nx">createHash</span><span class="p">(</span><span class="nx">hash</span><span class="p">).</span><span class="nx">update</span><span class="p">(</span><span class="nx">aliceSecret</span><span class="p">).</span><span class="nx">digest</span><span class="p">(</span><span class="s2">&quot;binary&quot;</span><span class="p">);</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">aliceCypher</span> <span class="o">=</span> <span class="nx">crypto</span><span class="p">.</span><span class="nx">createCypher</span><span class="p">(</span><span class="nx">cypher</span><span class="p">,</span> <span class="nx">aliceHashedSecret</span><span class="p">,</span> <span class="nx">aliceIV</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>Alice then uses her cypher to encrypt her message to Bob.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">cypherText</span> <span class="o">=</span> <span class="nx">aliceCypher</span><span class="p">.</span><span class="nx">update</span><span class="p">(</span><span class="s2">&quot;...&quot;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>Alice then sends the cypher text, cypher, and hash to Bob.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">cypherText</span><span class="o">:</span>
</span><span class='line'> <span class="o">&lt;</span><span class="nx">Buffer</span> <span class="nx">bd</span> <span class="mi">29</span> <span class="mi">96</span> <span class="mi">83</span> <span class="nx">fa</span> <span class="nx">a8</span> <span class="mi">7</span><span class="nx">d</span> <span class="mi">9</span><span class="nx">c</span> <span class="nx">ea</span> <span class="mi">90</span> <span class="nx">ab</span><span class="o">&gt;</span>
</span><span class='line'><span class="nx">cypher</span><span class="o">:</span>
</span><span class='line'> <span class="nx">aes</span><span class="o">-</span><span class="mi">256</span><span class="o">-</span><span class="nx">ctr</span>
</span><span class='line'><span class="nx">hash</span><span class="o">:</span>
</span><span class='line'> <span class="nx">sha256</span>
</span></code></pre></td></tr></table></div></figure>


<p>Bob now constructs a symmetric block cypher using the algorithm from Alice,
and a hash of their shared secret.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">bobHashedSecret</span> <span class="o">=</span> <span class="nx">crypto</span><span class="p">.</span><span class="nx">createHash</span><span class="p">(</span><span class="nx">hash</span><span class="p">).</span><span class="nx">update</span><span class="p">(</span><span class="nx">bobSecret</span><span class="p">).</span><span class="nx">digest</span><span class="p">(</span><span class="s2">&quot;binary&quot;</span><span class="p">);</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">bobCypher</span> <span class="o">=</span> <span class="nx">crypto</span><span class="p">.</span><span class="nx">createDecipher</span><span class="p">(</span><span class="nx">cypher</span><span class="p">,</span> <span class="nx">bobHashedSecret</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>Bob now decyphers the encrypted message (cypher text) from Alice.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">plainText</span> <span class="o">=</span> <span class="nx">bobCypher</span><span class="p">.</span><span class="nx">update</span><span class="p">(</span><span class="nx">cypherText</span><span class="p">);</span>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">plainText</span><span class="p">);</span> <span class="c1">// =&gt; &quot;I love you&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Eve has intercepted the cypher text, cypher, hash, and tries to decrypt it.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">eveHashedSecret</span> <span class="o">=</span> <span class="nx">crypto</span><span class="p">.</span><span class="nx">createHash</span><span class="p">(</span><span class="nx">hash</span><span class="p">).</span><span class="nx">update</span><span class="p">(</span><span class="nx">eveSecret</span><span class="p">).</span><span class="nx">digest</span><span class="p">(</span><span class="s2">&quot;binary&quot;</span><span class="p">);</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">eveCypher</span> <span class="o">=</span> <span class="nx">crypto</span><span class="p">.</span><span class="nx">createDecipher</span><span class="p">(</span><span class="nx">cypher</span><span class="p">,</span> <span class="nx">eveHashedSecret</span><span class="p">);</span>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">eveCypher</span><span class="p">.</span><span class="nx">update</span><span class="p">(</span><span class="nx">cypherText</span><span class="p">).</span><span class="nx">toString</span><span class="p">());</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// =&gt; ��_r](�i)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Here&rsquo;s where Eve realizes her secret is not correct.</p>

<p>This prevents passive eavesdropping, but not active man-in-the-middle (MITM)
attacks.  For example, how does Alice know that the messages she was supposedly
receiving from Bob actually came from Bob, not Eve posing as Bob?</p>

<p>Today, we use a system of certificates to provide authentication.  This system
certainly <a href="http://thenextweb.com/insider/2015/02/19/lenovo-caught-installing-adware-new-computers/">has</a> its
<a href="https://deadbeefsec.wordpress.com/2012/09/30/who-do-you-trust-why-certificate-authorities-are-a-cartel/">flaws</a>,
but it is what we use today.  This is more advanced topic that won&rsquo;t be covered
here.  Trust is a funny thing.</p>

<p>What&rsquo;s interesting to note is that the prime and generator used to generate
Diffie-Hellman public and private keys have strings that represent the
corresponding modular key exponential groups, ie &ldquo;modp14&rdquo;.  Web crypto&rsquo;s API
gives you
<a href="https://hg.mozilla.org/mozilla-central/file/d866ac7f8606/dom/crypto/test/test_WebCrypto_DH.html#l30">finer grain control</a>
to specify the generator and
<a href="https://hg.mozilla.org/mozilla-central/file/d866ac7f8606/dom/crypto/test/test-vectors.js#l662">large prime number</a>
in a Typed Array.  I&rsquo;m not sure why this is; if it allows you to have finer
grain control, or allows you to support newer groups before the implementation
does?  To me, it seems like a source for errors to be made; hopefully someone
will make a library to provide these prime/generator pairs.</p>

<p>One issue with my approach is that I assumed that Alice and Bob both had
support for the same hashing algorithms, modular exponential key group, and
symmetric block cypher.  In the real world, this is not always the case.
Instead, it is much more common for the client to broadcast publicly all of the
algorithms it supports, and the server to pick one.  This list of algorithms is
called a &ldquo;suite,&rdquo; ie &ldquo;cypher suit.&rdquo; I learned this the hard way recently trying
to
<a href="https://stribika.github.io/2015/01/04/secure-secure-shell.html">upgrade</a>
the <a href="https://wiki.mozilla.org/Security/Guidelines/OpenSSH">cypher suit</a>
on my ssh server and finding out that
<a href="https://mochtu.de/2015/01/07/updating-openssh-on-mac-os-x-10-10-yosemite/">my client did not support the lastest cyphers</a>. In this case, Alice and Bob might not have the same
versions of Node.js, which statically link their own versions of OpenSSL. Thus,
one should use <code>cryto.getCiphers()</code> and <code>crypto.getHashes()</code> before assuming
the party they&rsquo;re communicating to can do the math to decrypt. We&rsquo;ll see &ldquo;cypher
suites&rdquo; come up again in TLS handshakes. The NSA
<a href="http://en.wikipedia.org/wiki/NSA_Suite_B_Cryptography">publishes a list of endorsed cryptographic components</a>,
for what it&rsquo;s worth.  There are also neat tricks we can do to prevent the
message from being decrypted at a later time should the private key be
compromised and encrytped message recorded, called Perfect Forward Secrecy.</p>

<p>Let&rsquo;s take a look now at how a browser does a TLS handshake.  Here&rsquo;s a
capture from Wireshark of me navigating to <a href="https://google.com.">https://google.com.</a> First we have a
TLSv1.2 Client Hello to start the handshake.  Here we can see a list of the
cypher suites.</p>

<p><img src="http://nickdesaulniers.github.io/images/tls_1_client_hello.png"></p>

<p>Next is the response from the server, a TLSv1.2 Server Hello.  Here you can see
the server has picked a cypher to use.</p>

<p><img src="http://nickdesaulniers.github.io/images/tls_2_server_hello.png"></p>

<p>The server then sends its certificate, which contains a copy of its public key.</p>

<p><img src="http://nickdesaulniers.github.io/images/tls_3_server_cert.png"></p>

<p>Now that we&rsquo;ve agreed on a cypher suite, the client now sends its public key.
The server sets up a session, that way it may abbreviate the handshake in the
future. Finally, the client may now start making requests to the server with
encrypted application data.</p>

<p><img src="http://nickdesaulniers.github.io/images/tls_4_key_exchange.png"></p>

<p>For more information on TLS handshakes, you should read
<a href="https://www.igvita.com/">Ilya Grigorik&rsquo;s</a>
High Performance Browser Networking book chapter
<a href="http://chimera.labs.oreilly.com/books/1230000000545/ch04.html#TLS_HANDSHAKE">TLS Handshake</a>,
<a href="https://wiki.mozilla.org/Security/Server_Side_TLS#DHE_handshake_and_dhparam">Mozilla OpSec&rsquo;s fantastic wiki</a>,
and
<a href="http://security.stackexchange.com/questions/20803/how-does-ssl-tls-work/20833">this exellent Stack Exchange post</a>.
As you might imagine, all of these back and forth trips made during the TLS
handshake add latency overhead when compared to unencrypted HTTP requests.</p>

<p>I hope this post helped you understand how we can use cryptography to exchange
secret information through public channels.  This isn&rsquo;t enough information to
implement a perfectly secure system; end to end security means one single
mistake can compromise the entire system.  Peer review and open source,
<a href="https://danielmiessler.com/writing/cryptography_opensource/">battle tested</a>
implementations
<a href="http://dodcio.defense.gov/OpenSourceSoftwareFAQ.aspx#Q%3a_Doesn.27t_hiding_source_code_automatically_make_software_more_secure.3F">go a long way</a>.</p>

<blockquote><p>A cryptosystem should be secure even if everything about the system, except the key, is public knowledge.</p><footer><strong>Kerckhoffs&#8217;s principle</strong></footer></blockquote>


<p>I wanted to write this post because I believe abstinence-only crypto education
isn&rsquo;t working and I cant stand when anyone acts like part of a cabal from their
ivory tower to those trying to learn new things.
Someone will surely cite
<a href="http://matasano.com/articles/javascript-cryptography/">Javascript Cryptography Considered Harmful</a>,
which while valid, misses my point of simply trying to show people more concrete
basics with code examples.
The first crypto system you implement will have its holes, but you
can&rsquo;t go from ignorance of crypto to perfect knowledge without implementing a
few imperfect systems.  Don&rsquo;t be afraid to, just don&rsquo;t start with trying to protect
high value data.  Crypto is dangerous, because it can be difficult to
impossible to tell when your system fails.
<a href="https://nickdesaulniers.github.io/blog/2014/04/18/lets-write-some-x86-64/">Assembly</a>
is also akin to juggling knives, but at least
you&rsquo;ll usually segfault if you mess up and program execution will halt.</p>

<p>With upcoming APIs like
<a href="http://www.w3.org/TR/service-workers/#security-considerations">Service Workers requiring TLS</a>,
protocols like <a href="http://http2.github.io/faq/#does-http2-require-encryption">HTTP2</a>,
pushes for all <a href="http://blog.codinghorror.com/should-all-web-traffic-be-encrypted/">web traffic to be encrypted</a>,
and <a href="https://nickdesaulniers.github.io/blog/2013/07/03/why-ill-be-marching-this-4th/">shitty things governments</a>,
<a href="http://www.theguardian.com/technology/2015/jan/16/david-cameron-encryption-lavabit-ladar-levison">politicians</a>,
and <a href="https://www.youtube.com/watch?v=fpbOEoRrHyU">ISPs</a> do,
web developers are going to have to start boning up on their crypto knowledge.</p>

<p>What are your recommendations for correctly learning crypto?  Leave me some
thoughts in the comments below.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Writing my first technical book chapter]]></title>
    <link href="http://nickdesaulniers.github.io/blog/2015/01/25/writing-my-first-book-chapter/"/>
    <updated>2015-01-25T20:50:00-08:00</updated>
    <id>http://nickdesaulniers.github.io/blog/2015/01/25/writing-my-first-book-chapter</id>
    <content type="html"><![CDATA[<p>It&rsquo;s a feeling of immense satisfaction when we complete a major achievement.
Being able to say &ldquo;it&rsquo;s done&rdquo; is such a great stress relief.  Recently, I
completed work on my first publication, a chapter about Emscripten for the
upcoming book
<a href="http://www.crcpress.com/product/isbn/9781498716079">WebGL Insights</a>
to be published by CRC Press in time for
<a href="http://s2015.siggraph.org/">SIGGRAPH 2015</a>.</p>

<p>One of the life goals I&rsquo;ve had for a while is writing a book.  A romantic idea
it seems to have your ideas transcribed to a medium that will outlast your
bones.  It&rsquo;s enamoring to hold books from long dead authors, and see that their
ideas are still valid and powerful.  Being able to write a book, in my eyes,
provides some form of life after death.  Though, one could imagine ancestors
reading blog posts from long dead relatives via utilities like the
<a href="https://web.archive.org/web/20141218200253/http://nickdesaulniers.github.io/">Internet Archive&rsquo;s WayBack Machine</a>.</p>

<p>Writing about highly technical content places an upper limit on the usefulness
of the content, and shows as &ldquo;dated&rdquo; quickly.  A book I recently ordered was
<a href="http://shop.oreilly.com/product/0636920033707.do">Scott Meyers&#8217; Effective Modern C++</a>.
This title strikes me, because what
exactly do we consider <em>modern</em> or <em>contemporary</em>?  Those adjectives only make
sense in a time limited context.  When C++ undergoes another revolution,
Scott&rsquo;s book may become irrelevant, at which point the adjective <em>modern</em>
becomes incorrect.  Not that I think Scott&rsquo;s book or my own is time-limited in
usefulness; more that technical books&#8217; duration of usefulness is significantly
less than philosophical works like <em>1984</em> or <em>Brave New World</em>.  Almost like having
a record in a sport is a feather in one&rsquo;s cap, until the next best thing comes
along and you&rsquo;re forgotten to time.</p>

<p>Somewhat short of my goal of writing an entire book, I only wrote a single
chapter for a book.  It&rsquo;s interesting to see that a lot of graphics programming
books seem to follow the format of one author per chapter or at least multiple
authors.  Such book series as <em>GPU Gems</em>, <em>Shader X</em>, and <em>GPU Pro</em> follow this
pattern, which is interesting.  After seeing how much work goes into one
chapter, I think I&rsquo;m content with not writing an entire book, though I may
revisit that decision later in life.</p>

<p>How did this all get started?  I had followed Graham Sellers on Twitter and saw
<a href="http://octopress.org/2015/01/15/octopress-3.0-is-coming/">a tweet from him</a>
about a call to authors for WebGL Insights.  Explicitly in the linked to page
under the call for authors was interest in proposals about Emscripten and
asm.js.</p>

<div class='embed twitter'><blockquote class="twitter-tweet"><p lang="en" dir="ltr">Want to contribute to a book? <a href="https://twitter.com/pjcozzi">@pjcozzi</a> is calling for authors for the new <a href="https://twitter.com/hashtag/WebGL?src=hash">#WebGL</a> Insights. Go here: <a href="http://t.co/n7wrXVb4Vl">http://t.co/n7wrXVb4Vl</a>.</p>&mdash; Graham Sellers (@grahamsellers) <a href="https://twitter.com/grahamsellers/status/504974663848456193">August 28, 2014</a></blockquote>
<script async src="http://nickdesaulniers.github.io//platform.twitter.com/widgets.js" charset="utf-8"></script></div>


<p>At the time, I was headlong into a project helping Disney port Where&rsquo;s My Water
from C++ to JavaScript using Emscripten.  I was intimately familiar with
Emscripten, having been trained by one of its most prolific contributors,
<a href="http://clb.demon.fi/">Jukka Jylänki</a>.
Also, Emscripten&rsquo;s creator,
<a href="http://mozakai.blogspot.com/">Alon Zakai</a>, sat on the other side
of the office from me, so I was constantly pestering him about how to do
different things with Emscripten.  The #emscripten irc channel on
irc.mozilla.org is very active, but there&rsquo;s no substitute for being able to
have a second pair of eyes look over your shoulder when something is going
wrong.</p>

<p>Knowing Emscripten&rsquo;s strengths and limitations, seeing interest in the subject
I knew a bit about (but wouldn&rsquo;t consider myself an expert in), and having the
goal of writing something to be published in book form, this was my opportunity
to seize.</p>

<p>I wrote up a quick proposal with a few figures about why Emscripten was
important and how it worked, and sent it off with fingers crossed.  Initially,
I was overjoyed to learn when my proposal was accepted, but then there was a
slow realization that I had a lot of work to do.  The editor,
<a href="http://www.seas.upenn.edu/~pcozzi/">Patrick Cozzi</a>, set up
<a href="https://github.com/WebGLInsights/WebGLInsights-1">a GitHub repo</a>
for our additional code and figures, a mailing
list, and sent us a chapter template document detailing the process.  We had 6
weeks to write the rough draft, then 6 weeks to work with reviewers to get the
chapter done.  The chapter was written as a Google Doc, so that we could have
explicit control over who we shared the document with, and what kinds of
editing power they had over the document.  I think this approach worked well.</p>

<p>I had most of the content written by week 2.  This was surprising to me,
because I&rsquo;m a heavy procrastinator.  The only issue was that the number of
pages I wrote was double the allowed amount; way over page count.  I was
worried about the amount of content, but told myself to try not to be attached
to the content, just as you shouldn&rsquo;t stay attached with your code.</p>

<p>I took the additional 4 weeks I had left to finish the rough draft to invite
some of my friends and coworkers to provide feedback.  It&rsquo;s useful to have a
short list of people who have ever offered to help in this regard or owe you
one.  You&rsquo;ll also want a diverse team of reviewers that are either close to the
subject matter, or approaching it as new information.  This allows you to stay
technically correct, while not presuming your readers know everything that you
do.</p>

<p>The strategy worked out well; some of the content I had initially written about
how JavaScript VMs and JITs speculate types was straight up wrong.  While it
played nicely into the narrative I was weaving, someone more well versed in
JavaScript virtual machines would be able to call BS on my work.  The reviewers
who weren&rsquo;t as close to subject matter were able to point out when logical
progressions did not follow.</p>

<p>Fear of being publicly corrected prevents a lot of people from blogging or
contributing to open source.  It&rsquo;s important to not stay attached to your work,
especially when you need to make cuts.  When push came to shove, I did have
difficulty removing sections.</p>

<p>Lets say you have three sequential sections: A, B, &amp; C.  If section A and
section B both set up section C, and someone tells you section B has to go, it
can be difficult to cut section B because as the author you may think it&rsquo;s
really important to include B for the lead into C.  My recommendation is sum up
the most important idea from section B and add it to the end of section A.</p>

<p>For the last six weeks, the editor, some invited third parties, and other
authors reviewed my chapter.  It was great that others even followed along and
pointed out when I was making assumptions based on specific compiler or
browser.
<a href="http://erich.realtimerendering.com/">Eric Haines</a> even reviewed my chapter!
That was definitely a highlight for me.</p>

<p>We used a Google Sheet to keep track of the state of reviews.  Reviewers were
able to comment on sections of the chapter.  What was nice was that you were
able to keep using the comment as a thread, responding directly to a
criticism.  What didn&rsquo;t work so well was then once you edited that line, the
comment and thus the thread was lost.</p>

<p>Once everything was done, we zipped up the assets to be used as figures,
submitted bios, and wrote a tips and tricks section.  Now, it&rsquo;s just a long
waiting game until the book is published.</p>

<p>As far as dealing with the publisher, I didn&rsquo;t have much interaction.  Since
the book was assembled by a dedicated editor, Patrick did most of the leg work.
I only asked that what royalties I would receive be donated to Mozilla, which
the publisher said would be too small (est $250) to be worth the paperwork.  It
would be against my advice if you were thinking of writing a technical book for
the sole reason of monetary benefit.  I&rsquo;m excited to be receiving a hard cover
copy of the book when it&rsquo;s published.  I&rsquo;ll also have to see if I can find my
way to SIGGRAPH this year; I&rsquo;d love to meet my fellow authors in person and
potential readers.  Just seeing the list of authors was really a who&rsquo;s-who of
folks doing cool WebGL stuff.</p>

<p>If you&rsquo;re interested in learning more about working with Emscripten, asm.js,
and WebGL, I sugguest you pick up a copy of WebGL Insights in August when it&rsquo;s
published.  A big thank you to my reviewers: Eric Haines, Havi Hoffman,
Jukka Jylänki, Chris Mills, Traian Stanev, Luke Wagner, and Alon Zakai.</p>

<p>So that was a little bit about my first experience with authorship.  I&rsquo;d be
happy to follow up with any further questions you might have for me.  Let me
know in the comments below, on Twitter, HN, or wherever and I&rsquo;ll probably find
it!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Let's Write Some x86-64]]></title>
    <link href="http://nickdesaulniers.github.io/blog/2014/04/18/lets-write-some-x86-64/"/>
    <updated>2014-04-18T16:16:00-07:00</updated>
    <id>http://nickdesaulniers.github.io/blog/2014/04/18/lets-write-some-x86-64</id>
    <content type="html"><![CDATA[<blockquote><p>&#8230;&#8220;&#8216;Our speech interposes itself between apprehension and truth like a dusty pane or warped mirror.  The tongue of Eden was like a flawless glass; a light of total understanding streamed through it.  Thus Babel was a second Fall.&#8217; And Isaac the Blind, an early Kabbalist, said that, to quote Gershom Scholem&#8217;s translation, &#8216;The speech of men is connected with divine speech and all language whether heavenly or human derives from one source: the Divine Name.&#8217; The practical kabbalists, the sorcerers, bore the title Ba&#8217;al Shem, meaning &#8216;master of the divine name.&#8217;&#8221;</p><p>&#8220;The machine language of the world,&#8221; Hiro says.</p><p>&#8220;Is this another analogy?&#8221;</p><p>&#8220;Computers speak machine language,&#8221; Hiro says.  &#8220;It&#8217;s written in ones and zeroes - binary code.  At the lowest level, all computers are programmed with strings of ones and zeroes.  When you program in machine language, you are controlling the computer at its brainstem, the root of its existence.  It&#8217;s the tongue of Eden.  But it&#8217;s very difficult to work in machine language because you go crazy after a while, working at such a minute level.  So a whole Babel of computer languages has been created for programmers: FORTRAN, BASIC, COBOL, LISP, Pascal, C, PROLOG, FORTH.  You talk to the computer in one of these languages, and a piece of software called a compiler converts it into machine language.  But you never can tell exactly what the compiler is doing.  It doesn&#8217;t always come out the way you want.  Like a dusty pane or warped mirror. A really advanced hacker comes to understand the true inner workings of the machine – he sees through the language he&#8217;s working in and glimpses the secret functioning of the binary code – becomes a Ba&#8217;al Shem of sorts.&#8221;</p><footer><strong>Hiro Protagonist and The Librarian</strong> <cite>Snow Crash by Neal Stephenson</cite></footer></blockquote>


<p>This a beautiful quote, one that I think truly captures the relationship between
higher level languages and the Instruction Set Architecture (ISA)&rsquo;s machine
code, though this is from the angle of controlling the machine with its
implementation specific quirks which can detract from what you&rsquo;re actually
trying to do.</p>

<p>This blog is meant for those who don&rsquo;t know x86-64 assembly, but maybe know a
little C, and are curious about code generation.  Or maybe if you&rsquo;ve ever tried
to hand write x86-64 assembly, and got stuck trying to understand the tooling or
seemingly random segfaults from what appears to be valid instructions.</p>

<p>I really enjoy writing code in CoffeeScript
and C, so I have a quick anecdote about CoffeeScript though you don&rsquo;t need to
know the language.  When writing CoffeeScript, I find myself frequently using a
<a href="https://github.com/kchmck/vim-coffee-script">vim plugin</a>
to view the emitted JavaScript.  I
<strong>know</strong> when CoffeeScript emits less than optimal JavaScript.  For example in
the code:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="nv">nick = </span><span class="nf">-&gt;</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span> <span class="nx">x</span> <span class="k">for</span> <span class="nx">x</span> <span class="k">in</span> <span class="p">[</span><span class="mi">0</span><span class="p">..</span><span class="mi">100</span><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>I know that CoffeeScript is going to push the results of the call to
<code>console.log</code> into an array
and return that, because of the implicit return of the final expression in a
function body, which in this case happens to be a for loop (array comprehension
being treated itself as an expression).  The emitted JavaScript looks like:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">nick</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="nx">nick</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">x</span><span class="p">,</span> <span class="nx">_i</span><span class="p">,</span> <span class="nx">_results</span><span class="p">;</span>
</span><span class='line'>  <span class="nx">_results</span> <span class="o">=</span> <span class="p">[];</span>
</span><span class='line'>  <span class="k">for</span> <span class="p">(</span><span class="nx">x</span> <span class="o">=</span> <span class="nx">_i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">_i</span> <span class="o">&lt;=</span> <span class="mi">100</span><span class="p">;</span> <span class="nx">x</span> <span class="o">=</span> <span class="o">++</span><span class="nx">_i</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">_results</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">x</span><span class="p">));</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">return</span> <span class="nx">_results</span><span class="p">;</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>By putting a seemingly meaningless undefined statement as the final statement in
the function body, we can significantly reduce what the function is doing and
decrease the number of allocations:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="nv">nick = </span><span class="nf">-&gt;</span>
</span><span class='line'>  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span> <span class="nx">x</span> <span class="k">for</span> <span class="nx">x</span> <span class="k">in</span> <span class="p">[</span><span class="mi">0</span><span class="p">..</span><span class="mi">100</span><span class="p">]</span>
</span><span class='line'>  <span class="kc">undefined</span>
</span></code></pre></td></tr></table></div></figure>


<p>emits:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">nick</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">x</span><span class="p">,</span> <span class="nx">_i</span><span class="p">;</span>
</span><span class='line'>  <span class="k">for</span> <span class="p">(</span><span class="nx">x</span> <span class="o">=</span> <span class="nx">_i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">_i</span> <span class="o">&lt;=</span> <span class="mi">100</span><span class="p">;</span> <span class="nx">x</span> <span class="o">=</span> <span class="o">++</span><span class="nx">_i</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">x</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">return</span> <span class="k">void</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>That <code>return void 0</code> may seem odd, but functions in JavaScript without an
explicit return value return <code>undefined</code>, but since the <code>undefined</code> identifier
can be reassigned to, the expression <code>void 0</code>
<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/void">evaluates to the value</a>
<code>undefined</code>.</p>

<p>You can see that making the CoffeeScript function body slightly longer and
adding a seemingly meaningless lone undefined statement at the end of the
function body, the emitted JavaScript does not allocate an array or waste time
pushing the results of <code>console.log</code>, which would be <code>undefined</code>, into that
array a hundred times.  This reminds me of how seemingly meaningless noop
instructions can keep a processor&rsquo;s pipeline full by preventing stalls, though
a pipeline stall doesn&rsquo;t change the correctness of a program, so it&rsquo;s an
imperfect analogy.</p>

<p>Now I&rsquo;m not saying that you should be thinking about these kinds of
optimizations when programming at such a high level, as they might be premature.
I shared with you this example because while writing C code, and reading
<a href="http://www.drdobbs.com/parallel/graphics-programming-black-book/184404919">Michael Abrash&rsquo;s Graphics Programming Black Book</a>,
<em>I wondered to myself if hardcore C
programmers also would know the equivalent assembly instructions that would be
emitted from their higher level C code</em> (before optimizing compilers even
existed).</p>

<p>In college, I was taught 68k and MIPS ISAs.
To understand x86-64 we need to be able to write and run it.
Unfortunately, I did not have the training to know how to do so.  My 68k code
was run on a MCU from a FreeScale IDE in Windows, so the process might as well
have been indistinguishable from magic to me.  I understood that you&rsquo;d start
with low level source, in (somewhat) human readable instructions that would be
converted to binary representing op codes.  The assembler would then translate
the assembly into non-executable object files that contained binary code that
had placeholders for sections of code defined in other object files.  The linker
would then be used to replace the placeholders with the now combined binary
code&rsquo;s relative positions and then converted into an executable.  But how do I
do this from my x86-64 machine itself?  The goto book I&rsquo;ve been recommended many
times is
<a href="http://www.wrox.com/WileyCDA/WroxTitle/productCd-0764579010.html">Professional Assembly Language by Richard Blum</a>,
but this book only
covers x86, not x86-64.  There&rsquo;s been some very big changes to the ABI between
x86 and x86-64.  You may be familiar with Application Programmer Interfaces
(<a href="http://en.wikipedia.org/wiki/Api">APIs</a>),
but what is an
<a href="http://en.wikipedia.org/wiki/Application_binary_interface">Application Binary Interface</a>?
I think of an ABI as how
two pieces of native code interact with one another, such as calling convention
(how arguments are passed to functions at the ISA level).</p>

<p>I&rsquo;m very lucky to have the privilege to work with a compiler engineer, Dan Gohman,
who has worked on a variety of compilers.  I was citing a
<a href="http://lists.cs.uiuc.edu/pipermail/llvmdev/2011-October/043719.html">particular email of Dan</a>&rsquo;s
for some time before he came to work with us, when I
would talk about how the naming of LLVM gives the imagery of a virtual machine,
though it&rsquo;s more so a compiler intermediate representation.  Dan is an amazing
and patient resource who has helped me learn more about the
subtleties of the x86-64 ABI.  Throughout this blog, I&rsquo;ll copy some responses to
questions I&rsquo;ve had answered by Dan.</p>

<p>Our first goal is to write an x86-64 program that does nothing, but that we can
build.  Assembly files typically have the .s file extension, so let&rsquo;s fire up
our text editor and get started.  I&rsquo;ll be doing my coding from OSX 10.8.5, but
most examples will work from Linux.  All of my symbol names, like _main, _exit,
and _printf, are prefixed with
underscores, as Darwin requires. Most Linux systems don&rsquo;t require this, so
Linux users should omit the leading underscores from all such names.  Unfortunately,
I cannot figure out how to link with ld in Linux, so I recommend trying to
understand what <code>gcc -v your_obj_file.o</code> is doing, and
<a href="http://www.lisha.ufsc.br/teaching/os/exercise/hello.html">this might help</a>.
Let me know in the comments if there&rsquo;s an easy way to use ld when linking your
object files from linux and I&rsquo;ll be happy to post an edit.</p>

<p>Let&rsquo;s start with this fragment and get it building, then I&rsquo;ll cover what it&rsquo;s
doing.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='gas'><span class='line'><span class="na">.text</span>
</span><span class='line'><span class="na">.globl</span> <span class="no">_main</span>
</span><span class='line'><span class="nl">_main:</span>
</span><span class='line'>  <span class="nf">subq</span> <span class="no">$8</span><span class="p">,</span> <span class="nv">%rsp</span>
</span><span class='line'>  <span class="nf">movq</span> <span class="no">$0</span><span class="p">,</span> <span class="nv">%rdi</span>
</span><span class='line'>  <span class="nf">call</span> <span class="no">_exit</span>
</span></code></pre></td></tr></table></div></figure>


<p>Let&rsquo;s use OSX&rsquo;s built in assembler (as) and linker (ld).</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='gas'><span class='line'><span class="nf">as</span> <span class="no">nothing.s</span> <span class="p">-</span><span class="no">o</span> <span class="no">nothing.o</span>
</span><span class='line'><span class="nf">ld</span> <span class="p">-</span><span class="no">lc</span> <span class="p">-</span><span class="no">macosx_version_min</span> <span class="mi">10</span><span class="no">.8.5</span> <span class="no">nothing.o</span> <span class="p">-</span><span class="no">o</span> <span class="no">nothing</span>
</span></code></pre></td></tr></table></div></figure>


<p>We should now be able to run <code>./nothing</code> without any segfaults.  Without
<code>-macosx_version_min 10.8.5</code> I get a warning and my executable segfaults.</p>

<p>Now let&rsquo;s create a basic generic Makefile to help us automate these steps.
Watch your step; archaic syntax ahead.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='make'><span class='line'><span class="nv">SOURCES</span> <span class="o">=</span> <span class="k">$(</span>wildcard *.s<span class="k">)</span>
</span><span class='line'><span class="nv">OBJECTS</span> <span class="o">=</span> <span class="k">$(</span>SOURCES:.s<span class="o">=</span>.o<span class="k">)</span>
</span><span class='line'><span class="nv">EXECUTABLES</span> <span class="o">=</span> <span class="k">$(</span>OBJECTS:.o<span class="o">=</span><span class="k">)</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Generic rule</span>
</span><span class='line'><span class="c"># $&lt; is the first dependency name</span>
</span><span class='line'><span class="c"># $@ is the target filename</span>
</span><span class='line'><span class="nf">%.o</span><span class="o">:</span> <span class="m">%.s</span>
</span><span class='line'>  as <span class="nv">$&lt;</span> -o <span class="nv">$@</span>
</span><span class='line'>
</span><span class='line'><span class="nf">default</span><span class="o">:</span> <span class="m">$(OBJECTS)</span>
</span><span class='line'>  <span class="k">for </span>exe in <span class="k">$(</span>EXECUTABLES<span class="k">)</span> ; <span class="k">do</span> <span class="se">\</span>
</span><span class='line'>    ld -lc -macosx_version_min 10.8.5 <span class="nv">$$</span>exe.o -o <span class="nv">$$</span>exe ; <span class="se">\</span>
</span><span class='line'>  <span class="k">done</span>
</span><span class='line'>
</span><span class='line'><span class="nf">.PHONY</span><span class="o">:</span> <span class="m">clean</span>
</span><span class='line'><span class="nf">clean</span><span class="o">:</span>
</span><span class='line'>  rm *.o
</span><span class='line'>  <span class="k">for </span>exe in <span class="k">$(</span>EXECUTABLES<span class="k">)</span> ; <span class="k">do</span> <span class="se">\</span>
</span><span class='line'>    rm <span class="nv">$$</span>exe ; <span class="se">\</span>
</span><span class='line'>  <span class="k">done</span>
</span></code></pre></td></tr></table></div></figure>


<p>By the time you read this, I&rsquo;ve already forgotten how half of that code works.
But, this will allow us to run <code>make</code> to assemble and link all of our .s files
individually, and <code>make clean</code> to remove our object and executable files.
Surely you can whip up a better build script?  Let me know in the comments
below.</p>

<p>So now let&rsquo;s go back to our assembly file and go over it line by line.  Again,
it looks like:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='gas'><span class='line'><span class="na">.text</span>
</span><span class='line'><span class="na">.globl</span> <span class="no">_main</span>
</span><span class='line'><span class="nl">_main:</span>
</span><span class='line'>  <span class="nf">subq</span> <span class="no">$8</span><span class="p">,</span> <span class="nv">%rsp</span>
</span><span class='line'>  <span class="nf">movq</span> <span class="no">$0</span><span class="p">,</span> <span class="nv">%rdi</span>
</span><span class='line'>  <span class="nf">call</span> <span class="no">_exit</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>.text</code> is the text section.  This section defines the instructions that the
processor will execute.  There can be other sections as well.  We&rsquo;ll see more
later, but the &ldquo;data&rdquo; section
typically has static variables that have been initialized with non null (and non
zero) values, where as &ldquo;bss&rdquo; will have static but non initialized values.  Also,
there will be a heap and a stack although you don&rsquo;t declare them as you would
for text or data.</p>

<p>Next up is the global directive.  The global directive tells the linker that
there will be a section named _main that it may call into, making the _main
section visible to other sections.  You may be
<a href="http://stackoverflow.com/a/5908708/1027966">wondering</a>
why directives and sections both begin with a dot.</p>

<blockquote><p>&#8217;.&#8221; isn&#8217;t a valid identifier character in C, so way back when it became common to use &#8216;.&#8221; as a prefix in the assembler and linker in order to avoid clashing with C symbol names. This unfortunately was used for both section names and directives, because both can appear in contexts where a simple parser wouldn&#8217;t be able to disambiguate otherwise.</p><p>I don&#8217;t know why they used the same convention for directives and section names, but they did, and it&#8217;s not practical to change it now.</p><footer><strong>Dan Gohman</strong></footer></blockquote>


<p>Ok now the subtraction instruction.  We&rsquo;ve got a bit to go over with just this
one line.  The first is the instruction itself.  The sub instruction has
numerous suffixes that specify how many bytes to operate on.  The typical
convention for numerous instructions is to have a suffix of b for 1 byte
(8 bits), w for a word (2 bytes, 16 bits), l for a long or
double word (4 bytes, 32 bits), and q for a quad word (8 bytes, 64 bits).
Leaving off the suffix, the assembler will try and guess based off of the
operands, which can lead to obscure bugs.  So subq operates on 64 bits.
Extending this we should be able to recognize that subb operates on 8 bits, subw
operates on 16 bits, subl operates on 32 bits, and subq operates on 64 bits.
What&rsquo;s important to understand is that instruction suffix is dictated by the
inputs and destination size.  See Figure 3-3 of the
<a href="http://amd-dev.wpengine.netdna-cdn.com/wordpress/media/2012/10/24592_APM_v11.pdf">AMD64 ABI</a>.</p>

<p>Ok now let&rsquo;s look at the full instruction <code>subq $8, %rsp</code>.  The current order of
the operands is known as the AT&amp;T syntax, where the destination is specified
last
(<a href="http://stackoverflow.com/q/972602/1027966">as opposed to the Intel syntax</a>,
where the destination follows the instruction name ex. <code>subq rsp, 8</code>).</p>

<blockquote><p>I&#8217;m biased towards AT&T-syntax because GCC, LLVM, and icc (at least on Unix-like platforms) all use it, so it&#8217;s what I&#8217;m used to by necessity. People familiar with assembly languages on other platforms sometimes find it feels backwards from what they&#8217;re used to, but it is learnable.</p><footer><strong>Dan Gohman</strong></footer></blockquote>


<p>I&rsquo;m writing my examples in AT&amp;T syntax simply because when I compile my C code
from clang with the -S flag, or run my object files through gobjdump, I get AT&amp;T
syntax by default (though I&rsquo;m sure there are flags for either AT&amp;T or Intel
syntaxes).  Also, the ABI
docs are in AT&amp;T.  What are your thoughts on the two different syntaxes?  Let me
know in the comments below.</p>

<p>So when we say <code>subq $8, %rsp</code>, we&rsquo;re subtracting the immediate value of 8 from
the stack pointer (the register %rsp contains our stack pointer).  But
why are we doing this?  This is something that is left out from some of the
basic hello world assembly programs I&rsquo;ve seen.  This is the first ABI point I
want to make:</p>

<h2>x86-64 ABI point 1: function calls need the stack pointer to be aligned by a multiple of 16 bytes.</h2>

<p>By default, they are off by 8 on function entry.  See
Section 3.2.2 page 16 of the
<a href="http://www.x86-64.org/documentation_folder/abi-0.99.pdf">ABI</a>.</p>

<p>Why is the stack pointer misaligned by 8 bytes on function entry?  I&rsquo;m going to
punt on the answer to that for a bit, but I promise I&rsquo;ll come back to it.  The
most important thing is that that call instruction later on will fail unless we
align our stack pointer, which started out misaligned.  If we comment it out
(pound signs, #, comment out the rest of the line) and make our executable,
we&rsquo;ll get a segfault.  You could even add 8 bytes to the stack pointer and our
basic example would work (we just need a multiple of 16 remember), but when we
learn later (I promise) about how the stack works in x86-64, we&rsquo;ll see we can
mess things up by adding rather than subtracting.</p>

<p>Next up we&rsquo;re moving the immediate value 0x0 into %rdi.  You may have heard that
arguments to functions are pushed on the stack in reverse order, but that&rsquo;s an
old x86 convention.  With the addition of 8 more general purpose registers, we
now pass up to the first 6 arguments in registers (then push the rest, if any,
on the stack in reverse order).  The convention (in OSX and Linux) is our second
ABI point:</p>

<h2>x86-64 ABI point 2: The calling conventions for function invocations require passing integer arguments in the following sequence of registers: %rdi, %rsi, %rdx, %rcx, %r8, %r9, then pushing the rest on the stack in reverse order.</h2>

<p>See <a href="http://www.x86-64.org/documentation_folder/abi-0.99.pdf">section 3.2.3</a>
under &ldquo;Passing&rdquo;.  Warning:
<a href="http://msdn.microsoft.com/en-us/library/ms235286.aspx">Microsoft has a different calling convention</a>.
This is quite troubling to me, because I assumed that Instruction Set
Architectures were created so that the same code could run on two different
machines with the same microarchitecture, but because the ISA does not define
how arguments would be passed, this ambiguity is left up to the OS implementor
to decide.  Thus the same code may not run on two different machines with the
same microarchitecture if their operating systems are incompatible at the ABI
layer.</p>

<p><em>UPDATE</em>: Further, I just learned that <a href="http://nelhagedebugsshit.tumblr.com/post/84342207533/things-i-learned-writing-a-jit-in-go">Go, and C code compiled by 6c don’t use
the &ldquo;normal&rdquo; SysV ABI and calling convention, but have their own.</a></p>

<p>What our goal is is to call <code>exit(0);</code> where exit is defined in libc, which we
link against during the linking phase with with flag <code>-lc</code>.  This is another
punt on system calls.  So to invoke exit with the first integer argument of 0,
we first need to move the immediate value of 0x0 into %rdi.  Now if you run your
executable from your shell, then <code>echo $?</code>, you should see that the previous
command&rsquo;s exit code was 0.  Try changing the exit code to 42 and verify that it
works successfully.</p>

<p>Ok, well a program that does nothing is more boring than hello world.  Now that
we have our build setup out of the way, let&rsquo;s make a hello world program.  If
you&rsquo;re familiar with ASCII tables, we can use putchar from libc since we&rsquo;re
already linking to it.  Use <code>man putchar</code> to look at its signature and
<a href="http://www.asciitable.com/">this ASCII table</a> to move immediate values into a
certain register (remember the
calling convention, point #2) and make sure you setup the stack pointer before
any calls and exit after all other calls.</p>

<p>I&rsquo;ll leave that up to an exercise for the reader.  Let&rsquo;s use a string and
printf.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='gas'><span class='line'><span class="na">.data</span>
</span><span class='line'><span class="nl">_hello:</span>
</span><span class='line'>  <span class="na">.asciz</span> <span class="s">&quot;hello world\n&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="na">.text</span>
</span><span class='line'><span class="na">.globl</span> <span class="no">_main</span>
</span><span class='line'><span class="nl">_main:</span>
</span><span class='line'>  <span class="nf">subq</span> <span class="no">$8</span><span class="p">,</span> <span class="nv">%rsp</span>
</span><span class='line'>
</span><span class='line'>  <span class="nf">movb</span> <span class="no">$0</span><span class="p">,</span> <span class="nv">%al</span>
</span><span class='line'>  <span class="nf">leaq</span> <span class="no">_hello</span><span class="p">(</span><span class="nv">%rip</span><span class="p">),</span> <span class="nv">%rdi</span>
</span><span class='line'>  <span class="nf">call</span> <span class="no">_printf</span>
</span><span class='line'>
</span><span class='line'>  <span class="nf">movq</span> <span class="no">$0</span><span class="p">,</span> <span class="nv">%rdi</span>
</span><span class='line'>  <span class="nf">call</span> <span class="no">_exit</span>
</span></code></pre></td></tr></table></div></figure>


<p>First up is our data section <code>.data</code>.  I previously mentioned the data section
contains global non null and non 0 variables.  You can see here that the string
itself becomes part of the binary by using the unix command <code>strings</code> and
passing your executable as the first argument.  Further, if you pass your
executable to hexdump you can even see the ASCII codes in hex:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='gas'><span class='line'><span class="err">0001020</span> <span class="err">68</span> <span class="err">65</span> <span class="err">6</span><span class="nf">c</span> <span class="mi">6</span><span class="no">c</span> <span class="mi">6</span><span class="no">f</span> <span class="mi">20</span> <span class="mi">77</span> <span class="mi">6</span><span class="no">f</span> <span class="mi">72</span> <span class="mi">6</span><span class="no">c</span> <span class="mi">64</span> <span class="mi">0</span><span class="no">a</span> <span class="mi">00</span> <span class="mi">00</span> <span class="mi">00</span> <span class="mi">00</span>
</span></code></pre></td></tr></table></div></figure>


<p>Also, we can run our binary through objdump as well and see the string:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='gas'><span class='line'><span class="nf">gobjdump</span> <span class="p">-</span><span class="no">j</span> <span class="no">.data</span> <span class="p">-</span><span class="no">s</span> <span class="no">hello_world</span>
</span><span class='line'><span class="na">...</span>
</span><span class='line'><span class="nf">Contents</span> <span class="no">of</span> <span class="no">section</span> <span class="no">.data</span><span class="p">:</span>
</span><span class='line'> <span class="err">2020</span> <span class="err">68656</span><span class="nf">c6c</span> <span class="mi">6</span><span class="no">f20776f</span> <span class="mi">726</span><span class="no">c640a</span> <span class="mi">00</span>        <span class="no">hello</span> <span class="no">world..</span>
</span></code></pre></td></tr></table></div></figure>


<p>Ok so now we&rsquo;re moving an immediate value of 0x0 to %al.  %al is 1 byte wide, so
we use the b suffix on the mov instruction.  The next important point of the ABI
has to do with functions that use a variable number of arguments (varargs), like
printf does:</p>

<h2>x86-64 ABI point 3: Variadic functions need to have the number of vector arguments specified in %al.</h2>

<p>This will make printf debugging hard without.  Also in
<a href="http://www.x86-64.org/documentation_folder/abi-0.99.pdf">section 3.2.3 under passing</a>.</p>

<p>If you don&rsquo;t know what vector arguments are, no worries!  I&rsquo;m not going to cover
them.  Just know that without this, the contents of %al may work in a basic
example, where we haven&rsquo;t touched %al, %ax, %eax, or %rax yet, but we shouldn&rsquo;t
bank on it being 0x0.  In fact we shouldn&rsquo;t bank on most registers being
preserved after a function call.  Now&rsquo;s a good time to talk about volatility:</p>

<h2>x86-64 ABI point 4: Most registers are not preserved across function calls.</h2>

<p>Only %rbx, %rsp, %rbp, and %r12-%r15 (and some others) are.  These are called
&ldquo;call saved&rdquo; or &ldquo;non volatile&rdquo; registers.  The rest should be considered &ldquo;call
clobbered&rdquo; or &ldquo;volatile.&rdquo;  That means every time we invoke a call like printf,
we need to reset %al, since it is the lower 8 bits of %rax which is the 1st
return register, so it is always clobbered.</p>

<p>The next instruction loads the effective address of the string relative to the
current instruction pointer into %rdi, the first argument for printf.
<a href="https://developer.apple.com/library/mac/documentation/DeveloperTools/Reference/Assembler/040-Assembler_Directives/asm_directives.html">The .asciz directive</a> appends the null byte for us, since C strings are null
terminated.</p>

<p>With this knowledge, can you modify hello world to print &ldquo;hello world 42&rdquo;,
without putting 42 into the string in the data section?  Hint: you&rsquo;ll need a
placeholder in your string and need to know the x86-64 calling convention to
pass an additional argument to printf.</p>

<p>Finally, let&rsquo;s talk about the stack.  When we create automatic variables in C,
they are created in the segment called the stack.  On x86-64 the stack starts
at some arbitrary address (virtual memory backed by physical memory) and &ldquo;grows&rdquo;
downwards.  That is why we subtracted 8 bytes, rather than add 8 bytes to the
stack for alignment earlier.
<a href="http://eli.thegreenplace.net/2011/02/04/where-the-top-of-the-stack-is-on-x86/">The metaphor of a stack of plates is kinda upside-down</a>
as additional plates (variables) are going underneath the current
bottom plate if you can imagine, in this case.  The stack grows towards the
heap, and it is possible for them to collide if you don&rsquo;t ask the OS to expand
your data segment (sbrk).</p>

<p><img src="http://nickdesaulniers.github.io/images/stack.png"> <a href="http://mcfunley.com/the-debugger-extension-part-6-scanning-threads">credit</a></p>

<p>Let&rsquo;s say we want to call something like memset, which from <code>man memset</code> we can
see takes an address, a value to fill, and a number of bytes to fill.  The
equivalent of say this C code:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cp">#include &lt;stdio.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;string.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;inttypes.h&gt;</span>
</span><span class='line'><span class="kt">int</span> <span class="nf">main</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="kt">int8_t</span> <span class="n">array</span> <span class="p">[</span><span class="mi">16</span><span class="p">];</span>
</span><span class='line'>  <span class="n">memset</span><span class="p">(</span><span class="o">&amp;</span><span class="n">array</span><span class="p">,</span> <span class="mi">42</span><span class="p">,</span> <span class="mi">16</span><span class="p">);</span>
</span><span class='line'>  <span class="kt">int8_t</span><span class="o">*</span> <span class="n">ptr</span> <span class="o">=</span> <span class="n">array</span><span class="p">;</span>
</span><span class='line'>  <span class="n">printf</span><span class="p">(</span><span class="s">&quot;Current byte: %&quot;</span> <span class="n">PRId8</span> <span class="s">&quot;</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="o">*</span><span class="n">ptr</span><span class="p">);</span>
</span><span class='line'>  <span class="o">++</span><span class="p">(</span><span class="o">*</span><span class="n">ptr</span><span class="p">);</span>
</span><span class='line'>  <span class="n">printf</span><span class="p">(</span><span class="s">&quot;Current byte: %&quot;</span> <span class="n">PRId8</span> <span class="s">&quot;</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="o">*</span><span class="n">ptr</span><span class="p">);</span>
</span><span class='line'>  <span class="o">++</span><span class="n">ptr</span><span class="p">;</span>
</span><span class='line'>  <span class="n">printf</span><span class="p">(</span><span class="s">&quot;Current byte: %&quot;</span> <span class="n">PRId8</span> <span class="s">&quot;</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="o">*</span><span class="n">ptr</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Well, that might look like:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
</pre></td><td class='code'><pre><code class='gas'><span class='line'><span class="na">.data</span>
</span><span class='line'><span class="nl">_answer:</span>
</span><span class='line'>  <span class="na">.asciz</span> <span class="s">&quot;Current byte: %d\n&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="na">.text</span>
</span><span class='line'><span class="na">.globl</span> <span class="no">_main</span>
</span><span class='line'><span class="nl">_main:</span>
</span><span class='line'>  <span class="nf">subq</span> <span class="no">$8</span><span class="p">,</span> <span class="nv">%rsp</span>
</span><span class='line'>
</span><span class='line'>  <span class="nf">subq</span> <span class="no">$16</span><span class="p">,</span> <span class="nv">%rsp</span> <span class="c"># allocate 16B</span>
</span><span class='line'>  <span class="nf">leaq</span> <span class="p">(</span><span class="nv">%rsp</span><span class="p">),</span> <span class="nv">%rdi</span> <span class="c"># first arg, &amp;array</span>
</span><span class='line'>  <span class="nf">movq</span> <span class="no">$42</span><span class="p">,</span> <span class="nv">%rsi</span> <span class="c"># second arg, 42</span>
</span><span class='line'>  <span class="nf">movq</span> <span class="no">$16</span><span class="p">,</span> <span class="nv">%rdx</span><span class="p">,</span> <span class="c"># third arg, 16B</span>
</span><span class='line'>  <span class="nf">call</span> <span class="no">_memset</span>
</span><span class='line'>
</span><span class='line'>  <span class="nf">leaq</span> <span class="no">_answer</span><span class="p">(</span><span class="nv">%rip</span><span class="p">),</span> <span class="nv">%rdi</span>
</span><span class='line'>  <span class="nf">movq</span> <span class="no">$0</span><span class="p">,</span> <span class="nv">%rsi</span>
</span><span class='line'>  <span class="nf">movb</span> <span class="p">(</span><span class="nv">%rsp</span><span class="p">),</span> <span class="nv">%sil</span> <span class="c"># these two are equavlent to movzql (%rsp), %esi</span>
</span><span class='line'>  <span class="nf">movb</span> <span class="no">$0</span><span class="p">,</span> <span class="nv">%al</span>
</span><span class='line'>  <span class="nf">call</span> <span class="no">_printf</span>
</span><span class='line'>
</span><span class='line'>  <span class="nf">incq</span> <span class="p">(</span><span class="nv">%rsp</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="nf">leaq</span> <span class="no">_answer</span><span class="p">(</span><span class="nv">%rip</span><span class="p">),</span> <span class="nv">%rdi</span>
</span><span class='line'>  <span class="nf">movq</span> <span class="no">$0</span><span class="p">,</span> <span class="nv">%rsi</span>
</span><span class='line'>  <span class="nf">movb</span> <span class="p">(</span><span class="nv">%rsp</span><span class="p">),</span> <span class="nv">%sil</span>
</span><span class='line'>  <span class="nf">movb</span> <span class="no">$0</span><span class="p">,</span> <span class="nv">%al</span>
</span><span class='line'>  <span class="nf">call</span> <span class="no">_printf</span>
</span><span class='line'>
</span><span class='line'>  <span class="nf">leaq</span> <span class="no">_answer</span><span class="p">(</span><span class="nv">%rip</span><span class="p">),</span> <span class="nv">%rdi</span>
</span><span class='line'>  <span class="nf">movq</span> <span class="no">$0</span><span class="p">,</span> <span class="nv">%rsi</span>
</span><span class='line'>  <span class="nf">movb</span> <span class="mi">1</span><span class="p">(</span><span class="nv">%rsp</span><span class="p">),</span> <span class="nv">%sil</span>
</span><span class='line'>  <span class="nf">movb</span> <span class="no">$0</span><span class="p">,</span> <span class="nv">%al</span>
</span><span class='line'>  <span class="nf">call</span> <span class="no">_printf</span>
</span><span class='line'>
</span><span class='line'>  <span class="nf">addq</span> <span class="no">$16</span><span class="p">,</span> <span class="nv">%rsp</span> <span class="c"># clean up stack</span>
</span><span class='line'>
</span><span class='line'>  <span class="nf">movq</span> <span class="no">$0</span><span class="p">,</span> <span class="nv">%rdi</span>
</span><span class='line'>  <span class="nf">call</span> <span class="no">_exit</span>
</span></code></pre></td></tr></table></div></figure>


<p>This isn&rsquo;t a perfect example because I&rsquo;m not allocating space for the ptr on the
stack.  Instead, I&rsquo;m using the %rsp register to keep track of the address I&rsquo;m
working with.</p>

<p>What we&rsquo;re doing is allocating 16B on the stack.  Remember we need to keep %rsp
aligned on 16B boundaries, making it a multiple of 16B.  If we needed a non 16B
multiple, we could allocate more than needed on the stack, and then do some
arithmetic later when access our automatic variables.</p>

<p>For memset, we need to pass the address of our first argument.  In x86-64, the
stack grows downwards, but our variables &ldquo;point&rdquo; upwards, so %rsp and the higher
16B is the memory addresses of our array, with %rsp currently pointing to the
front.  The rest you should recognize by now as part of the calling convention.</p>

<p>In the next grouping of instructions, we want to verify that memset set every
byte to 42 (0x2A).  So what we&rsquo;ll do is copy the first byte from our array,
currently pointed to by %rsp, to the lower 8b of %rsi which is named %sil.  It&rsquo;s
important to zero out the 64b contents of %rsi first, since it may have been
clobbered by our previous call to memset.</p>

<p>Then we dereference and increment the value pointed to by our array pointer,
<code>++(*ptr)</code> or <code>++array[0]</code>.  Now <code>array[0]</code> is <code>43</code>, not <code>42</code>.</p>

<p>In the next grouping of instructions, we print the second byte of our array,
<code>array[1]</code>, and get <code>42</code> from memset.  Now we could try to increment the stack
pointer itself by one, but then the call to printf will fail, so instead when we
load the value of <code>array[1]</code>, we do some pointer arithmetic
<code>movb 1(%rsp), %sil</code>.
This is relative addressing, though you&rsquo;ve already seen this with loading the
strings.  You might wonder why I&rsquo;m not loading the byte in the other
&ldquo;direction,&rdquo; say <code>movb -1(%rsp), %sil</code>.  Well, that goes back to my point that
while the stack pointer moves down as we allocate automatic variables, their
address and memory they take up &ldquo;points up.&rdquo;</p>

<p>Finally, we clean up our automatic variable&rsquo;s allocated space on the stack.
Note that we do not zero out that memory.  A preceding function call might
overwrite that data on the stack, but until it does or unless we explicitly zero
it out, a buffer overrun could accidentally read that data a la Heartbleed.</p>

<p>Now I did promise I would talk about why the stack pointer is misaligned by 8
bytes on function entry.  That is because unoptimized functions typically have a
function prolog and epilog.  Typically, besides creating
room on the stack for automatic variables at the beginning of a function, we
typically want to save the frame AKA base pointer, %rbp, on the stack.  Since
%rbp is 64b or 8B and the push instruction will decrement the stack pointer by
8b, this will align the misaligned stack to a 16B multiple.  So
in function bodies, you&rsquo;ll typically see:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='gas'><span class='line'><span class="nl">my_func:</span>
</span><span class='line'>  <span class="nf">push</span> <span class="nv">%rbp</span>
</span><span class='line'>  <span class="nf">movq</span> <span class="nv">%rsp</span><span class="p">,</span> <span class="nv">%rbp</span>
</span><span class='line'>  <span class="c"># your code here...</span>
</span><span class='line'>  <span class="nf">popq</span> <span class="nv">%rbp</span>
</span><span class='line'>  <span class="nf">ret</span>
</span></code></pre></td></tr></table></div></figure>


<p><a href="http://www.yosefk.com/blog/getting-the-call-stack-without-a-frame-pointer.html">This great article</a>
explains that you may want to profile your running
application, or look at the call stack in a debugger, and by having a linked
list of stack frames of the function that invoked yours and it&rsquo;s caller and so
on in a dedicated register makes it trivial to know the call stack at any given
point in runtime.  Since we&rsquo;re always pushing %rbp immediately thereby saving it
on the stack and putting our stack pointer (%rsp) in the base pointer (%rbp)
(later restoring it, %rbp is call saved), we can
keep popping %rbp then moving our stack pointer to that value
to see that quux was called by bar was called by foo
(<code>foo(bar(quux()));</code>).  Now you saw that I was able to write code that clearly
worked without the three additonal instructions in the prolog and epilog, and
indeed that&rsquo;s what happens with <em>optimized</em> code emitted from your compiler.
And since GDB uses something called DWARF (adds symbols to your objects)
anyways, it isn&rsquo;t a huge issue to remove the prolog and epilog.</p>

<p>So, I think I&rsquo;ve shown you enough to get started hand writing assembly.  To
learn more, you should write the higher level C code for what you&rsquo;re trying to
do and then
<a href="http://www.expobrain.net/2013/06/16/disassembly-c-code-for-fun-part-1/">study the emitted assembly</a>
by compiling with the -S flag.  With
clang, you&rsquo;ll probably see a bunch of stack check guards for each frame, but
those just prevent stack buffer overflows.  Try compiling simple conditionals
(jump forwards), then simple loops (jump backwards) without optimizations.
Jumping to sections and calling your own functions should be pretty
easy to figure out.  Hint: don&rsquo;t duplicate section names, but the assembler will
catch this and warn you pretty explicitly.</p>

<p>Don&rsquo;t let people discourage from learning assembly because &ldquo;compilers will
always beat you.&rdquo;  &ldquo;Just use LLVM or libjit or whatever for codegen.&rdquo;  Well,
existing solutions aren&rsquo;t perfect solutions in every scenario.  Someday you
might be tasked with doing codegen because LLVM is not optimal under certain
constraints.  You&rsquo;ll never know if
you can beat them unless you try; those most comfortable are those most
vulnerable.
I&rsquo;m afraid that if enough people are turned away from
learning the lower levels of programming because the higher level is
unquestionably
better, then assembly will ultimately be forgotten and the computer becomes a
black box again.  This is something that troubles me and that I see occurring
around me frequently; a lot of devs new to web
development conflate jquery with JavaScript, and Three.js with WebGL.  If you&rsquo;re
around the Bay Area, I&rsquo;ll be giving a talk at
<a href="http://html5devconf.com/">HTML5DevConf</a>
on May 22 demystifying Raw WebGL.  You should come and check it out.</p>

<p>In summary, remember:</p>

<ul>
<li>The stack pointer needs to be aligned by 16B multiples when calling another function.</li>
<li>Calling convention dictates passing arguments in %rdi, %rsi, %rdx, %rcx, %r8, %r9, then stack.</li>
<li>%al needs the number of vector arguments for variadic functions.</li>
<li>Know which registers are call saved (%rbx, %rsp, %rbp, and %r12-%r15 (and some others)) and call clobbered.</li>
</ul>


<p>Closing thoughts by Dan:</p>

<blockquote><p>To me, machine code doesn&#8217;t feel analogous to this concept of the divine name. I certainly wouldn&#8217;t describe it as &#8220;like a flawless glass; a light of total understanding streamed through it&#8221;. Even if you strip away all the accidental complexity, machine code is still permeated by mundane implementation-oriented concerns. Also, the abstractions which we use to organize and &#8220;understand&#8221; the program are gone; information is lost.</p><p>My imagination of a divine language looks a lot more like an idealized and cleaned-up LISP. It&#8217;d be capable of representing all known means of abstraction and combination (in the SICP sense), it might be thought of as a kind of super-language of which all of our real-world languages are just messy subsets.</p><footer><strong>Dan Gohman</strong></footer></blockquote>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Write a Test Case]]></title>
    <link href="http://nickdesaulniers.github.io/blog/2014/03/01/write-a-test-case/"/>
    <updated>2014-03-01T13:22:00-08:00</updated>
    <id>http://nickdesaulniers.github.io/blog/2014/03/01/write-a-test-case</id>
    <content type="html"><![CDATA[<p>Your application just broke, oh no!  It couldn&rsquo;t have been <em>your</em> code, right?</p>

<p>I&rsquo;ve always had trouble spotting mistakes in my own work such as spelling,
grammar, mathematical, or even in programming.  With spelling or grammar,
office applications quickly pick up on my mistakes and underline them for me,
but most of my mistakes come from my own hubris.  I&rsquo;m confident in what I do,
and that gets me in trouble when I make little mistakes.  I&rsquo;m confident that I
solved this problem correctly and didn&rsquo;t make any small mistakes.  As a kid
competing in timed math competitions, I quickly learned that reviewing your
work cost time, so it was important to recognize where common mistakes would
crop up on certain problems and spend slightly extra time the first time
through those problem areas, rather than double checking the work in its
entirety, unless I had the time to spare.  Measure twice, cut once.</p>

<p>The same is true for programming.  Writing test cases is time consuming, and if
time is money, then it could be said that writing tests is costly.  There&rsquo;s
probably a logical fallacy in there.  In general, we hope that the time-cost of
writing test
cases will be recuperated by the time-cost of bugs caught, though it&rsquo;s not easy
to measure the time-cost of averted bugs.  I&rsquo;m all for test cases.  I think
that
<a href="http://sqlite.org/testing.html#coverage">SQLite having 100% branch coverage</a>
is incredible, truly an lofty
achievement.  People get bogged down in arguments over type systems where
testing is more of a must for languages without a compiler to catch certain
bugs.</p>

<p>Ok, so going back to your code, something is wrong.  But we&rsquo;re confident it
couldn&rsquo;t be <em>our</em> code.  Maybe it&rsquo;s one of those open source modules I&rsquo;m using
not being tested enough, or that pesky browser implementation, or this damned
OS.  It couldn&rsquo;t be <em>my</em> code.</p>

<p><strong>Prove it.</strong></p>

<p>I see bug reports all the time where people say your X breaks my Y, but when
asked to provide Y they can&rsquo;t for whatever software licensing reason.  The bug
resolver (person who is enabled to fix said bug in X), doesn&rsquo;t know at this
point whether the bug reporter (developer of Y) did their homework; the bug is
unconfirmed.  Both reporter and resolver are suspicious of each others&#8217; code.
<em>I</em> don&rsquo;t make silly mistakes, right?</p>

<p><img src="http://nickdesaulniers.github.io/images/dude.jpg"></p>

<p>So it&rsquo;s up to the resolver to work out a test case.  Being able to reproduce
said issue is the first goal to resolving a bug.  Just like scientific
statements aren&rsquo;t taken as fact until reproducible, so too will this bug be
merely conjecture at this point.  It kills me when the bug resolver closes an
issue because it <em>works for me</em>.  Nothing boils my blood more; I took the time
to try and help you and wasn&rsquo;t rewarded on some level so I feel that I wasted
my time.  But from where you stand the resolver is not correct, so again I
say&hellip;</p>

<p><strong>Prove it.</strong></p>

<p>I think that it&rsquo;s super hard to get meaningful feedback from users.  It&rsquo;s hard
for them to express why they&rsquo;re frustrated.  We as software developers don&rsquo;t
always point them in the right direction.  As users can have wide ranges of
technical capabilities, sometimes we as more technical oriented people have to
do a little hand holding.  For instance, from Firefox, how many hops does it
take to get from the application&rsquo;s menus to their open bug tracker,
<a href="https://bugzilla.mozilla.org/">bugzilla</a>?
Where can I report an issue?  How do I report an issue?
Do I annoy the hell out of the user until they rate my app?
Users might be complaining on Twitter, but that&rsquo;s sure as hell not where
devlopers are looking for bug reports.
Enabling the user to provide feedback could be
viewed as a double edged sword.  Can I make meaningful conclusions from the
torrent of feedback I&rsquo;m now getting?  Did I structure my form in such a way to
ask the right questions?  Should we make our issue tracker public?  Should we
make security issues that could harm users, if more widely understood, public?
Public to fellow employees, even?  What did you expect to happen, and is that
what actually happened?  This rabbit hole goes deep.</p>

<p>The other day, I was writing a patch for a large application that was developed
by someone else and that I still don&rsquo;t fully comprehend in its entirety. My
patch should have worked, why wasn&rsquo;t it working?  Probably something in this
person&rsquo;s code right?  Sure enough, I wrote a simple test case to eliminate
everything but the control variables, and it turns out <em>I was wrong</em>.</p>

<p>It&rsquo;s hard to get users to
do more than the bare minimum to report an issue, even at all, but to prevent
the issue from being ignored or closed because it works for the developer in
their environment, take the time to report it correctly the first time.
As someone who understands technology more than the average person, take the
time to write a cut down test case that
exposes the issue. The developer who looks at the issue will be grateful;
instead of wasting their time with something that may not even be a bug, you&rsquo;ve
just done something that would have to be done anyways if it is indeed a bug.
You might find that a reduced code size shows that it&rsquo;s in
fact not an issue with someone else&rsquo;s code, but in fact a simple mistake you
made somewhere in your monolithic application.  Or it might be exactly the
evidence you need to get someone&rsquo;s attention to fix said problem.  That test
case might even be included in the latest test suite.  Either way, you have now
proved beyond a reasonable doubt that the issue does not lie in your fault.</p>

<p><strong>Write a Test Case for Your Next Bug Report or Issue.</strong></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Function.prototype.bind Edge Cases]]></title>
    <link href="http://nickdesaulniers.github.io/blog/2013/09/26/function-dot-prototype-dot-bind-edge-cases/"/>
    <updated>2013-09-26T21:00:00-07:00</updated>
    <id>http://nickdesaulniers.github.io/blog/2013/09/26/function-dot-prototype-dot-bind-edge-cases</id>
    <content type="html"><![CDATA[<p>ECMAScript 5&rsquo;s
<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/bind">Function.prototype.bind</a>
is a great tool that&rsquo;s implemented in all
<a href="http://kangax.github.io/es5-compat-table/#Function.prototype.bind">modern browser JavaScript engines</a>.
It allows you to modify the context,
<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/this">this</a>,
of a function when it is evaluated in the future.  Knowing what <code>this</code> refers to
in various contexts is key to being a professional JavaScript developer; don&rsquo;t
show up to an interview without knowing all about it.</p>

<p>Here&rsquo;s a common use case that developers need to watch for.  Can you spot the
mistake?</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">person</span> <span class="o">=</span> <span class="s2">&quot;Bill&quot;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">obj</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">person</span><span class="o">:</span> <span class="s2">&quot;Nick&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">hi</span><span class="o">:</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&quot;Hi &quot;</span> <span class="o">+</span> <span class="k">this</span><span class="p">.</span><span class="nx">person</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="nb">window</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="s2">&quot;DOMContentLoaded&quot;</span><span class="p">,</span> <span class="nx">obj</span><span class="p">.</span><span class="nx">hi</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>Ooops!!! Turns out that since we added the event listener to the window object,
<code>this</code> in the event handler or callback refers to <code>window</code>.  So this code prints
<code>"Hi Bill"</code> instead of <code>"Hi Nick"</code>.  We could wrap <code>obj.hi</code> in an anonymous function:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nb">window</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="s2">&quot;DOMContentLoaded&quot;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">obj</span><span class="p">.</span><span class="nx">hi</span><span class="p">();</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>But that is so needlessly verbose and what we were trying to avoid in the first
place.  The three functions you should know for modifying <code>this</code> (a question I
ask all
my interview candidates) are
<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/call">Function.prototype.call</a>,
<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/apply">Function.prototype.apply</a>,
and
<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/bind">Function.prototype.bind</a>.
<code>call</code> is variadic, while <code>apply</code> takes an array of
arguments, but the two both immediately invoke the function.  We don&rsquo;t want to
do that just yet.  The fix we need is <code>Function.prototype.bind</code>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nb">window</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="s2">&quot;DOMContentLoaded&quot;</span><span class="p">,</span> <span class="nx">obj</span><span class="p">.</span><span class="nx">hi</span><span class="p">.</span><span class="nx">bind</span><span class="p">(</span><span class="nx">obj</span><span class="p">));</span>
</span></code></pre></td></tr></table></div></figure>


<p>There, now isn&rsquo;t that nice and short?  Instead of saving <code>this</code> as another
variable then closing over it, you can instead use <code>bind</code>!</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">obj</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">person</span><span class="o">:</span> <span class="s2">&quot;Nick&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">wait</span><span class="o">:</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">self</span> <span class="o">=</span> <span class="k">this</span><span class="p">;</span>
</span><span class='line'>    <span class="nx">someButton</span><span class="p">.</span><span class="nx">onclick</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">self</span><span class="p">.</span><span class="nx">person</span> <span class="o">+</span> <span class="s2">&quot; clicked!&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="p">};</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>becomes</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">obj</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">person</span><span class="o">:</span> <span class="s2">&quot;Nick&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">wait</span><span class="o">:</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">someButton</span><span class="p">.</span><span class="nx">onclick</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">person</span> <span class="o">+</span> <span class="s2">&quot; clicked!&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}.</span><span class="nx">bind</span><span class="p">(</span><span class="k">this</span><span class="p">);</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>No need to store <code>this</code> into <code>self</code>, then close over it.  One great shortcut I
use all the time is creating an alias for <code>document.getElementById</code>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">$</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">.</span><span class="nx">bind</span><span class="p">(</span><span class="nb">document</span><span class="p">);</span>
</span><span class='line'><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;someElementsId&#39;</span><span class="p">).</span><span class="nx">doSomething</span><span class="p">();</span>
</span><span class='line'><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;anotherElement&#39;</span><span class="p">).</span><span class="nx">doSomethingElse</span><span class="p">();</span>
</span><span class='line'><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;aThirdElement&#39;</span><span class="p">).</span><span class="nx">doSomethingDifferent</span><span class="p">();</span>
</span><span class='line'><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;theFifthElementOops&#39;</span><span class="p">).</span><span class="nx">doSomethingFun</span><span class="p">();</span>
</span></code></pre></td></tr></table></div></figure>


<p>Why did I bind <code>getElementById</code> back to <code>document</code>?  Try it without the call to
bind.  Any luck?</p>

<p><code>bind</code> can also be great for partially applying functions, too.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">function</span> <span class="nx">add</span> <span class="p">(</span><span class="nx">a</span><span class="p">,</span> <span class="nx">b</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&quot;a: &quot;</span> <span class="o">+</span> <span class="nx">a</span><span class="p">);</span>
</span><span class='line'>  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&quot;b: &quot;</span> <span class="o">+</span> <span class="nx">b</span><span class="p">);</span>
</span><span class='line'>  <span class="k">return</span> <span class="nx">a</span> <span class="o">+</span> <span class="nx">b</span><span class="p">;</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">todo</span> <span class="o">=</span> <span class="nx">add</span><span class="p">.</span><span class="nx">bind</span><span class="p">(</span><span class="kc">null</span><span class="p">,</span> <span class="mi">4</span><span class="p">);</span>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">todo</span><span class="p">(</span><span class="mi">7</span><span class="p">));</span>
</span></code></pre></td></tr></table></div></figure>


<p>will print</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">a</span><span class="o">:</span> <span class="mi">4</span>
</span><span class='line'><span class="nx">b</span><span class="o">:</span> <span class="mi">7</span>
</span><span class='line'><span class="mi">11</span>
</span></code></pre></td></tr></table></div></figure>


<p>What <code>Function.prototype.bind</code> is essentially doing is wrapping <code>add</code> in a
function that essentially looks like:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">todo</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">add</span><span class="p">.</span><span class="nx">apply</span><span class="p">(</span><span class="kc">null</span><span class="p">,</span> <span class="p">[</span><span class="mi">4</span><span class="p">].</span><span class="nx">concat</span><span class="p">(</span><span class="nb">Array</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">slice</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="nx">arguments</span><span class="p">)));</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>The array has the captured arguments (just <code>4</code>), and is converting <code>todo</code>&rsquo;s
<code>arguments</code> into an array (a common idiom for converting &ldquo;Array-like&rdquo; objects
into
Arrays), then joining (<code>concat</code>) them and invoking the bound function (<code>apply</code>)
with
the value for <code>this</code> (in this case, <code>null</code>).</p>

<p>In fact, if you look at
<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/bind#Compatibility">the compatibility section of the MDN page for bind</a>,
you&rsquo;ll see a function that returns a function that is essentially the above.
One caveat is that this approach only allows you to partially apply variables in
order.</p>

<p>So <code>bind</code> is a great addition to the language.  Now to the point I wanted to
make;
there are edge cases when <code>bind</code> doesn&rsquo;t work or might trip you up.  The first
is that <code>bind</code>
evaluates
its <code>arguments</code> when bound, not when invoked.  The other is that <code>bind</code> returns
a new
function, always.  And the final is to be careful binding to variadic functions
when you don&rsquo;t intend to use all of the passed in variables.  Um, duh right?
Well, let me show you three examples that have bitten me (recently).  The first
is with ajax calls.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">function</span> <span class="nx">crunch</span> <span class="p">(</span><span class="nx">data</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1">// operate on data</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">xhr</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">XMLHttpRequest</span><span class="p">;</span>
</span><span class='line'><span class="nx">xhr</span><span class="p">.</span><span class="nx">open</span><span class="p">(</span><span class="s2">&quot;GET&quot;</span><span class="p">,</span> <span class="s2">&quot;data.json&quot;</span><span class="p">);</span>
</span><span class='line'><span class="nx">xhr</span><span class="p">.</span><span class="nx">onload</span> <span class="o">=</span> <span class="nx">crunch</span><span class="p">.</span><span class="nx">bind</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">response</span><span class="p">);</span>
</span><span class='line'><span class="nx">xhr</span><span class="p">.</span><span class="nx">send</span><span class="p">();</span>
</span></code></pre></td></tr></table></div></figure>


<p>Oops, while I do want to operate on <code>this.result</code> within <code>crunch</code> with <code>this</code>
referring to <code>xhr</code>, <code>this</code> at the time of binding was referring to <code>window</code>!
Let&rsquo;s
hope <code>window.results</code> is <code>undefined</code>!  What if we changed <code>this.result</code> with
<code>xhr.result</code>?  Well, we&rsquo;re no longer referring to the <code>window</code> object, but
<code>xhr.result</code> is evaluated at bind time (and for an unsent <code>XMLHttpRequest</code>
object,
is <code>null</code>), so we&rsquo;ve bound <code>null</code> as the first argument.  We must delay the
handling
of <code>xhr.onload</code>; either use an anonymous function inline or named function to
control nesting depth.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">xhr</span><span class="p">.</span><span class="nx">onload</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">crunch</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">result</span><span class="p">);</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>The next is that <code>bind</code> always returns a new function.  Dude, it says that in
the docs,
<a href="http://xkcd.com/293/">RTFM</a>.
Yeah I know, but this case still caught me.  When removing an event
listener, you need to supply the <strong>same</strong> handler function.  Example, a <code>once</code>
function:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">function</span> <span class="nx">todo</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nb">document</span><span class="p">.</span><span class="nx">removeEventListener</span><span class="p">(</span><span class="s2">&quot;myCustomEvent&quot;</span><span class="p">,</span> <span class="nx">todo</span><span class="p">);</span>
</span><span class='line'>  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">person</span><span class="p">);</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="nb">document</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="s2">&quot;myCustomEvent&quot;</span><span class="p">,</span> <span class="nx">todo</span><span class="p">.</span><span class="nx">bind</span><span class="p">({</span> <span class="nx">person</span><span class="o">:</span> <span class="s2">&quot;Nick&quot;</span> <span class="p">}));</span>
</span></code></pre></td></tr></table></div></figure>


<p>Try firing <code>myCustomEvent</code> twice, see what happens!  <code>"Nick"</code> is logged twice.
A <code>once</code> function that handles two separate events is not very good.  In fact,
it will continue
to handle events, since <code>document</code> does not have <code>todo</code> as an event handler for
<code>myCustomEvent</code>
events.  The event listener you bound was a new function; <code>bind</code> always returns
a new function.  The solution:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">todo</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">person</span><span class="p">);</span>
</span><span class='line'>  <span class="nb">document</span><span class="p">.</span><span class="nx">removeEventListener</span><span class="p">(</span><span class="s2">&quot;myCustomEvent&quot;</span><span class="p">,</span> <span class="nx">todo</span><span class="p">);</span>
</span><span class='line'><span class="p">}.</span><span class="nx">bind</span><span class="p">({</span> <span class="nx">person</span><span class="o">:</span> <span class="s2">&quot;Nick&quot;</span> <span class="p">});</span>
</span><span class='line'><span class="nb">document</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="s2">&quot;myCustomEvent&quot;</span><span class="p">,</span> <span class="nx">todo</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>That would be a good interview question.  The final gotcha is with functions
that are variadic.  Extending one of my earlier examples:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">obj</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">person</span><span class="o">:</span> <span class="s2">&quot;Nick&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">wait</span><span class="o">:</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">someButton</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">createElement</span><span class="p">(</span><span class="s2">&quot;button&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="nx">someButton</span><span class="p">.</span><span class="nx">onclick</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">person</span> <span class="o">+</span> <span class="s2">&quot; clicked!&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}.</span><span class="nx">bind</span><span class="p">(</span><span class="k">this</span><span class="p">);</span>
</span><span class='line'>    <span class="nx">someButton</span><span class="p">.</span><span class="nx">click</span><span class="p">();</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'><span class="nx">obj</span><span class="p">.</span><span class="nx">wait</span><span class="p">();</span>
</span></code></pre></td></tr></table></div></figure>


<p>Let&rsquo;s say I thought I could use bind to simplify the <code>onclick</code> using the trick I
did with <code>document.getElementById</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">obj</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">person</span><span class="o">:</span> <span class="s2">&quot;Nick&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">wait</span><span class="o">:</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">someButton</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">createElement</span><span class="p">(</span><span class="s2">&quot;button&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="nx">someButton</span><span class="p">.</span><span class="nx">onclick</span> <span class="o">=</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">.</span><span class="nx">bind</span><span class="p">(</span><span class="nx">console</span><span class="p">,</span> <span class="k">this</span><span class="p">.</span><span class="nx">person</span> <span class="o">+</span> <span class="s2">&quot; clicked!&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="nx">someButton</span><span class="p">.</span><span class="nx">click</span><span class="p">();</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'><span class="nx">obj</span><span class="p">.</span><span class="nx">wait</span><span class="p">();</span>
</span></code></pre></td></tr></table></div></figure>


<p>Can you guess what this prints?  It does prints the expected, but with an
unexpected addition.  Think about what I said about variadic functions.  What
might be wrong here?</p>

<p>Turns out this prints
<code>"Nick clicked! [object MouseEvent]"</code>  This one took me a while to think
through, but luckily I had other experiences with <code>bind</code> that helped me understand
why this occurred.</p>

<p><code>console.log</code> is variadic, so it prints all of its arguments.  When we called
<code>bind</code>
on <code>console.log</code>, we set the <code>onclick</code> handler to be a new function that applied
that expected output with any additional arguments.  Well, <code>onclick</code> handlers are
passed a <code>MouseEvent</code> object (think <code>e.target</code>), which winds up being passed as
the second
argument to <code>console.log</code>.  If this was the example with <code>add</code> from earlier,
<code>this.person + " clicked!"</code> would be the <code>4</code> and the <code>MouseEvent</code> would be the
<code>7</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">someButton</span><span class="p">.</span><span class="nx">onclick</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">.</span><span class="nx">apply</span><span class="p">(</span><span class="nx">console</span><span class="p">,</span> <span class="p">[</span><span class="s2">&quot;Nick clicked!&quot;</span><span class="p">].</span><span class="nx">concat</span><span class="p">([</span><span class="nx">e</span><span class="p">]));</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>I love <code>bind</code>, but sometimes, it will get you.  What are some examples of times
when you&rsquo;ve been bitten by <code>bind</code>?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Making great Node.js modules with CoffeeScript]]></title>
    <link href="http://nickdesaulniers.github.io/blog/2013/08/28/making-great-node-dot-js-modules-with-coffeescript/"/>
    <updated>2013-08-28T10:51:00-07:00</updated>
    <id>http://nickdesaulniers.github.io/blog/2013/08/28/making-great-node-dot-js-modules-with-coffeescript</id>
    <content type="html"><![CDATA[<p><a href="http://nodejs.org/">Node.js</a>
is a great runtime for writing applications in JavaScript, the language
I primarily develop in.
<a href="http://coffeescript.org/">CoffeeScript</a>
is a programming language that compiles
to JavaScript.  Why would we write a reusable piece of code, a
<a href="http://nodejs.org/api/modules.html">module</a>
, in
CoffeeScript?  CoffeeScript is a very high level language and
<a href="http://railscasts.com/episodes/267-coffeescript-basics">beautifully brings together</a>
my favorite aspects of JavaScript,
Ruby, and Python.  In this tutorial, I&rsquo;ll show you how I create reusable open
source modules for Node.js from CoffeeScript, which is something I recently
discovered while creating a
<a href="https://github.com/nickdesaulniers/javascript-playlist-parser">playlist parser module</a>.
The point is to focus on how to turn a quick hack into a nicely laid
out Node.js module.</p>

<p>The steps are as follows:</p>

<ol>
<li>Turn an idea into a git repo.</li>
<li>Add directory structure.</li>
<li>Split library functions from testing.</li>
<li>Add a Build script.</li>
<li>Create node module.</li>
<li>Add LICENSE and README.</li>
<li>Publish.</li>
</ol>


<p>First thing&rsquo;s first, we have to have an idea.  It doesn&rsquo;t have to be
revolutionary, just do one thing and do it well.  That is the first rule of
<a href="http://www.faqs.org/docs/artu/ch01s06.html">UNIX <del>fightclub</del> philosophy</a>,
which resonates well within
<a href="http://blog.izs.me/post/48281998870/unix-philosophy-and-node-js">the Node.js community</a>.
When I&rsquo;m hacking on
something, I start out with a single file to test something out.  Then I
progressively refine the example until it&rsquo;s something reusable.  That way, I
can reuse it, others can reuse it, others can learn from it, and the world can
be a better place.</p>

<p>For this tutorial, I&rsquo;ll show you my process for creating a binding for
<a href="http://nanomsg.org/index.html">nanomsg</a>,
the latest scalability protocol library from the creator of
<a href="http://zeromq.org/">ZeroMQ</a>,
<a href="http://250bpm.com/">Martin Sústrik</a>.
I had played with ZeroMQ in the past and thought that it was really
awesome, and I was excited to see a new library from it&rsquo;s creator, based on C,
since I also really enjoyed his post on why he
<a href="http://250bpm.com/blog:4">shouldn&rsquo;t have written it in C++</a>.</p>

<p>So messing around real quick, let&rsquo;s make sure we have node up to date.  I like
to use
<a href="https://github.com/creationix/nvm">nvm</a>
and the latest stable minor version of node (stable versions have
even minor patch numbers where versions are in the format <code>major.minor.patch</code>,
so v0.11.0 is unstable).  <code>node -v</code> &ndash;> v0.10.17</p>

<p>Then I need to download and install the library that I&rsquo;ll be dynamically
linking to, build, and install it.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>curl -O http://download.nanomsg.org/nanomsg-0.1-alpha.zip &amp;&amp; \
</span><span class='line'>unzip nanomsg-0.1-alpha.zip &amp;&amp; \
</span><span class='line'>cd nanomsg-0.1-alpha &amp;&amp; \
</span><span class='line'>mkdir build &amp;&amp; \
</span><span class='line'>cd build &amp;&amp; \
</span><span class='line'>../configure &amp;&amp; \
</span><span class='line'>make &amp;&amp; \
</span><span class='line'>make install
</span></code></pre></td></tr></table></div></figure>


<p>We&rsquo;ll use
<a href="https://github.com/rbranson/node-ffi">node&rsquo;s FFI module</a>
to interface with the dynamically linked library,
because it&rsquo;s easier to write bindings than using
<a href="http://nodejs.org/api/addons.html">native addons</a>,
and
<a href="https://github.com/rvagg/node-addon-examples/blob/master/README.md#compatibility-notes">v8&rsquo;s API has recently changed causing some headaches for native extensions</a>.</p>

<p><code>npm install ffi</code></p>

<p>We&rsquo;ll be writing the example in CoffeeScript.</p>

<p><code>npm install -g coffee-script</code></p>

<p>Now to mess around we can create main.coffee based on
<a href="https://github.com/250bpm/cppnanomsg/blob/9becc3d5116ab33a7d2c5f06d68a8fea1b781194/binding.cpp#L29">the C++ binding&rsquo;s example</a>:</p>

<figure class='code'><figcaption><span>main.coffee</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="nv">ffi = </span><span class="nx">require</span> <span class="s">&#39;ffi&#39;</span>
</span><span class='line'><span class="nv">assert = </span><span class="nx">require</span> <span class="s">&#39;assert&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">AF_SP = </span><span class="mi">1</span>
</span><span class='line'><span class="nv">NN_PAIR = </span><span class="mi">16</span>
</span><span class='line'>
</span><span class='line'><span class="nv">nanomsg = </span><span class="nx">ffi</span><span class="p">.</span><span class="nx">Library</span> <span class="s">&#39;libnanomsg&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="nv">nn_socket: </span><span class="p">[</span> <span class="s">&#39;int&#39;</span><span class="p">,</span> <span class="p">[</span> <span class="s">&#39;int&#39;</span><span class="p">,</span> <span class="s">&#39;int&#39;</span> <span class="p">]]</span>
</span><span class='line'>  <span class="nv">nn_bind: </span><span class="p">[</span> <span class="s">&#39;int&#39;</span><span class="p">,</span> <span class="p">[</span> <span class="s">&#39;int&#39;</span><span class="p">,</span> <span class="s">&#39;string&#39;</span> <span class="p">]]</span>
</span><span class='line'>  <span class="nv">nn_connect: </span><span class="p">[</span> <span class="s">&#39;int&#39;</span><span class="p">,</span> <span class="p">[</span><span class="s">&#39;int&#39;</span><span class="p">,</span> <span class="s">&#39;string&#39;</span> <span class="p">]]</span>
</span><span class='line'>  <span class="nv">nn_send: </span><span class="p">[</span> <span class="s">&#39;int&#39;</span><span class="p">,</span> <span class="p">[</span><span class="s">&#39;int&#39;</span><span class="p">,</span> <span class="s">&#39;pointer&#39;</span><span class="p">,</span> <span class="s">&#39;int&#39;</span><span class="p">,</span> <span class="s">&#39;int&#39;</span><span class="p">]]</span>
</span><span class='line'>  <span class="nv">nn_recv: </span><span class="p">[</span> <span class="s">&#39;int&#39;</span><span class="p">,</span> <span class="p">[</span><span class="s">&#39;int&#39;</span><span class="p">,</span> <span class="s">&#39;pointer&#39;</span><span class="p">,</span> <span class="s">&#39;int&#39;</span><span class="p">,</span> <span class="s">&#39;int&#39;</span><span class="p">]]</span>
</span><span class='line'>  <span class="nv">nn_errno: </span><span class="p">[</span> <span class="s">&#39;int&#39;</span><span class="p">,</span> <span class="p">[]]</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># test</span>
</span><span class='line'><span class="nv">s1 = </span><span class="nx">nanomsg</span><span class="p">.</span><span class="nx">nn_socket</span> <span class="nx">AF_SP</span><span class="p">,</span> <span class="nx">NN_PAIR</span>
</span><span class='line'><span class="nx">assert</span> <span class="nx">s1</span> <span class="o">&gt;=</span> <span class="mi">0</span><span class="p">,</span> <span class="s">&#39;s1: &#39;</span> <span class="o">+</span> <span class="nx">nanomsg</span><span class="p">.</span><span class="nx">nn_errno</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'><span class="nv">ret = </span><span class="nx">nanomsg</span><span class="p">.</span><span class="nx">nn_bind</span> <span class="nx">s1</span><span class="p">,</span> <span class="s">&#39;inproc://a&#39;</span>
</span><span class='line'><span class="nx">assert</span> <span class="nx">ret</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">,</span> <span class="s">&#39;bind&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">s2 = </span><span class="nx">nanomsg</span><span class="p">.</span><span class="nx">nn_socket</span> <span class="nx">AF_SP</span><span class="p">,</span> <span class="nx">NN_PAIR</span>
</span><span class='line'><span class="nx">assert</span> <span class="nx">s2</span> <span class="o">&gt;=</span> <span class="mi">0</span><span class="p">,</span> <span class="s">&#39;s2: &#39;</span> <span class="o">+</span> <span class="nx">nanomsg</span><span class="p">.</span><span class="nx">nn_errno</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'><span class="nv">ret = </span><span class="nx">nanomsg</span><span class="p">.</span><span class="nx">nn_connect</span> <span class="nx">s2</span><span class="p">,</span> <span class="s">&#39;inproc://a&#39;</span>
</span><span class='line'><span class="nx">assert</span> <span class="nx">ret</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">,</span> <span class="s">&#39;connect&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">msg = </span><span class="k">new</span> <span class="nx">Buffer</span> <span class="s">&#39;hello&#39;</span>
</span><span class='line'><span class="nv">ret = </span><span class="nx">nanomsg</span><span class="p">.</span><span class="nx">nn_send</span> <span class="nx">s2</span><span class="p">,</span> <span class="nx">msg</span><span class="p">,</span> <span class="nx">msg</span><span class="p">.</span><span class="nx">length</span><span class="p">,</span> <span class="mi">0</span>
</span><span class='line'><span class="nx">assert</span> <span class="nx">ret</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">,</span> <span class="s">&#39;send&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">recv = </span><span class="k">new</span> <span class="nx">Buffer</span> <span class="nx">msg</span><span class="p">.</span><span class="nx">length</span>
</span><span class='line'><span class="nv">ret = </span><span class="nx">nanomsg</span><span class="p">.</span><span class="nx">nn_recv</span> <span class="nx">s1</span><span class="p">,</span> <span class="nx">recv</span><span class="p">,</span> <span class="nx">recv</span><span class="p">.</span><span class="nx">length</span><span class="p">,</span> <span class="mi">0</span>
</span><span class='line'><span class="nx">assert</span> <span class="nx">ret</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">,</span> <span class="s">&#39;recv&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span> <span class="nx">recv</span><span class="p">.</span><span class="nx">toString</span><span class="p">()</span>
</span><span class='line'><span class="nx">assert</span> <span class="nx">msg</span><span class="p">.</span><span class="nx">toString</span><span class="p">()</span> <span class="o">is</span> <span class="nx">recv</span><span class="p">.</span><span class="nx">toString</span><span class="p">(),</span> <span class="s">&#39;received message did not match sent&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>coffee main.coffee</code> &ndash;> hello</p>

<p>This quick example shows that we have something working.  Currently our working
directory should look like:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>tree -L 2
</span><span class='line'>.
</span><span class='line'>├── main.coffee
</span><span class='line'>└── node_modules
</span><span class='line'>    └── ffi
</span><span class='line'>
</span><span class='line'>2 directories, 1 file
</span></code></pre></td></tr></table></div></figure>


<h2>Turn an idea into a git repo</h2>

<p>Next up is to create a repository using a version control system like
<a href="http://git-scm.com/">git</a> and
start saving our work.
<a href="http://www.codinghorror.com/blog/2008/08/check-in-early-check-in-often.html">Check in early, check in often</a>.</p>

<p>Let&rsquo;s add a .gitignore so that were not adding files that really don&rsquo;t need to
be committed.  The node_modules folder is unnecessary because when this node
module is installed, its dependencies will be recursively installed, so
there&rsquo;s no need to commit them to source control.  The swap files are because I
use
<a href="http://www.vim.org/">vim</a>
and I accidentally commit the swap files from open buffers all the time
like a noob.</p>

<figure class='code'><figcaption><span>.gitignore</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>node_modules/
</span><span class='line'>*.swp
</span></code></pre></td></tr></table></div></figure>


<p>Let&rsquo;s turn this into a git repo:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>git init &amp;&amp; \
</span><span class='line'>git add . &amp;&amp; \
</span><span class='line'>git commit -am “initial commit”
</span></code></pre></td></tr></table></div></figure>


<p>Up on github, let&rsquo;s <a href="https://github.com/new">create an uninitialized repo</a>
and push to it:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>git remote add origin git@github.com:nickdesaulniers/node-nanomsg.git &amp;&amp; \
</span><span class='line'>git push -u origin master
</span></code></pre></td></tr></table></div></figure>


<p>So we
<a href="https://github.com/nickdesaulniers/node-nanomsg/commit/19211e7520de9384a0d5b0ce4c08a623c4f2e0b9">have</a>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>tree -L 2 -a
</span><span class='line'>.
</span><span class='line'>├── .gitignore
</span><span class='line'>├── main.coffee
</span><span class='line'>└── node_modules
</span><span class='line'>    └── ffi
</span><span class='line'>
</span><span class='line'>2 directories, 2 files
</span></code></pre></td></tr></table></div></figure>


<h2>Add directory structure</h2>

<p>Now that we have our repo under version control, let&rsquo;s start adding some
structure. Let&rsquo;s create
<code>src/</code>, <code>lib/</code>, and <code>test/</code> directories.  Our CoffeeScript will live in
<code>src/</code>, compiled JavaScript will be in <code>lib/</code>, and our test code will be in
<code>test/</code>.</p>

<p><code>mkdir src lib test</code></p>

<h2>Split library functions from testing</h2>

<p>Now let&rsquo;s move a copy of <code>main.coffee</code> into <code>src/</code> and one into <code>test/</code>.  We
are going to split the library definition away from the testing logic.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>cp main.coffee test/test.coffee &amp;&amp; \
</span><span class='line'>git add test/test.coffee &amp;&amp; \
</span><span class='line'>git mv main.coffee src/nanomsg.coffee
</span></code></pre></td></tr></table></div></figure>


<p>This way <code>git status</code> tells us:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'># On branch master
</span><span class='line'># Changes to be committed:
</span><span class='line'>#   (use &quot;git reset HEAD &lt;file&gt;...&quot; to unstage)
</span><span class='line'>#
</span><span class='line'># renamed:    main.coffee -&gt; src/nanomsg.coffee
</span><span class='line'># new file:   test/test.coffee
</span><span class='line'>#
</span></code></pre></td></tr></table></div></figure>


<p>Let&rsquo;s edit src/main.coffee to look like:</p>

<figure class='code'><figcaption><span>src/main.coffee</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="nv">ffi = </span><span class="nx">require</span> <span class="s">&#39;ffi&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">exports = module.exports = </span><span class="nx">ffi</span><span class="p">.</span><span class="nx">Library</span> <span class="s">&#39;libnanomsg&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="nv">nn_socket: </span><span class="p">[</span> <span class="s">&#39;int&#39;</span><span class="p">,</span> <span class="p">[</span> <span class="s">&#39;int&#39;</span><span class="p">,</span> <span class="s">&#39;int&#39;</span> <span class="p">]]</span>
</span><span class='line'>  <span class="nv">nn_bind: </span><span class="p">[</span> <span class="s">&#39;int&#39;</span><span class="p">,</span> <span class="p">[</span> <span class="s">&#39;int&#39;</span><span class="p">,</span> <span class="s">&#39;string&#39;</span> <span class="p">]]</span>
</span><span class='line'>  <span class="nv">nn_connect: </span><span class="p">[</span> <span class="s">&#39;int&#39;</span><span class="p">,</span> <span class="p">[</span><span class="s">&#39;int&#39;</span><span class="p">,</span> <span class="s">&#39;string&#39;</span> <span class="p">]]</span>
</span><span class='line'>  <span class="nv">nn_send: </span><span class="p">[</span> <span class="s">&#39;int&#39;</span><span class="p">,</span> <span class="p">[</span><span class="s">&#39;int&#39;</span><span class="p">,</span> <span class="s">&#39;pointer&#39;</span><span class="p">,</span> <span class="s">&#39;int&#39;</span><span class="p">,</span> <span class="s">&#39;int&#39;</span><span class="p">]]</span>
</span><span class='line'>  <span class="nv">nn_recv: </span><span class="p">[</span> <span class="s">&#39;int&#39;</span><span class="p">,</span> <span class="p">[</span><span class="s">&#39;int&#39;</span><span class="p">,</span> <span class="s">&#39;pointer&#39;</span><span class="p">,</span> <span class="s">&#39;int&#39;</span><span class="p">,</span> <span class="s">&#39;int&#39;</span><span class="p">]]</span>
</span><span class='line'>  <span class="nv">nn_errno: </span><span class="p">[</span> <span class="s">&#39;int&#39;</span><span class="p">,</span> <span class="p">[]]</span>
</span><span class='line'>
</span><span class='line'><span class="nv">exports.AF_SP = </span><span class="mi">1</span>
</span><span class='line'><span class="nv">exports.NN_PAIR = </span><span class="mi">16</span>
</span></code></pre></td></tr></table></div></figure>


<p>and edit the tests to:</p>

<figure class='code'><figcaption><span>test/test.coffee</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="nv">assert = </span><span class="nx">require</span> <span class="s">&#39;assert&#39;</span>
</span><span class='line'><span class="nv">nanomsg = </span><span class="nx">require</span> <span class="s">&#39;../lib/nanomsg.js&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="p">{</span> <span class="nx">AF_SP</span><span class="p">,</span> <span class="nx">NN_PAIR</span> <span class="p">}</span> <span class="o">=</span> <span class="nx">nanomsg</span>
</span><span class='line'>
</span><span class='line'><span class="nv">s1 = </span><span class="nx">nanomsg</span><span class="p">.</span><span class="nx">nn_socket</span> <span class="nx">AF_SP</span><span class="p">,</span> <span class="nx">NN_PAIR</span>
</span><span class='line'><span class="nx">assert</span> <span class="nx">s1</span> <span class="o">&gt;=</span> <span class="mi">0</span><span class="p">,</span> <span class="s">&#39;s1: &#39;</span> <span class="o">+</span> <span class="nx">nanomsg</span><span class="p">.</span><span class="nx">nn_errno</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'><span class="nv">ret = </span><span class="nx">nanomsg</span><span class="p">.</span><span class="nx">nn_bind</span> <span class="nx">s1</span><span class="p">,</span> <span class="s">&#39;inproc://a&#39;</span>
</span><span class='line'><span class="nx">assert</span> <span class="nx">ret</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">,</span> <span class="s">&#39;bind&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">s2 = </span><span class="nx">nanomsg</span><span class="p">.</span><span class="nx">nn_socket</span> <span class="nx">AF_SP</span><span class="p">,</span> <span class="nx">NN_PAIR</span>
</span><span class='line'><span class="nx">assert</span> <span class="nx">s2</span> <span class="o">&gt;=</span> <span class="mi">0</span><span class="p">,</span> <span class="s">&#39;s2: &#39;</span> <span class="o">+</span> <span class="nx">nanomsg</span><span class="p">.</span><span class="nx">nn_errno</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'><span class="nv">ret = </span><span class="nx">nanomsg</span><span class="p">.</span><span class="nx">nn_connect</span> <span class="nx">s2</span><span class="p">,</span> <span class="s">&#39;inproc://a&#39;</span>
</span><span class='line'><span class="nx">assert</span> <span class="nx">ret</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">,</span> <span class="s">&#39;connect&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">msg = </span><span class="k">new</span> <span class="nx">Buffer</span> <span class="s">&#39;hello&#39;</span>
</span><span class='line'><span class="nv">ret = </span><span class="nx">nanomsg</span><span class="p">.</span><span class="nx">nn_send</span> <span class="nx">s2</span><span class="p">,</span> <span class="nx">msg</span><span class="p">,</span> <span class="nx">msg</span><span class="p">.</span><span class="nx">length</span><span class="p">,</span> <span class="mi">0</span>
</span><span class='line'><span class="nx">assert</span> <span class="nx">ret</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">,</span> <span class="s">&#39;send&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">recv = </span><span class="k">new</span> <span class="nx">Buffer</span> <span class="nx">msg</span><span class="p">.</span><span class="nx">length</span>
</span><span class='line'><span class="nv">ret = </span><span class="nx">nanomsg</span><span class="p">.</span><span class="nx">nn_recv</span> <span class="nx">s1</span><span class="p">,</span> <span class="nx">recv</span><span class="p">,</span> <span class="nx">recv</span><span class="p">.</span><span class="nx">length</span><span class="p">,</span> <span class="mi">0</span>
</span><span class='line'><span class="nx">assert</span> <span class="nx">ret</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">,</span> <span class="s">&#39;recv&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="nx">assert</span> <span class="nx">msg</span><span class="p">.</span><span class="nx">toString</span><span class="p">()</span> <span class="o">is</span> <span class="nx">recv</span><span class="p">.</span><span class="nx">toString</span><span class="p">(),</span> <span class="s">&#39;received message did not match sent&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Notice how in the test we&rsquo;re including the compiled javascript from <code>lib/</code>
which doesn&rsquo;t exist yet?  If you try running <code>coffee test/test.coffee</code> it
should crash.  Let&rsquo;s make the compiled version.
<code>coffee -o lib -c src/nanomsg.coffee</code></p>

<p>Once the compiled lib exists, we can run our tests with
<code>coffee test/test.coffee</code> and shouldn&rsquo;t see any errors.</p>

<p>Now we should have a little more order, let&rsquo;s
<a href="https://github.com/nickdesaulniers/node-nanomsg/commit/3e3e3918971e2eddbe95e91e0c3cf32e7f8becba">commit</a>.
Hold off on adding
<code>lib/</code> to version control, I&rsquo;ll explain why in a bit.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>tree -L 2 -C -a -I &#39;.git&#39;
</span><span class='line'>.
</span><span class='line'>├── .gitignore
</span><span class='line'>├── lib
</span><span class='line'>│   └── nanomsg.js
</span><span class='line'>├── node_modules
</span><span class='line'>│   └── ffi
</span><span class='line'>├── src
</span><span class='line'>│   └── nanomsg.coffee
</span><span class='line'>└── test
</span><span class='line'>    └── test.coffee
</span><span class='line'>
</span><span class='line'>5 directories, 4 files
</span></code></pre></td></tr></table></div></figure>


<p>At this point, if we add features and want to rerun our tests, we need to
execute:</p>

<p><code>coffee -o lib -c src/nanomsg.coffee &amp;&amp; coffee test/test.coffee</code></p>

<p>While this command is simple now and easy to reverse search, anyone else
contributing to you project is going to have to know the commands to run the
tests.  Let&rsquo;s use
<a href="http://gruntjs.com/">Grunt</a>,
the JavaScript task runner, to automate our build and test process.</p>

<h2>Add a Build script</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>npm install -g grunt-cli &amp;&amp; \
</span><span class='line'>npm install grunt-contrib-coffee
</span></code></pre></td></tr></table></div></figure>


<p>Create a simple Gruntfile which can also be written in CoffeeScript:</p>

<figure class='code'><figcaption><span>Gruntfile.coffee</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="nv">module.exports = </span><span class="nf">(grunt) -&gt;</span>
</span><span class='line'>  <span class="nx">grunt</span><span class="p">.</span><span class="nx">initConfig</span>
</span><span class='line'>    <span class="nv">coffee:</span>
</span><span class='line'>      <span class="nv">compile:</span>
</span><span class='line'>        <span class="nv">files:</span>
</span><span class='line'>          <span class="s">&#39;lib/nanomsg.js&#39;</span><span class="o">:</span> <span class="p">[</span><span class="s">&#39;src/*.coffee&#39;</span><span class="p">]</span>
</span><span class='line'>  <span class="nx">grunt</span><span class="p">.</span><span class="nx">loadNpmTasks</span> <span class="s">&#39;grunt-contrib-coffee&#39;</span>
</span><span class='line'>  <span class="nx">grunt</span><span class="p">.</span><span class="nx">registerTask</span> <span class="s">&#39;default&#39;</span><span class="p">,</span> <span class="p">[</span><span class="s">&#39;coffee&#39;</span><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>Running <code>grunt</code> builds our lib which is a start, so let&rsquo;s
<a href="https://github.com/nickdesaulniers/node-nanomsg/commit/293e7378225c761ec496d9dcd09e1f2d331628a2">commit</a>
that.</p>

<p>But <code>grunt</code> is not running our tests.  And our tests don&rsquo;t have nice output.
Let&rsquo;s change that:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>npm install -g mocha &amp;&amp; \
</span><span class='line'>npm install chai grunt-mocha-test
</span></code></pre></td></tr></table></div></figure>


<p>edit test/test.coffee to:</p>

<figure class='code'><figcaption><span>test/test.coffee</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="nv">assert = </span><span class="nx">require</span> <span class="s">&#39;assert&#39;</span>
</span><span class='line'><span class="nv">should = </span><span class="nx">require</span><span class="p">(</span><span class="s">&#39;chai&#39;</span><span class="p">).</span><span class="nx">should</span><span class="p">()</span>
</span><span class='line'><span class="nv">nanomsg = </span><span class="nx">require</span> <span class="s">&#39;../lib/nanomsg.js&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="nx">describe</span> <span class="s">&#39;nanomsg&#39;</span><span class="p">,</span> <span class="nf">-&gt;</span>
</span><span class='line'>  <span class="nx">it</span> <span class="s">&#39;should at least work&#39;</span><span class="p">,</span> <span class="nf">-&gt;</span>
</span><span class='line'>    <span class="p">{</span> <span class="nx">AF_SP</span><span class="p">,</span> <span class="nx">NN_PAIR</span> <span class="p">}</span> <span class="o">=</span> <span class="nx">nanomsg</span>
</span><span class='line'>
</span><span class='line'>    <span class="nv">s1 = </span><span class="nx">nanomsg</span><span class="p">.</span><span class="nx">nn_socket</span> <span class="nx">AF_SP</span><span class="p">,</span> <span class="nx">NN_PAIR</span>
</span><span class='line'>    <span class="nx">s1</span><span class="p">.</span><span class="nx">should</span><span class="p">.</span><span class="nx">be</span><span class="p">.</span><span class="nx">at</span><span class="p">.</span><span class="nx">least</span> <span class="mi">0</span>
</span><span class='line'>
</span><span class='line'>    <span class="nv">ret = </span><span class="nx">nanomsg</span><span class="p">.</span><span class="nx">nn_bind</span> <span class="nx">s1</span><span class="p">,</span> <span class="s">&#39;inproc://a&#39;</span>
</span><span class='line'>    <span class="nx">ret</span><span class="p">.</span><span class="nx">should</span><span class="p">.</span><span class="nx">be</span><span class="p">.</span><span class="nx">above</span> <span class="mi">0</span>
</span><span class='line'>
</span><span class='line'>    <span class="nv">s2 = </span><span class="nx">nanomsg</span><span class="p">.</span><span class="nx">nn_socket</span> <span class="nx">AF_SP</span><span class="p">,</span> <span class="nx">NN_PAIR</span>
</span><span class='line'>    <span class="nx">s2</span><span class="p">.</span><span class="nx">should</span><span class="p">.</span><span class="nx">be</span><span class="p">.</span><span class="nx">at</span><span class="p">.</span><span class="nx">least</span> <span class="mi">0</span>
</span><span class='line'>
</span><span class='line'>    <span class="nv">ret = </span><span class="nx">nanomsg</span><span class="p">.</span><span class="nx">nn_connect</span> <span class="nx">s2</span><span class="p">,</span> <span class="s">&#39;inproc://a&#39;</span>
</span><span class='line'>    <span class="nx">ret</span><span class="p">.</span><span class="nx">should</span><span class="p">.</span><span class="nx">be</span><span class="p">.</span><span class="nx">above</span> <span class="mi">0</span>
</span><span class='line'>
</span><span class='line'>    <span class="nv">msg = </span><span class="k">new</span> <span class="nx">Buffer</span> <span class="s">&#39;hello&#39;</span>
</span><span class='line'>    <span class="nv">ret = </span><span class="nx">nanomsg</span><span class="p">.</span><span class="nx">nn_send</span> <span class="nx">s2</span><span class="p">,</span> <span class="nx">msg</span><span class="p">,</span> <span class="nx">msg</span><span class="p">.</span><span class="nx">length</span><span class="p">,</span> <span class="mi">0</span>
</span><span class='line'>    <span class="nx">ret</span><span class="p">.</span><span class="nx">should</span><span class="p">.</span><span class="nx">be</span><span class="p">.</span><span class="nx">above</span> <span class="mi">0</span>
</span><span class='line'>
</span><span class='line'>    <span class="nv">recv = </span><span class="k">new</span> <span class="nx">Buffer</span> <span class="nx">msg</span><span class="p">.</span><span class="nx">length</span>
</span><span class='line'>    <span class="nv">ret = </span><span class="nx">nanomsg</span><span class="p">.</span><span class="nx">nn_recv</span> <span class="nx">s1</span><span class="p">,</span> <span class="nx">recv</span><span class="p">,</span> <span class="nx">recv</span><span class="p">.</span><span class="nx">length</span><span class="p">,</span> <span class="mi">0</span>
</span><span class='line'>    <span class="nx">ret</span><span class="p">.</span><span class="nx">should</span><span class="p">.</span><span class="nx">be</span><span class="p">.</span><span class="nx">above</span> <span class="mi">0</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">msg</span><span class="p">.</span><span class="nx">toString</span><span class="p">().</span><span class="nx">should</span><span class="p">.</span><span class="nx">equal</span> <span class="nx">recv</span><span class="p">.</span><span class="nx">toString</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>and modify your gruntfile to add a testing step:</p>

<figure class='code'><figcaption><span>Gruntfile.coffee</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="nv">module.exports = </span><span class="nf">(grunt) -&gt;</span>
</span><span class='line'>  <span class="nx">grunt</span><span class="p">.</span><span class="nx">initConfig</span>
</span><span class='line'>    <span class="nv">coffee:</span>
</span><span class='line'>      <span class="nv">compile:</span>
</span><span class='line'>        <span class="nv">files:</span>
</span><span class='line'>          <span class="s">&#39;lib/nanomsg.js&#39;</span><span class="o">:</span> <span class="p">[</span><span class="s">&#39;src/*.coffee&#39;</span><span class="p">]</span>
</span><span class='line'>    <span class="nv">mochaTest:</span>
</span><span class='line'>      <span class="nv">options:</span>
</span><span class='line'>        <span class="nv">reporter: </span><span class="s">&#39;nyan&#39;</span>
</span><span class='line'>      <span class="nv">src: </span><span class="p">[</span><span class="s">&#39;test/test.coffee&#39;</span><span class="p">]</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">grunt</span><span class="p">.</span><span class="nx">loadNpmTasks</span> <span class="s">&#39;grunt-contrib-coffee&#39;</span>
</span><span class='line'>  <span class="nx">grunt</span><span class="p">.</span><span class="nx">loadNpmTasks</span> <span class="s">&#39;grunt-mocha-test&#39;</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">grunt</span><span class="p">.</span><span class="nx">registerTask</span> <span class="s">&#39;default&#39;</span><span class="p">,</span> <span class="p">[</span><span class="s">&#39;coffee&#39;</span><span class="p">,</span> <span class="s">&#39;mochaTest&#39;</span><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now when we run <code>grunt</code>, our build process will run, then our test process,
then we should see one incredibly happy
<a href="http://www.nyan.cat/">nyan cat</a>.
The
<a href="http://visionmedia.github.io/mocha/#reporters">nyan cat mocha test reporter</a>
is basically the pinnacle of human intellectual achievement.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>grunt
</span><span class='line'>Running &quot;coffee:compile&quot; (coffee) task
</span><span class='line'>File lib/nanomsg.js created.
</span><span class='line'>
</span><span class='line'>Running &quot;mochaTest:src&quot; (mochaTest) task
</span><span class='line'> 1   -__,------,
</span><span class='line'> 0   -__|  /\_/\
</span><span class='line'> 0   -_~|_( ^ .^)
</span><span class='line'>     -_ &quot;&quot;  &quot;&quot;
</span><span class='line'>
</span><span class='line'>  1 passing (5 ms)
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>Done, without errors.
</span></code></pre></td></tr></table></div></figure>


<p><a href="https://github.com/nickdesaulniers/node-nanomsg/commit/a43bcb3f69ca20bb1902472ecc954317e5fe0fe3">Commit time</a>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>tree -L 2 -C -a -I &#39;.git&#39;
</span><span class='line'>.
</span><span class='line'>├── .gitignore
</span><span class='line'>├── Gruntfile.coffee
</span><span class='line'>├── lib
</span><span class='line'>│   └── nanomsg.js
</span><span class='line'>├── node_modules
</span><span class='line'>│   ├── ffi
</span><span class='line'>│   ├── grunt
</span><span class='line'>│   └── grunt-contrib-coffee
</span><span class='line'>├── src
</span><span class='line'>│   └── nanomsg.coffee
</span><span class='line'>└── test
</span><span class='line'>    └── test.coffee
</span><span class='line'>
</span><span class='line'>7 directories, 5 files
</span></code></pre></td></tr></table></div></figure>


<h2>Create node module</h2>

<p>Now that we have a more modular design with build and test logic built in,
let&rsquo;s make this module redistributable.  First, let&rsquo;s talk about ignoring
files.  Create a <code>.npmignore</code> file that will specify what not to include in the
module that is downloaded.  Node Package Manager,
<a href="https://npmjs.org/">npm</a>,
will
<a href="https://npmjs.org/doc/developers.html#Keeping-files-out-of-your-package">ignore a bunch of files by default</a>
for us.</p>

<figure class='code'><figcaption><span>.npmignore</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>Gruntfile.coffee
</span><span class='line'>src/
</span><span class='line'>test/
</span></code></pre></td></tr></table></div></figure>


<p>Here we&rsquo;re ignoring the <code>src/</code> dir, where in our <code>.gitignore</code> we are going to
ignore <code>lib/</code>.</p>

<figure class='code'><figcaption><span>.gitignore</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>node_modules/
</span><span class='line'>lib/
</span><span class='line'>*.swp
</span></code></pre></td></tr></table></div></figure>


<p>Why are we doing this?  Admittedly, none of this is strictly necessary, but
here&rsquo;s why I think it is useful.  When someone is checking out the source, they
don&rsquo;t need the results of the compilation step, as they can make modifications
and would need to recompile anyways.  Adding <code>lib/nanomsg.js</code> would just be
another thing to download (though its size is relatively insignificant).
Likewise, when someone downloads the module, they most likely just want the
results of the compilation step, not the source, build script, or test suite.
If I was planned on making the compiled JavaScript accessible to a web browser,
I would not add <code>lib/</code> to <code>.gitignore</code>, that way it could be referenced from the
github raw URL.
Again, these are generalizations that are not always true.  To make up for not
having the entire source when installed as a module, we&rsquo;ll make up for it by
adding a link to the repo from of manifest, but first let&rsquo;s
<a href="https://github.com/nickdesaulniers/node-nanomsg/commit/61458d964eaaee2ae6501bfbd186a1fe0d03d827">commit</a>!</p>

<p>Time to create a manifest file that has some basic info about our app.  It&rsquo;s a
pretty good idea to run <code>npm search &lt;packagename&gt;</code> before hand to make sure
your planned package name is not taken.  Since we have all of our dependencies
in a row, let&rsquo;s run
<code>npm init</code>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>This utility will walk you through creating a package.json file.
</span><span class='line'>It only covers the most common items, and tries to guess sane defaults.
</span><span class='line'>
</span><span class='line'>See `npm help json` for definitive documentation on these fields
</span><span class='line'>and exactly what they do.
</span><span class='line'>
</span><span class='line'>Use `npm install &lt;pkg&gt; --save` afterwards to install a package and
</span><span class='line'>save it as a dependency in the package.json file.
</span><span class='line'>
</span><span class='line'>Press ^C at any time to quit.
</span><span class='line'>name: (nanomsg)
</span><span class='line'>version: (0.0.0)
</span><span class='line'>description: nanomsg bindings
</span><span class='line'>entry point: (index.js) lib/nanomsg.js
</span><span class='line'>test command: grunt
</span><span class='line'>git repository: (git://github.com/nickdesaulniers/node-nanomsg.git)
</span><span class='line'>keywords: nanomsg
</span><span class='line'>author: Nick Desaulniers
</span><span class='line'>license: (BSD-2-Clause) Beerware
</span><span class='line'>About to write to /Users/Nicholas/code/c/nanomsg/package.json:
</span><span class='line'>
</span><span class='line'>{
</span><span class='line'>  &quot;name&quot;: &quot;nanomsg&quot;,
</span><span class='line'>  &quot;version&quot;: &quot;0.0.0&quot;,
</span><span class='line'>  &quot;description&quot;: &quot;nanomsg bindings&quot;,
</span><span class='line'>  &quot;main&quot;: &quot;lib/nanomsg.js&quot;,
</span><span class='line'>  &quot;directories&quot;: {
</span><span class='line'>    &quot;test&quot;: &quot;test&quot;
</span><span class='line'>  },
</span><span class='line'>  &quot;dependencies&quot;: {
</span><span class='line'>    &quot;chai&quot;: &quot;~1.7.2&quot;,
</span><span class='line'>    &quot;ffi&quot;: &quot;~1.2.5&quot;,
</span><span class='line'>    &quot;grunt&quot;: &quot;~0.4.1&quot;,
</span><span class='line'>    &quot;grunt-mocha-test&quot;: &quot;~0.6.3&quot;,
</span><span class='line'>    &quot;grunt-contrib-coffee&quot;: &quot;~0.7.0&quot;
</span><span class='line'>  },
</span><span class='line'>  &quot;devDependencies&quot;: {},
</span><span class='line'>  &quot;scripts&quot;: {
</span><span class='line'>    &quot;test&quot;: &quot;grunt&quot;
</span><span class='line'>  },
</span><span class='line'>  &quot;repository&quot;: {
</span><span class='line'>    &quot;type&quot;: &quot;git&quot;,
</span><span class='line'>    &quot;url&quot;: &quot;git://github.com/nickdesaulniers/node-nanomsg.git&quot;
</span><span class='line'>  },
</span><span class='line'>  &quot;keywords&quot;: [
</span><span class='line'>    &quot;nanomsg&quot;
</span><span class='line'>  ],
</span><span class='line'>  &quot;author&quot;: &quot;Nick Desaulniers&quot;,
</span><span class='line'>  &quot;license&quot;: &quot;Beerware&quot;,
</span><span class='line'>  &quot;bugs&quot;: {
</span><span class='line'>    &quot;url&quot;: &quot;https://github.com/nickdesaulniers/node-nanomsg/issues&quot;
</span><span class='line'>  }
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>Is this ok? (yes)
</span></code></pre></td></tr></table></div></figure>


<p>That should create for us a nice package.json manifest file for npm.</p>

<p>We can now run our tests with the command <code>npm test</code> in addition to <code>grunt</code>.
Let&rsquo;s hold off on publishing just yet,
<a href="https://github.com/nickdesaulniers/node-nanomsg/commit/6ac3425005c69683df85f75c49e27c9cb634ada6">committing</a>
instead.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>tree -L 2 -C -a -I &#39;.git&#39;
</span><span class='line'>.
</span><span class='line'>├── .gitignore
</span><span class='line'>├── .npmignore
</span><span class='line'>├── Gruntfile.coffee
</span><span class='line'>├── lib
</span><span class='line'>│   └── nanomsg.js
</span><span class='line'>├── node_modules
</span><span class='line'>│   ├── .bin
</span><span class='line'>│   ├── chai
</span><span class='line'>│   ├── ffi
</span><span class='line'>│   ├── grunt
</span><span class='line'>│   ├── grunt-contrib-coffee
</span><span class='line'>│   └── grunt-mocha-test
</span><span class='line'>├── package.json
</span><span class='line'>├── src
</span><span class='line'>│   └── nanomsg.coffee
</span><span class='line'>└── test
</span><span class='line'>    └── test.coffee
</span><span class='line'>
</span><span class='line'>10 directories, 7 files
</span></code></pre></td></tr></table></div></figure>


<h2>Add LICENSE and README</h2>

<p>So we have a module that&rsquo;s almost ready to go.  But how will developers know
how to reuse this code?  As much as I like to
<em><a href="http://bartaz.github.io/impress.js/#/source">view the source, Luke</a></em>,
npm will complain without a readme.  The
<a href="https://github.com/nickdesaulniers/node-nanomsg/commit/95e5a7203740f8ab31758f54491d095567accf70">readme</a>
also looks nice on the github repo.</p>

<pre><code># Node-NanoMSG
Node.js binding for [nanomsg](http://nanomsg.org/index.html).

## Usage

`npm install nanomsg`

```javascript
var nanomsg = require('nanomsg');
var assert = require('assert');
var AF_SP = nanomsg.AF_SP;
var NN_PAIR = nanomsg.NN_PAIR;
var msg = new Buffer('hello');
var recv = new Buffer(msg.length);
var s1, s2, ret;

s1 = nanomsg.nn_socket(AF_SP, NN_PAIR);
assert(s1 &gt;= 0, 's1: ' + nanomsg.errno());

ret = nanomsg.nn_bind(s1, 'inproc://a');
assert(ret &gt; 0, 'bind');

s2 = nanomsg.nn_socket(AF_SP, NN_PAIR);
assert(s2 &gt;= 0, 's2: ' + nanomsg.errno());

ret = nanomsg.nn_connect(s2, 'inproc://a');
assert(ret &gt; 0, 'connect');

ret = nanomsg.nn_send(s2, msg, msg.length, 0);
assert(ret &gt; 0, 'send');

ret = nanomsg.recv(s1, recv, recv.length, 0);
assert(ret &gt; 0, 'recv');

assert(msg.toString() === recv.toString(), "didn't receive sent message");
console.log(recv.toString());
</code></pre>

<p>Before we publish, let&rsquo;s create a
<a href="https://github.com/nickdesaulniers/node-nanomsg/commit/48a55d0c51099f6b90cae5f190a8eb2b94140eae">license</a>
file, because though we are making
our code publicly viewable,
<a href="https://help.github.com/articles/open-source-licensing#what-happens-if-i-dont-choose-a-license">public source code without an explicit license is still under copyright and cannot be reused</a>.</p>

<figure class='code'><figcaption><span>LICENSE</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>/*
</span><span class='line'> * ----------------------------------------------------------------------------
</span><span class='line'> * &quot;THE BEER-WARE LICENSE&quot; (Revision 42):
</span><span class='line'> * &lt;nick@mozilla.com&gt; wrote this file. As long as you retain this notice you
</span><span class='line'> * can do whatever you want with this stuff. If we meet some day, and you think
</span><span class='line'> * this stuff is worth it, you can buy me a beer in return. Nick Desaulniers
</span><span class='line'> * ----------------------------------------------------------------------------
</span><span class='line'> */
</span></code></pre></td></tr></table></div></figure>


<p>If you want to be more serious, maybe instead shoot for an MIT or BSD style
license if you don&rsquo;t care what your repo gets used for or GPL style if you do.
<a href="http://www.tldrlegal.com/">TLDRLegal</a> has a great breakdown on common licenses.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>tree -L 2 -C -a -I &#39;.git&#39;
</span><span class='line'>.
</span><span class='line'>├── .gitignore
</span><span class='line'>├── .npmignore
</span><span class='line'>├── Gruntfile.coffee
</span><span class='line'>├── LICENSE
</span><span class='line'>├── README.md
</span><span class='line'>├── lib
</span><span class='line'>│   └── nanomsg.js
</span><span class='line'>├── node_modules
</span><span class='line'>│   ├── .bin
</span><span class='line'>│   ├── chai
</span><span class='line'>│   ├── ffi
</span><span class='line'>│   ├── grunt
</span><span class='line'>│   ├── grunt-contrib-coffee
</span><span class='line'>│   └── grunt-mocha-test
</span><span class='line'>├── package.json
</span><span class='line'>├── src
</span><span class='line'>│   └── nanomsg.coffee
</span><span class='line'>└── test
</span><span class='line'>    └── test.coffee
</span><span class='line'>
</span><span class='line'>10 directories, 9 files
</span></code></pre></td></tr></table></div></figure>


<h2>Publish</h2>

<p><code>npm publish</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>npm http PUT https://registry.npmjs.org/nanomsg
</span><span class='line'>npm http 201 https://registry.npmjs.org/nanomsg
</span><span class='line'>npm http GET https://registry.npmjs.org/nanomsg
</span><span class='line'>npm http 200 https://registry.npmjs.org/nanomsg
</span><span class='line'>npm http PUT https://registry.npmjs.org/nanomsg/-/nanomsg-0.0.0.tgz/-rev/1-20f1ec5ca2eed51e840feff22479bb5d
</span><span class='line'>npm http 201 https://registry.npmjs.org/nanomsg/-/nanomsg-0.0.0.tgz/-rev/1-20f1ec5ca2eed51e840feff22479bb5d
</span><span class='line'>npm http PUT https://registry.npmjs.org/nanomsg/0.0.0/-tag/latest
</span><span class='line'>npm http 201 https://registry.npmjs.org/nanomsg/0.0.0/-tag/latest
</span><span class='line'>+ nanomsg@0.0.0
</span></code></pre></td></tr></table></div></figure>


<p>Finally as a sanity check, I like to make a new folder elsewhere, and run
through the steps in the readme manually to make sure the package is reuseable.
Which is good, since in the readme I
<a href="https://github.com/nickdesaulniers/node-nanomsg/commit/c145d3b3a8e85354f1bfb61d8342531ec6bbaa0a">accidentally forgot</a>
the <code>nn_</code> prefix in
front of errno and recv!</p>

<p>After updating the example in the readme, let&rsquo;s
<a href="https://github.com/nickdesaulniers/node-nanomsg/commit/a6280ca85c4b9cbaac36f5b427bc052961d7e972">bump the version number</a>
and
republish.  Use <code>npm version</code> without arguments to find the current version,
then <code>npm version patch</code> to bump it.  You have to commit the readme changes
before bumping the version.  Finally don&rsquo;t forget to rerun <code>npm publish</code>.</p>

<p>Our
<a href="https://github.com/nickdesaulniers/node-nanomsg/tree/a6280ca85c4b9cbaac36f5b427bc052961d7e972">final directory structure</a>
ends up looking like:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>tree -L 2 -C -a -I &#39;.git&#39;
</span><span class='line'>.
</span><span class='line'>├── .gitignore
</span><span class='line'>├── .npmignore
</span><span class='line'>├── Gruntfile.coffee
</span><span class='line'>├── LICENSE
</span><span class='line'>├── README.md
</span><span class='line'>├── lib
</span><span class='line'>│   └── nanomsg.js
</span><span class='line'>├── node_modules
</span><span class='line'>│   ├── .bin
</span><span class='line'>│   ├── chai
</span><span class='line'>│   ├── ffi
</span><span class='line'>│   ├── grunt
</span><span class='line'>│   ├── grunt-contrib-coffee
</span><span class='line'>│   └── grunt-mocha-test
</span><span class='line'>├── package.json
</span><span class='line'>├── src
</span><span class='line'>│   └── nanomsg.coffee
</span><span class='line'>└── test
</span><span class='line'>    └── test.coffee
</span><span class='line'>
</span><span class='line'>10 directories, 9 files
</span></code></pre></td></tr></table></div></figure>


<p>Lastly, I&rsquo;ll
<a href="https://github.com/250bpm/nanomsg/pull/122">reach out to</a>
Martin Sústrik and let him know that nanomsg has a new binding.</p>

<p>The bindings are far from complete, the test coverage could be better, and the
API is very C like and could use some OO syntactic sugar, but we&rsquo;re at a great
starting point and ready to rock and roll.  If you&rsquo;d like to help out, fork
<a href="https://github.com/nickdesaulniers/node-nanomsg.git">https://github.com/nickdesaulniers/node-nanomsg.git</a>.</p>

<p>What are some of your thoughts on build steps, testing, and directory layout of
node module?  This
tutorial was definitely not meant to be an authoritarian guide.  I look forward
to your comments on your experiences!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Designated initialization with compound literals in C]]></title>
    <link href="http://nickdesaulniers.github.io/blog/2013/07/25/designated-initialization-with-pointers-in-c/"/>
    <updated>2013-07-25T16:48:00-07:00</updated>
    <id>http://nickdesaulniers.github.io/blog/2013/07/25/designated-initialization-with-pointers-in-c</id>
    <content type="html"><![CDATA[<p>Just a quick post on something I just discovered and found neat (I always find
obscure C syntax interesting).  I was trying to figure out how to use a C
designated initializer, where a member was a pointer to another designated
initializer.  At this point, you need a compound literal.  Just a quick
background on C initialization:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="c1">// verbosely create an array with a known size</span>
</span><span class='line'><span class="kt">int</span> <span class="n">arr</span> <span class="p">[</span><span class="mi">3</span><span class="p">];</span>
</span><span class='line'><span class="n">arr</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'><span class="n">arr</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="mi">2</span><span class="p">;</span>
</span><span class='line'><span class="n">arr</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span> <span class="o">=</span> <span class="mi">3</span><span class="p">;</span>
</span><span class='line'><span class="c1">// =&gt; [1, 2, 3]</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// concisely create an array with a known size</span>
</span><span class='line'><span class="kt">int</span> <span class="n">arr</span> <span class="p">[</span><span class="mi">3</span><span class="p">]</span> <span class="o">=</span> <span class="p">{</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span> <span class="p">};</span> <span class="c1">// =&gt; [1, 2, 3]</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// creates an array with unspecified values initialized to 0</span>
</span><span class='line'><span class="kt">int</span> <span class="n">arr</span> <span class="p">[</span><span class="mi">4</span><span class="p">]</span> <span class="o">=</span> <span class="p">{</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span> <span class="p">};</span> <span class="c1">// =&gt; [1, 2, 3, 0]</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// truncates declaration</span>
</span><span class='line'><span class="kt">int</span> <span class="n">arr</span> <span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="p">{</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span> <span class="p">};</span> <span class="c1">// =&gt; [1]</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// based on number of initializers</span>
</span><span class='line'><span class="kt">int</span> <span class="n">arr</span> <span class="p">[]</span> <span class="o">=</span> <span class="p">{</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span> <span class="p">};</span> <span class="c1">// =&gt; [1, 2, 3]</span>
</span></code></pre></td></tr></table></div></figure>


<p>Let&rsquo;s look at how we might have initialized a struct in C89.  In C89, you are
required to declare local variables at the top of a block.  A previous
initialization of a point struct might have looked like:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="k">struct</span> <span class="n">point</span> <span class="p">{</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">;</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="k">struct</span> <span class="n">point</span> <span class="n">a</span><span class="p">;</span>
</span><span class='line'>  <span class="n">a</span><span class="p">.</span><span class="n">x</span> <span class="o">=</span> <span class="mi">2</span><span class="p">;</span>
</span><span class='line'>  <span class="n">a</span><span class="p">.</span><span class="n">y</span> <span class="o">=</span> <span class="mi">3</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Just as we can define array literals in C using the initializer list syntax, we
can use the same concise syntax for initializing structs!</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="c1">// point a is located at (2, 3)</span>
</span><span class='line'><span class="k">struct</span> <span class="n">point</span> <span class="n">a</span> <span class="o">=</span> <span class="p">{</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span> <span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>Well, this can be bad.  Where would point a be located if say a fellow team
mate came along and modified the definition of the point struct to:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="k">struct</span> <span class="n">point</span> <span class="p">{</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">y</span><span class="p">,</span> <span class="n">x</span><span class="p">;</span> <span class="c1">// used to be `int x, y;`</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>Suddenly point a points to (3, 2), not (2, 3).  It&rsquo;s better if you use
designated initializers to declare the values for members of your struct.  It&rsquo;s
up to the compiler to decide on the order of initialization, but it wont mess
up where the data is intended to go.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="c1">// point b is located at (2, 3)</span>
</span><span class='line'><span class="k">struct</span> <span class="n">point</span> <span class="n">b</span> <span class="o">=</span> <span class="p">{</span> <span class="p">.</span><span class="n">y</span> <span class="o">=</span> <span class="mi">3</span><span class="p">,</span> <span class="p">.</span><span class="n">x</span> <span class="o">=</span> <span class="mi">2</span> <span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>So now we have designated initializers, cool.  What about if we want to use the
same syntax to reassign point b?</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">b</span> <span class="o">=</span> <span class="p">{</span> <span class="p">.</span><span class="n">x</span> <span class="o">=</span> <span class="mi">5</span><span class="p">,</span> <span class="p">.</span><span class="n">y</span> <span class="o">=</span> <span class="mi">6</span> <span class="p">};</span>
</span><span class='line'><span class="c1">//    ^</span>
</span><span class='line'><span class="c1">// error: expected expression</span>
</span></code></pre></td></tr></table></div></figure>


<p>While you are being explicit about the shape of the struct that you are trying
to assign to b, the compiler cannot figure out that you&rsquo;re trying to assign a
point struct to another point struct.  A C cast would probably help here and
that&rsquo;s what the concept of compound literals are.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">b</span> <span class="o">=</span> <span class="p">(</span><span class="k">struct</span> <span class="n">point</span><span class="p">)</span> <span class="p">{</span> <span class="p">.</span><span class="n">x</span> <span class="o">=</span> <span class="mi">5</span><span class="p">,</span> <span class="p">.</span><span class="n">y</span> <span class="o">=</span> <span class="mi">6</span> <span class="p">};</span> <span class="c1">// works!</span>
</span></code></pre></td></tr></table></div></figure>


<p>Notice: I just combined a compound literal with a designated initializer.  A
compound literal on its own would look like:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">b</span> <span class="o">=</span> <span class="p">(</span><span class="k">struct</span> <span class="n">point</span><span class="p">)</span> <span class="p">{</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">6</span> <span class="p">};</span> <span class="c1">// works!</span>
</span></code></pre></td></tr></table></div></figure>


<p>To recap we can define points like so:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="k">struct</span> <span class="n">point</span> <span class="n">a</span><span class="p">;</span>
</span><span class='line'><span class="n">a</span><span class="p">.</span><span class="n">x</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'><span class="n">a</span><span class="p">.</span><span class="n">y</span> <span class="o">=</span> <span class="mi">2</span><span class="p">;</span> <span class="c1">// C89 (too verbose)</span>
</span><span class='line'><span class="k">struct</span> <span class="n">point</span> <span class="n">b</span> <span class="o">=</span> <span class="p">{</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span> <span class="p">};</span> <span class="c1">// initializer list (struct member order specific)</span>
</span><span class='line'><span class="k">struct</span> <span class="n">point</span> <span class="n">c</span> <span class="o">=</span> <span class="p">{</span> <span class="p">.</span><span class="n">x</span> <span class="o">=</span> <span class="mi">5</span><span class="p">,</span> <span class="p">.</span><span class="n">y</span> <span class="o">=</span> <span class="mi">6</span> <span class="p">};</span> <span class="c1">// designated initializer (non struct member order specific)</span>
</span><span class='line'><span class="k">struct</span> <span class="n">point</span> <span class="n">d</span> <span class="o">=</span> <span class="p">(</span><span class="k">struct</span> <span class="n">point</span><span class="p">)</span> <span class="p">{</span> <span class="p">.</span><span class="n">x</span> <span class="o">=</span> <span class="mi">7</span><span class="p">,</span> <span class="p">.</span><span class="n">y</span> <span class="o">=</span> <span class="mi">8</span> <span class="p">};</span> <span class="c1">// compound literal (cast + designated initialization)</span>
</span></code></pre></td></tr></table></div></figure>


<p>My favorite part of compound literals is that you can define values inline of
an argument list.  Say you have a function prototype like:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="kt">int</span> <span class="nf">distance</span> <span class="p">(</span><span class="k">struct</span> <span class="n">point</span><span class="p">,</span> <span class="k">struct</span> <span class="n">point</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// instead of calling it like this</span>
</span><span class='line'><span class="c1">// (creating temp objects just to pass in)</span>
</span><span class='line'><span class="k">struct</span> <span class="n">point</span> <span class="n">a</span> <span class="o">=</span> <span class="p">{</span> <span class="p">.</span><span class="n">x</span> <span class="o">=</span> <span class="mi">1</span><span class="p">,</span> <span class="p">.</span><span class="n">y</span> <span class="o">=</span> <span class="mi">2</span> <span class="p">};</span>
</span><span class='line'><span class="k">struct</span> <span class="n">point</span> <span class="n">b</span> <span class="o">=</span> <span class="p">{</span> <span class="p">.</span><span class="n">x</span> <span class="o">=</span> <span class="mi">5</span><span class="p">,</span> <span class="p">.</span><span class="n">y</span> <span class="o">=</span> <span class="mi">6</span> <span class="p">};</span>
</span><span class='line'><span class="n">distance</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// we can use compound literals</span>
</span><span class='line'><span class="n">distance</span><span class="p">((</span><span class="k">struct</span> <span class="n">point</span><span class="p">)</span> <span class="p">{</span> <span class="p">.</span><span class="n">x</span> <span class="o">=</span> <span class="mi">1</span><span class="p">,</span> <span class="p">.</span><span class="n">y</span> <span class="o">=</span> <span class="mi">2</span> <span class="p">},</span> <span class="p">(</span><span class="k">struct</span> <span class="n">point</span><span class="p">)</span> <span class="p">{</span> <span class="p">.</span><span class="n">x</span> <span class="o">=</span> <span class="mi">5</span><span class="p">,</span> <span class="p">.</span><span class="n">y</span> <span class="o">=</span> <span class="mi">6</span> <span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>So compound literals help with reassignment of structs, and not storing
temporary variables just to pass as function arguments.  What happens though
when one of your members is a pointer?  C strings are easy because they already
have a literal value:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="k">struct</span> <span class="n">node</span> <span class="p">{</span>
</span><span class='line'>  <span class="kt">char</span> <span class="o">*</span><span class="n">value</span><span class="p">;</span>
</span><span class='line'>  <span class="k">struct</span> <span class="n">node</span> <span class="o">*</span><span class="n">next</span><span class="p">;</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// just using designated initialization</span>
</span><span class='line'><span class="k">struct</span> <span class="n">node</span> <span class="n">a</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>  <span class="p">.</span><span class="n">value</span> <span class="o">=</span> <span class="err">“</span><span class="n">hello</span> <span class="n">world</span><span class="err">”</span><span class="p">,</span>
</span><span class='line'>  <span class="p">.</span><span class="n">next</span> <span class="o">=</span> <span class="nb">NULL</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>But what happens if we want to initialize node.next?  We could do:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="k">struct</span> <span class="n">node</span> <span class="n">b</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>  <span class="p">.</span><span class="n">value</span> <span class="o">=</span> <span class="err">“</span><span class="n">foo</span><span class="err">”</span><span class="p">,</span>
</span><span class='line'>  <span class="p">.</span><span class="n">next</span> <span class="o">=</span> <span class="nb">NULL</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'><span class="n">a</span><span class="p">.</span><span class="n">next</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">b</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Again, we have to define b before assigning it to a.next.  That&rsquo;s worthwhile if
you need to reference b later in that scope, but sometimes you don&rsquo;t (just like
how compound literals can help with function arguments)!  But that&rsquo;s where I
was stumped.  How do you nest designated initializers when the a member is a
pointer to another designated initializer?  A first naïve attempt was:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="k">struct</span> <span class="n">node</span> <span class="n">c</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>  <span class="p">.</span><span class="n">value</span> <span class="o">=</span> <span class="err">“</span><span class="n">bar</span><span class="err">”</span><span class="p">,</span>
</span><span class='line'>  <span class="p">.</span><span class="n">next</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>    <span class="p">.</span><span class="n">value</span> <span class="o">=</span> <span class="err">“</span><span class="n">baz</span><span class="err">”</span><span class="p">,</span>
</span><span class='line'><span class="c1">//  ^</span>
</span><span class='line'><span class="c1">// error: designator in initializer for scalar type &#39;struct node *&#39;</span>
</span><span class='line'>    <span class="p">.</span><span class="n">next</span> <span class="o">=</span> <span class="nb">NULL</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>WTF?  Well, if you go back to the example with nodes a and b, we don&rsquo;t assign
the value of b to a.next, we assign it a pointer to b.  So how can we use
designated initializers to define, say, the first two nodes of a linked list?
Compound literals.  Remember, a compound literal is essentially a designated
initialization + cast.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="k">struct</span> <span class="n">node</span> <span class="n">d</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>  <span class="p">.</span><span class="n">value</span> <span class="o">=</span> <span class="err">“</span><span class="n">qux</span><span class="err">”</span><span class="p">,</span>
</span><span class='line'>  <span class="p">.</span><span class="n">next</span> <span class="o">=</span> <span class="o">&amp;</span><span class="p">((</span><span class="k">struct</span> <span class="n">node</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="p">.</span><span class="n">value</span> <span class="o">=</span> <span class="err">“</span><span class="n">fred</span><span class="err">”</span><span class="p">,</span>
</span><span class='line'>    <span class="p">.</span><span class="n">next</span> <span class="o">=</span> <span class="nb">NULL</span>
</span><span class='line'>  <span class="p">})</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>And that works, but why?  d.next is assigned an address of a
compound literal.  Granted, you probably don&rsquo;t want to be declaring your entire
linked list like this, as nesting gets out of control fast.  I really like this
style because it reminds me of JavaScript&rsquo;s syntax for declaring object
literals.  It would look nicer if all of your nested structs were values and
not references though; then you could just use designated initializers and
wouldn&rsquo;t need compound literals or address of operators.</p>

<p>What&rsquo;s your favorite or most interesting part of C syntax?</p>

<p>Acknowledgements:</p>

<ul>
<li><a href="http://louisstowasser.com/">Louis Stowasser</a></li>
<li><a href="http://fredericiana.com/">Frederic Wenzel</a></li>
<li><a href="http://shop.oreilly.com/product/0636920025108.do">21st Century C</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Why I'll be Marching this 4th]]></title>
    <link href="http://nickdesaulniers.github.io/blog/2013/07/03/why-ill-be-marching-this-4th/"/>
    <updated>2013-07-03T22:27:00-07:00</updated>
    <id>http://nickdesaulniers.github.io/blog/2013/07/03/why-ill-be-marching-this-4th</id>
    <content type="html"><![CDATA[<blockquote><p>If you&#8217;ve done nothing wrong, then you&#8217;ve got nothing to hide.</p></blockquote>


<p>Wrong.  Nothing ever justifies giving up your
<a href="http://www.un.org/en/documents/udhr/index.shtml#a12">human rights</a>
, especially to
prove lack of wrong doing, and any government that asks you to do so is not
your friend.</p>

<p>Terrorism has become a weapon used against us by those elected to lead to keep
us
compliant, like blinders you&rsquo;d put on a horse.  The threat just keeps growing
and growing instead diminishing, despite the money and lives we throw at
it.  Terrorism is the new Communism, and the
<a href="http://www.guardian.co.uk/world/2013/jun/06/us-tech-giants-nsa-data">NSA PRISM program</a>
and the
<a href="http://www.technologyreview.com/news/515861/nsa-surveillance-reflects-a-broader-interpretation-of-the-patriot-act/">Patriot Act</a>
are the modern day overreactions equivalent to
<a href="https://en.wikipedia.org/wiki/McCarthyism">McCarthyism</a> and
the <a href="https://en.wikipedia.org/wiki/Red_scare">Red Scare</a>.</p>

<p>A captain and crew of a boat would reflect upon the current state of their
vessel and make
corrections.  The cycle of reflection and correction is what keeps the boat
from running ashore, hitting other boats, or making other costly mistakes.
Unfortunately, I feel that NSA, enabled by
<a href="http://www.aclu.org/free-speech-national-security-technology-and-liberty/reform-patriot-act-section-215">section 215 of the Patriot Act</a>,
have become so powerful that they feel they
<a href="http://www.motherjones.com/mojo/2013/06/fisa-court-nsa-spying-opinion-reject-request">don&rsquo;t need to reflect upon their actions anymore</a>.</p>

<p>If
your neighbor was peeking in your window at night, that would probably make you
very angry, and you would probably never trust that neighbor again.  Think
about how all of our fellow countries feel about us right now.
It&rsquo;s really unfortunate that Germany and our allies
<a href="http://www.washingtontimes.com/news/2013/jun/12/germany-decries-nsa-surveillance-stasi-methods/">now severely distrust us</a>.
I apologize to
all non US citizens that my government doesn&rsquo;t respect you enough to extend the
human right to privacy to you, as it supposedly does to its own citizens, and
I&rsquo;m ashamed I have to apologize on behalf of them.  It&rsquo;s troubling that the
NSA <a href="https://www.youtube.com/watch?v=4v7YtTnon90">has trouble</a> telling the
<a href="http://www.techspot.com/news/53031-senators-demand-that-nsa-fix-inaccuracies-in-prism-factsheet.html">truth</a>.
It&rsquo;s awesome but ultimately embarrassing that Ecuador
<a href="http://inserbia.info/news/2013/06/ecuador-offers-to-fund-human-rights-training-in-the-us/">offers to fund Human Rights training to us</a>.</p>

<p>It&rsquo;s hypocritical that we frown upon countries like
<a href="http://en.wikipedia.org/wiki/Golden_Shield_Project">China spying on their citizens</a>,
like the East German Stasi, and yet we are doing it to our
own people!  While this administration may try its best to be benevolent with
this power, who&rsquo;s to say all future administrations will use it for good?
Even without content you can
<a href="https://www.youtube.com/watch?v=raxUNmzgCWE">glean an awful (unacceptable) amount</a>
of <a href="http://www.ted.com/talks/malte_spitz_your_phone_company_is_watching.html">information about somebody</a>.</p>

<p>So how did we get here?  The justification I keep hearing is that
<a href="https://soundcloud.com/madiha-1/students-question-the-nsa-at">this is all legal</a>.
Regardless of whether or not something is legal, we should be asking ourselves
“but is this right?” and “what were the motivations of those that created this
law?  Was it to entrench the privileged or represent the constituents?”
<a href="http://en.wikipedia.org/wiki/First_they_came...">Good people not standing up for the right thing</a>
is what got us here.  Good people
not standing up at the Tech companies accused of handing over data to the NSA.
Good people at the NSA not speaking out about their surveillance programs.
Good people in Congress not speaking out about programs they&rsquo;ve been briefed
on.  Everyone just keeps saying how they&rsquo;re just complying with the law while
looking the other way.
Sounds to me like the crew hasn&rsquo;t been doing enough reflection.  What about the
captain?</p>

<blockquote><p>I think it’s important to recognize that you can’t have 100 percent security<br/>and also then have 100 per cent privacy and zero inconvenience.</p><footer><strong>President Obama</strong> <cite><a href='http://www.youtube.com/watch?v=Xec48sUutuA'>www.youtube.com/&hellip;</a></cite></footer></blockquote>


<p>Hearing the President of our country say that,
<a href="http://www.washingtonpost.com/blogs/wonkblog/wp/2013/07/03/how-ed-snowden-became-a-bigger-story-than-nsa-spying-in-two-charts/">the incompetent media&rsquo;s focus on Snowden</a>,
and
<a href="http://www.usatoday.com/story/news/politics/2013/06/17/americans-say-snowden-should-be-prosecuted-for-nsa-leaks-in-usa-today-poll/2430583/">the American people&rsquo;s fundamental misunderstand of privacy</a>,
literally reminds me of the part in Star Wars where in order to stop a growing
threat and protect the people, a democracy is turned into an authoritarian
empire.</p>

<blockquote><p>So this is how liberty dies&#8230;with thunderous applause?</p><footer><strong>Padme, Star Wars Ep. 3</strong> <cite><a href='http://vimeo.com/57563428'>vimeo.com/57563428/&hellip;</a></cite></footer></blockquote>


<p>Not on my watch.  And not on yours either.  Join us this 4th of July for a
peaceful rally against infringements on our 4th Amendment rights as part of the
national
<a href="http://www.restorethefourth.net/">Restore the Fourth</a>
movement.  Let&rsquo;s ask the NSA to go
back to the drawing board and find a way to uncompromisingly provide security
<strong><em>and</em></strong> privacy.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[8 Months in Mozilla]]></title>
    <link href="http://nickdesaulniers.github.io/blog/2013/06/13/8-months-in-mozilla/"/>
    <updated>2013-06-13T00:54:00-07:00</updated>
    <id>http://nickdesaulniers.github.io/blog/2013/06/13/8-months-in-mozilla</id>
    <content type="html"><![CDATA[<p>Besides 3 months interrupted to finish degree requirements, and including an
internship, I’ve been at Mozilla for about 8 months now.  After reading a
<a href="http://ahmetalpbalkan.com/blog/8-months-microsoft/">blog post</a>
of another software engineer’s experience at Microsoft, I count my
blessings.  Reading that article set off too many alarms in my
head.  It was well written, and I sugguest you go
<a href="http://ahmetalpbalkan.com/blog/8-months-microsoft/">read it</a>, but my takeaway
was that that any big name corporation people dream about working at is
actually quite dystopian, and I do not feel that that is the case here.</p>

<hr />

<p><del>Expect no documentation in corporations</del></p>

<h2>Expect documentation to be sparse or bit rotted</h2>

<p>When developers are coding at an unhindered pace, writing documentation does
suck.  But once a project reaches a certain size, it cannot sustain growth
without additional support from additional developers.  When a project reaches
this point, it’s worthwhile to step back from unbridled coding to write some
docs for your new devs.  This is really important for open source projects, to
get help from volunteers.  I’ve heard roughly 50% of Mozilla’s code comes
from volunteers; so making their lives easier is a must.  Also,
writing documentation is a great way to start contributing to an open source
code
base.  Documentation is a gift that keeps on giving.  By keeping information to
yourself, you have power over others, but that doesn’t help your organization
move forward as a whole.  Depending on the pace of code development,
documentation tends to bit rot.  I’m all for code that’s clear enough to be
self documenting, but sometimes comment blocks that describe high level
overviews of the code base’s architecture can really help newbies.  When you
update code, you should update the relevant tests and documentation.</p>

<hr />

<p><del>It is not what you do, it is what you sell</del></p>

<h2>It’s all about maintainability</h2>

<p>I’ve had
<a href="https://bugzilla.mozilla.org/show_bug.cgi?id=744640">nightmare code reviews</a>.
Literally reviews so long I’ve had to print
them out and cross them out one by one as I fixed them to help me keep track
of what I had left to fix.  But by working through them, I learned an awful lot
about professional code development.
It literally taught me to write some bulletproof code.  While it was
embarrassing for me at the time, and even a little now to admit, I’m glad
because it helped me grow professionally at an accelerated pace and I can
appreciate that.  People come and go, but their code lives on.  Think about
this, some day you will die, but code you’ve written will probably outlast you.
You wont be around to defend your coding decisions, so commit it right while
you can.  Imagine the poor bastard who has to maintain your code, why not try
and make their life a little easier?  As an engineer, ethics and morality are
the
<a href="http://courses.cs.vt.edu/cs3604/lib/WorldCodes/Hippocr.Oath.html">Hippocratic Oath</a>
you answer to, not someone with a business title.  If you
think this is wrong, if you’re not allowed to offer feedback or criticize the
decisions made by those above you, then you work for the wrong company.</p>

<hr />

<p><del>Not everbody is passionate for engineering</del></p>

<h2>Everyone here is super passionate about what they do</h2>

<p>While a lot of people here have active family lives, they are all active
Mozillians.  I’ve yet to meet anyone who didn’t have a common ground in web
based software (back end, front end, browser, OS, graphics, etc.) to speak the
same language as me, but also acute knowledge in his or her specialty.  By
being surrounded be so many smart, enthusiastic people I can tell you all about
JavaScript performance, about compiler front ends and back ends, about codecs,
about layout and rendering, about handling billions of hits a day, etc.  If
you’re the smartest in the group, the group is dragging you down.  I frequently
feel like I’m not the smartest when surrounded by most of my peers, and I’m
cool with that.  I am young and naïve and have so much to learn, and Mozilla is
an awesome place to grow.</p>

<hr />

<p><del>2-3 hours of coding a day is great</del></p>

<h2>Contribute at your pace</h2>

<p>There’s no pressure here about time spent coding.  Time spent or number of
lines written is not a benchmark to live by, code quality is.  I’m a five
o’clock developer, but when I go home I’m reading up on various software
topics and expanding my range of knowledge.  I have a big bookshelf I pride
myself in filling with various programming and hardware design related books.
Mozilla provides all kinds of distractions (tech talks, food, pool table, video
games), because comfortable developers are better developers.  I went to a talk
today where the senior employee talking told me that we should not waste our
time in meetings if we feel they are meaningless.  “Just walk out!”</p>

<hr />

<p><del>Not giving back to the public domain is the norm</del></p>

<h2>Giving back to the public domain is the norm</h2>

<p>My very first week as an intern, I had just finished
<a href="https://github.com/nickdesaulniers/Super-Tip-Calculator">my first project</a>.
I approached my manager and said “Hey I’m going to publish this now on
Github.  That’s cool right?”  There was an uncomfortably long pause from my
manager, then “yeah man go for!”  Literally everything I’ve ever worked on
here
<a href="https://github.com/nickdesaulniers?tab=repositories">has been published as open source</a>.
Writing software is about expression.  To be able to publish my
code freely, literally the reason the World Wide Web was created, allows me to
be a
part of someone else’s professional development; my expressions and code
mannerisms living on in theirs.  Probably the coolest story I have about
working here on open source software happened a few weeks ago.  It was a Friday
afternoon and I was assessing issues in our issue tracker, deciding which I was
going to tackle first on Monday.  Monday morning I came in to a pull request
with my name on it.  Literally some person who had never spoken to me, nor any
other core devs.  Someone who didn’t live in the same country as me or possibly
speak my language natively, they just picked up an issue and wrote a patch in a
mutually common language: code.  It didn’t matter that the volunteer was or
wasn’t employed by Mozilla; they understood the problem they faced enough to
fix it for themselves and everyone else. Anyone can partake in the development
process and earn the priviledge and trust to become a core volunteer.</p>

<hr />

<p><del>The world outside is not known here a lot</del></p>

<h2>Everyone here is aware of the outside world</h2>

<p>Seeing as we tend to wind up on HN et al almost daily, many of us frequent HN,
Reddit, Twitter, and /..  It’s always interesting to see coworkers show up in
comment threads.  When you say something hurtful about Mozilla or Mozilla
products in these forums, more than a few people here are going to see this and
get their feelings hurt.  It’s really unfortunate especially since our issue
tracker is public, and it takes a few minutes to fill out a simple bug (and a
few more for steps to reproduce) where we actually look for issues (and not on
Twitter, for instance).  Anyways, being aware of the new hotness has benefits
again in terms of expression.  So much of Rust is based on ideas from various
languages.  So much of ECMAScript 6 comes from CoffeeScript.  So many libraries
have interesting and useful abstractions.  Saying “bah humbug new hotness
bullshit” is naïve; new languages and frameworks became popular because people
found that they made software development marginally better, and by closing
your mind to them you loose out on being able to take those ideas and
incorporate them in your current or favorite language/framework/project.  If
anything, being more informed about your enemy makes your argument stronger.  I
can’t tell you how many times I’ve heard someone talk shit about Ruby, yet when
pressed didn’t have the slightest knowledge of the language. Yet I’ve had
truly great debates with those well versed in Ruby.  Try to only remark on
positives, and lay off negatives unless they have actually bitten you.</p>

<hr />

<p><del>Copy-pasting code can be okay</del></p>

<h2>Measure once, cut twice [is wrong!]</h2>

<p>Stack overflow is great.  There’s no way to know every little bit of C or C++.
JavaScript has some bad parts.  But by copying and pasting code that was
written from another context, you’re probably introducing bugs into your code.
Don’t repeat yourself, and don’t cut corners just to get shit done.</p>

<hr />

<p><del>Code reviews can be skipped</del></p>

<h2>Code reviews are nothing but beneficial</h2>

<p>If they are taking too long to the point where you’re considering cutting them
out, your team is probably understaffed and overworked.  Code reviews allow
others to spot bugs that you may have overlooked.  Seeing as they didn’t write
the code, they can look at the code objectively without the same assumptions
you made that may or may not actually be there.  It also allows you to grow
as a developer, assuming you take the lessons learned to heart.  The reviewer
may learn a thing or two.  This should obviously occur less frequently
(otherwise you have the lesser experienced coder reviewing the more experienced
coder’s code), but you can still teach an old dog new tricks.  If you get to a
point where you’re getting too bogged down in code reviews, you probably
haven’t been delegating enough or haven’t communicated well enough with your
manager or the rest of the team.</p>

<hr />

<p><del>Latest software, meh</del></p>

<h2>Latest software, duh</h2>

<p>Old, unpatched versions of popular software are susceptible to security flaws.
Java especially.  It may involve work to update your code for new environments,
but it’s easier to bite the bullet in small increments frequently than it is to
wait until it’s too late.</p>

<hr />

<p><del>Your specialties usually do not matter</del></p>

<h2>You were hired because of the need for someone on your team to have a certain expertise</h2>

<p>If this is not the case, what the hell is your recruiting department doing?
You know the part where start-ups say speed is everything?  It’s because of the
big established players not optimally allocating resources.  Even if you’re not
happy when you get here, you’re able to move or at least work on something
else.  I’ve had the freedom to work on Rust compiler, something I never would
have dreamed of doing before and not something I’m an expert in but something
that is mentally fulfilling and thought provoking.  Many of the people here are
famous for one thing or another and many of them work on things similar to
what they’re known for, while others are free to start new or tackle existing
projects.  We frequently borrow people from other teams who are able to lend a
hand in various aspects they specialize in.</p>

<p>Besides these responses, there’s just so much about my job that I love.  The
<a href="http://www.mozilla.org/en-US/about/manifesto/">Mozilla Manifesto</a>
is my holy book.  It makes me so happy
to be a part of such an incredible organization.  We have the transparency and
accountability the government could only dream of.  Instead of running from
wrongdoing,
<a href="https://optin.stopwatching.us/">we fight</a>!
We have so many interesting projects that anyone can get
<a href="http://www.whatcanidoformozilla.org/">involved with</a>!
We have so many employees well known for their contributions.
We have so much competition that keeps us humble.  We have so many experienced
and friendly senior software engineers who make great mentors to the new guard.
We have so many people dedicated to users, who don’t compromise privacy for
security (as those who do deserve neither).  We have such an amazing community
of staff, volunteers, reps, advocates, evangelists, users, localizers, testers,
etc. who understand that they have the power to affect the trajectory of their
favorite open source browser, mobile operating system, service, or library.</p>

<p>Again, I’m not making any of these points with your experiences
in mind.  I’m talking about what’s the norm here at my place of employment.</p>

<p>I’ve been told that working at Mozilla out of college spoils you.  If that’s
the case, if life at M$ is the norm, then my next job will have to be one of my
own creation.  I can only hope that a company I [will] create be in the image
of Mozilla.  Even then, I’ll still be a Mozillian; once a Mozillian, always a
Mozillian.  When people complain about their jobs, it’s completely foreign to
me.  You always have the power to change your situation, and I view
disagreement to that point as self-doubt.  I love the work that I do and if
your company does something that you don’t agree with, then I challenge you to
change your situation.  Be that speaking out or moving on.</p>

<hr />

<h2>At the end</h2>

<p>It’s about expressing your legacy; that will have repercussions that will shape
our world.  Chasing paychecks and enduring crappy working conditions is not a
way to live.  So what do you think, world traveler?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rust: Pattern Matching and the Option Type]]></title>
    <link href="http://nickdesaulniers.github.io/blog/2013/05/07/rust-pattern-matching-and-the-option-type/"/>
    <updated>2013-05-07T18:41:00-07:00</updated>
    <id>http://nickdesaulniers.github.io/blog/2013/05/07/rust-pattern-matching-and-the-option-type</id>
    <content type="html"><![CDATA[<p>The other day I was thinking about the function for performing dynamic memory
allocation in the C standard library, malloc. From the manual pages,
<code>If successful, the malloc() function returns a pointer to allocated memory.
If there is an error, it
returns a NULL pointer and sets errno to ENOMEM.</code> One of the most common errors
when using malloc is not checking for allocation failure.  The allocation is not
guaranteed to succeed and trying to use a NULL reference can lead to program
crashes.</p>

<p>So a common pattern we&rsquo;ll see is:</p>

<figure class='code'><figcaption><span>C</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="kt">int</span><span class="o">*</span> <span class="n">nums</span> <span class="o">=</span> <span class="p">(</span><span class="kt">int</span><span class="o">*</span><span class="p">)</span> <span class="n">malloc</span><span class="p">(</span><span class="k">sizeof</span><span class="p">(</span><span class="kt">int</span><span class="p">));</span>
</span><span class='line'><span class="k">if</span> <span class="p">(</span><span class="n">nums</span> <span class="o">==</span> <span class="nb">NULL</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1">// handle error</span>
</span><span class='line'><span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>  <span class="o">*</span><span class="n">nums</span> <span class="o">=</span> <span class="mi">7</span><span class="p">;</span>
</span><span class='line'>  <span class="c1">// operate on nums</span>
</span><span class='line'>  <span class="n">free</span><span class="p">(</span><span class="n">nums</span><span class="p">);</span>
</span><span class='line'>  <span class="n">nums</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Here we allocated space for an integer, cast the <code>void*</code> returned from malloc
to an <code>int*</code>, compared it against the <code>NULL</code> pointer, then freed the allocated
memory and removed the reference.</p>

<p>One of the big problems with the null pointer has to do with
safely dereferencing it.  In C, dereferencing the null pointer is undefined
and usually leads to a segfault and program crash.</p>

<p>It can be so unsafe to work with null pointers that
C. A. R. Hoare refers to them as his billion-dollar mistake:</p>

<blockquote><p>I call it my billion-dollar mistake. It was the invention of the null reference in 1965. At that time, I was designing the first comprehensive type system for references in an object oriented language (ALGOL W). My goal was to ensure that all use of references should be absolutely safe, with checking performed automatically by the compiler. But I couldn&#8217;t resist the temptation to put in a null reference, simply because it was so easy to implement. This has led to innumerable errors, vulnerabilities, and system crashes, which have probably caused a billion dollars of pain and damage in the last forty years.</p><footer><strong>C.A.R. Hoare, InfoQ</strong> <cite><a href='http://www.infoq.com/presentations/Null-References-The-Billion-Dollar-Mistake-Tony-Hoare'>Null References: The Billion Dollar Mistake</a></cite></footer></blockquote>


<p>So how do we represent the value of nothing?  With an integer, for example, your
first instinct might be to use 0 to refer to no value.  But 0 <em>is</em> a value, so
how do we represent the range of integer values but also whether there is a
value or not?</p>

<p>Rust, a systems programming language with a focus on safety and concurrency,
does not have the concept of a null pointer.  Instead, it has a different
construct to represent the absence of value, a whole other structure called an
<a href="http://static.rust-lang.org/doc/core/option.html">Option<T></a>.  It is an
<a href="http://static.rust-lang.org/doc/core/option.html#enum-option">enumerated type</a> that can
either be None (no value) or Some(T) (a specialization of type T).</p>

<p>So what the heck is an option type and how do we use it?  The option type is
a polymorphic type (generic type that can be specialized) that encapsulates
either an empty constructor or the constructor of the original data type.  Let&rsquo;s
take a trip down the rabbit hole to see how we use one.  First, let&rsquo;s look at
some C++ code, and then translate it to Rust.</p>

<figure class='code'><figcaption><span>option.cpp</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="cp">#include &lt;iostream&gt; </span><span class="c1">// cout, endl</span>
</span><span class='line'><span class="cp">#include &lt;stdlib.h&gt; </span><span class="c1">// rand</span>
</span><span class='line'><span class="cp">#include &lt;time.h&gt; </span><span class="c1">// time</span>
</span><span class='line'><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// If there is a &#39;random error&#39; returns NULL</span>
</span><span class='line'><span class="k">const</span> <span class="kt">int</span><span class="o">*</span> <span class="k">const</span> <span class="n">may_return_null</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">srand</span><span class="p">(</span><span class="n">time</span><span class="p">(</span><span class="nb">NULL</span><span class="p">));</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">rand</span><span class="p">()</span> <span class="o">%</span> <span class="mi">2</span> <span class="o">==</span> <span class="mi">1</span> <span class="o">?</span> <span class="k">new</span> <span class="kt">int</span><span class="p">(</span><span class="mi">666</span><span class="p">)</span> <span class="o">:</span> <span class="nb">NULL</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="n">main</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1">// if else</span>
</span><span class='line'>  <span class="k">const</span> <span class="kt">int</span><span class="o">*</span> <span class="k">const</span> <span class="n">x</span> <span class="o">=</span> <span class="n">may_return_null</span><span class="p">();</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">x</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// switch</span>
</span><span class='line'>    <span class="k">switch</span> <span class="p">(</span><span class="o">*</span><span class="n">x</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">case</span> <span class="mi">777</span><span class="o">:</span> <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;Lucky Sevens&quot;</span>        <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span> <span class="k">break</span><span class="p">;</span>
</span><span class='line'>      <span class="k">case</span> <span class="mi">666</span><span class="o">:</span> <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;Number of the Beast&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span> <span class="k">break</span><span class="p">;</span>
</span><span class='line'>      <span class="k">case</span> <span class="mi">42</span><span class="o">:</span> <span class="n">cout</span>  <span class="o">&lt;&lt;</span> <span class="s">&quot;Meaning of Life&quot;</span>     <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span> <span class="k">break</span><span class="p">;</span>
</span><span class='line'>      <span class="k">default</span><span class="o">:</span> <span class="n">cout</span>  <span class="o">&lt;&lt;</span> <span class="s">&quot;Nothing special&quot;</span>     <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span> <span class="k">break</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;No value&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// single if</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="o">*</span><span class="n">x</span> <span class="o">==</span> <span class="mi">666</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;Did I mention that Iron Maiden is my favorite band?&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Let&rsquo;s step through this program line by line, starting in main.</p>

<figure class='code'><figcaption><span>Line 14</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="k">const</span> <span class="kt">int</span><span class="o">*</span> <span class="k">const</span> <span class="n">x</span> <span class="o">=</span> <span class="n">may_return_null</span><span class="p">();</span>
</span></code></pre></td></tr></table></div></figure>


<p>Here we&rsquo;re calling a function that may return null, just like malloc!</p>

<figure class='code'><figcaption><span>Lines 8-9</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="n">srand</span><span class="p">(</span><span class="n">time</span><span class="p">(</span><span class="nb">NULL</span><span class="p">));</span>
</span><span class='line'><span class="k">return</span> <span class="n">rand</span><span class="p">()</span> <span class="o">%</span> <span class="mi">2</span> <span class="o">==</span> <span class="mi">1</span> <span class="o">?</span> <span class="k">new</span> <span class="kt">int</span><span class="p">(</span><span class="mi">666</span><span class="p">)</span> <span class="o">:</span> <span class="nb">NULL</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>In the body of <code>may_return_null</code> we seed the random number generator, generate a random number, mod it by 2
(so it can either be 0 or 1, 50-50 chance, hopefully), then either return a
pointer pointing to memory allocated on the heap or the null pointer.  We also use the succinct
ternary operator, which gives us the power of a conditional statement in the
form of a concise expression.</p>

<figure class='code'><figcaption><span>Line 15</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="k">if</span> <span class="p">(</span><span class="n">x</span><span class="p">)</span> <span class="p">{</span>
</span></code></pre></td></tr></table></div></figure>


<p>We check if the pointer is valid, that is that it is safe to use, as <code>NULL</code> is
falsy in a C++ conditional.  If it is, then we can safely dereference it.  Let&rsquo;s
switch on the (dereferenced) value.  Notice how we need to break to explicitly
prevent fall through, though
<a href="http://books.google.com/books?id=4vm2xK3yn34C&amp;pg=PA37&amp;lpg=PA38&amp;dq=expert+c+fallthrough&amp;source=bl&amp;ots=Ho98ZhXF9X&amp;sig=PebysT8-3zA_9B2aRkuvnz4mCmY&amp;hl=en&amp;sa=X&amp;ei=j8CJUdeWMerJiwLQmICoDw&amp;ved=0CC4Q6AEwAA#v=onepage&amp;q=expert%20c%20fallthrough&amp;f=false">97% of the time that&rsquo;s what you intend</a>.</p>

<figure class='code'><figcaption><span>Lines 17-22</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="k">switch</span> <span class="p">(</span><span class="o">*</span><span class="n">x</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">case</span> <span class="mi">777</span><span class="o">:</span> <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;Lucky Sevens&quot;</span>        <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span> <span class="k">break</span><span class="p">;</span>
</span><span class='line'>  <span class="k">case</span> <span class="mi">666</span><span class="o">:</span> <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;Number of the Beast&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span> <span class="k">break</span><span class="p">;</span>
</span><span class='line'>  <span class="k">case</span> <span class="mi">42</span><span class="o">:</span> <span class="n">cout</span>  <span class="o">&lt;&lt;</span> <span class="s">&quot;Meaning of Life&quot;</span>     <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span> <span class="k">break</span><span class="p">;</span>
</span><span class='line'>  <span class="k">default</span><span class="o">:</span> <span class="n">cout</span>  <span class="o">&lt;&lt;</span> <span class="s">&quot;Nothing special&quot;</span>     <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span> <span class="k">break</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>If the pointer was null, the else branch of the conditional would execute
printing a different result.</p>

<figure class='code'><figcaption><span>Line 24</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;No value&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Finally in we check the value pointed to.  Did I forget something here?  Save
that thought, we&rsquo;ll come back to it.</p>

<figure class='code'><figcaption><span>Lines 28-30</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="k">if</span> <span class="p">(</span><span class="o">*</span><span class="n">x</span> <span class="o">==</span> <span class="mi">666</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;Did I mention that Iron Maiden is my favorite band?&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Let&rsquo;s see my rough translation of this program into Rust.</p>

<figure class='code'><figcaption><span>option.rs</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="k">use</span> <span class="n">core</span><span class="o">::</span><span class="n">rand</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">fn</span> <span class="n">may_return_none</span> <span class="p">()</span> <span class="o">-&gt;</span> <span class="n">Option</span><span class="o">&lt;</span><span class="k">int</span><span class="o">&gt;</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">if</span> <span class="n">rand</span><span class="o">::</span><span class="n">Rng</span><span class="p">().</span><span class="n">next</span><span class="p">()</span> <span class="o">%</span> <span class="m">2</span> <span class="o">==</span> <span class="m">1</span> <span class="p">{</span> <span class="n">Some</span><span class="p">(</span><span class="m">666</span><span class="p">)</span> <span class="p">}</span> <span class="k">else</span> <span class="p">{</span> <span class="n">None</span> <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">fn</span> <span class="n">main</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">let</span> <span class="n">x</span><span class="o">:</span> <span class="n">Option</span><span class="o">&lt;</span><span class="k">int</span><span class="o">&gt;</span> <span class="o">=</span> <span class="n">may_return_none</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">io</span><span class="o">::</span><span class="n">println</span><span class="p">(</span><span class="n">match</span> <span class="n">x</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">Some</span><span class="p">(</span><span class="m">777</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="s">&quot;Lucky Sevens&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="n">Some</span><span class="p">(</span><span class="m">666</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="s">&quot;Number of the Beast&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="n">Some</span><span class="p">(</span><span class="m">422</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="s">&quot;Meaning of Life&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="n">Some</span><span class="p">(</span><span class="n">_</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="s">&quot;Nothing special&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="n">None</span> <span class="o">=&gt;</span> <span class="s">&quot;No value&quot;</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">match</span> <span class="n">x</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">Some</span><span class="p">(</span><span class="m">666</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">io</span><span class="o">::</span><span class="n">println</span><span class="p">(</span><span class="s">&quot;Did I mention that Iron Maiden is my favorite Band?&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>    <span class="n">_</span> <span class="o">=&gt;</span> <span class="p">{}</span>
</span><span class='line'>  <span class="p">};</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Both programs, when compiled <em>should</em> randomly print either:</p>

<figure class='code'><figcaption><span>option.rs</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="n">No</span> <span class="n">Value</span>
</span><span class='line'><span class="c1">// or</span>
</span><span class='line'><span class="n">Number</span> <span class="n">of</span> <span class="n">the</span> <span class="n">Beast</span>
</span><span class='line'><span class="n">Did</span> <span class="n">I</span> <span class="n">mention</span> <span class="n">that</span> <span class="n">Iron</span> <span class="n">Maiden</span> <span class="n">is</span> <span class="n">my</span> <span class="n">favorite</span> <span class="n">Band</span><span class="o">?</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now let&rsquo;s walk through the Rust code, starting at main and compare it to the
equivalent C++ code.</p>

<figure class='code'><figcaption><span>option.rs Line 8</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="k">let</span> <span class="n">x</span><span class="o">:</span> <span class="n">Option</span><span class="o">&lt;</span><span class="k">int</span><span class="o">&gt;</span> <span class="o">=</span> <span class="n">may_return_none</span><span class="p">();</span>
</span></code></pre></td></tr></table></div></figure>


<figure class='code'><figcaption><span>option.cpp Line 14</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="k">const</span> <span class="kt">int</span><span class="o">*</span> <span class="k">const</span> <span class="n">x</span> <span class="o">=</span> <span class="n">may_return_null</span><span class="p">();</span>
</span></code></pre></td></tr></table></div></figure>


<p>I read this Rust code as &lsquo;let x be type Option,
specialized to type int initialized
to the return value of may_return_none.&rsquo;  I read the C++ as &lsquo;x is a const pointer
to a const integer initialized to the return value of may_return_none.&rsquo;  It&rsquo;s
important to note that values and pointers in Rust default to being immutable,
where as in c++ they default to being mutable, which is why we need to be
explicit about their const&#8217;ness.  In Rust, we could declare x as being explicitly
mutable: <code>let mut x: ... = ...;</code>.  In both, we can also leave the explicit types
to be inferred by the compiler.</p>

<figure class='code'><figcaption><span>option.rs Line 4</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="k">if</span> <span class="n">rand</span><span class="o">::</span><span class="n">Rng</span><span class="p">().</span><span class="n">next</span><span class="p">()</span> <span class="o">%</span> <span class="m">2</span> <span class="o">==</span> <span class="m">1</span> <span class="p">{</span> <span class="n">Some</span><span class="p">(</span><span class="m">666</span><span class="p">)</span> <span class="p">}</span> <span class="k">else</span> <span class="p">{</span> <span class="n">None</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<figure class='code'><figcaption><span>option.cpp Lines 8-9</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="n">srand</span><span class="p">(</span><span class="n">time</span><span class="p">(</span><span class="nb">NULL</span><span class="p">));</span>
</span><span class='line'><span class="k">return</span> <span class="n">rand</span><span class="p">()</span> <span class="o">%</span> <span class="mi">2</span> <span class="o">==</span> <span class="mi">1</span> <span class="o">?</span> <span class="k">new</span> <span class="kt">int</span><span class="p">(</span><span class="mi">666</span><span class="p">)</span> <span class="o">:</span> <span class="nb">NULL</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now for the body of <code>may_return_none</code>.  Rust does not have a ternary operator,
so a single line <code>if {} else {}</code> block will have to do.  We also don&rsquo;t need
parentheses around the predicate in the conditional statement.  If we add them,
no harm is done, as we&rsquo;d just be being redundant about order of operations.
There
are no semicolons in this expression, nor a return statement in this function.
Rust will return the last expression in a function or method if the semicolon is
left off.  Also there is no such thing as a conditional statement, only
conditional expressions; the if is itself something that can be evaluated and
assigned to a variable!  We see this later in the code where we pass the evaluation
of a match expression directly into a call of <code>io::println</code>.
Rust returns the evaluation of the if expression,
which is the evaluation of the branch&rsquo;s block specified by the predicate,
which will randomly be one of the two enumerated types of <code>Option&lt;int&gt;</code>, either
an encapsulation of a int whose literal value is <code>666</code>, <code>Some&lt;666&gt;</code>, or
the representation of no value, <code>None</code>.  I believe the RNG code has changed in 0.7,
this code was written in 0.6.</p>

<p>In Rust, to get the value out of an option type, we pattern match on it.  Pattern
matching is something I became familiar with through the
<a href="http://learnyouahaskell.com/syntax-in-functions#pattern-matching">Haskell</a> programming language.  Pattern
matching is a powerful language construct that can entirely replace conditionals.
In fact, the one line if expression could have been written using a match
expression:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="k">if</span> <span class="n">rand</span><span class="o">::</span><span class="n">Rng</span><span class="p">().</span><span class="n">next</span><span class="p">()</span> <span class="o">%</span> <span class="m">2</span> <span class="o">==</span> <span class="m">1</span> <span class="p">{</span> <span class="n">Some</span><span class="p">(</span><span class="m">666</span><span class="p">)</span> <span class="p">}</span> <span class="k">else</span> <span class="p">{</span> <span class="n">None</span> <span class="p">}</span>
</span><span class='line'><span class="c1">// or</span>
</span><span class='line'><span class="n">match</span> <span class="n">rand</span><span class="o">::</span><span class="n">Rng</span><span class="p">().</span><span class="n">next</span><span class="p">()</span> <span class="o">%</span> <span class="m">2</span> <span class="p">{</span> <span class="m">1</span> <span class="o">=&gt;</span> <span class="n">Some</span><span class="p">(</span><span class="m">666</span><span class="p">),</span> <span class="n">_</span> <span class="o">=&gt;</span> <span class="n">None</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>The basic design pattern
for accessing the value of an option type in Rust looks like:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="n">match</span> <span class="n">x</span> <span class="p">{</span> <span class="c1">// x: Option&lt;T&gt;</span>
</span><span class='line'>  <span class="n">Some</span><span class="p">(</span><span class="n">y</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span> <span class="o">*</span><span class="n">y</span> <span class="p">},</span>
</span><span class='line'>  <span class="n">None</span> <span class="o">=&gt;</span> <span class="p">{}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The curly braces are optional for one liners (no block needed).
Pattern matches have to be exhaustive.  That means I have to exhaust all
possibilities for what the deconstructed value could be.  You can use a branch
that looks like:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="n">_</span> <span class="o">=&gt;</span> <span class="err">&#39;</span><span class="n">everything</span> <span class="k">else</span><span class="err">&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>to catch everything else.  The underscore here means &ldquo;every other possible case.&rdquo;
So by having to use a match expression (also not a
statement, as opposed to C++&rsquo;s switch statement), which itself must be exhaustive,
Rust forces us to handle the case where the optional type is None!  This will
help us again in the future.
We also don&rsquo;t need parentheses around the predicate for the match expression, which
in this case is just a single variable, <code>x</code>.</p>

<p>In the value
<code>Some(_)</code>, the underscore has an additional meaning here that we would not use a
variable in the corresponding arm&rsquo;s block.  If we declared it as <code>Some(y)</code> we would get the warning:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="n">option</span><span class="p">.</span><span class="n">rs</span><span class="o">:</span><span class="m">14</span><span class="o">:</span><span class="m">9</span><span class="o">:</span> <span class="m">14</span><span class="o">:</span><span class="m">11</span> <span class="n">warning</span><span class="o">:</span> <span class="n">unused</span> <span class="n">variable</span><span class="o">:</span> <span class="err">`</span><span class="n">y</span><span class="err">`</span>
</span><span class='line'><span class="n">option</span><span class="p">.</span><span class="n">rs</span><span class="o">:</span><span class="m">14</span>     <span class="n">Some</span><span class="p">(</span><span class="n">y</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="s">&quot;Nothing special&quot;</span><span class="p">,</span>
</span><span class='line'>                      <span class="o">^~</span>
</span></code></pre></td></tr></table></div></figure>


<p>I hope back in my C++ code you spotted the fatal flaw.  On line 28, I just
dereferenced a raw pointer without checking its validity.  This is a violation
of memory safety.</p>

<figure class='code'><figcaption><span>option.cpp Line 28</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="k">if</span> <span class="p">(</span><span class="o">*</span><span class="n">x</span> <span class="o">==</span> <span class="mi">666</span><span class="p">)</span> <span class="p">{</span>
</span></code></pre></td></tr></table></div></figure>


<p>When running the C++ code, instead of seeing <code>No value</code> printed to stdout in the
case of no value, a segfault occurs.</p>

<figure class='code'><figcaption><span>option.cpp Line 28</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="n">No</span> <span class="n">value</span>
</span><span class='line'><span class="p">[</span><span class="mi">1</span><span class="p">]</span>    <span class="mi">80265</span> <span class="n">segmentation</span> <span class="n">fault</span>  <span class="p">.</span><span class="o">/</span><span class="n">option</span>
</span></code></pre></td></tr></table></div></figure>


<p>What I should have done is something more like:</p>

<figure class='code'><figcaption><span>Line 28 corrected</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="k">if</span> <span class="p">(</span><span class="n">x</span> <span class="o">&amp;&amp;</span> <span class="o">*</span><span class="n">x</span> <span class="o">==</span> <span class="mi">666</span><span class="p">)</span> <span class="p">{</span>
</span></code></pre></td></tr></table></div></figure>


<p>But, the C++ compiler let me get away with not handling the case where the
pointer was invalid (even if doing nothing in the case of &ldquo;handling&rdquo; it).  By
leaving out the check for a valid pointer, I have instructed the machine to
behave the same or follow the same code path with and without a reference to a
valid memory location.  Let&rsquo;s see what happens when I don&rsquo;t handle the None case
by deleting line 15 or option.rs, <code>None =&gt; "No value"</code>:</p>

<figure class='code'><figcaption><span>Line 28 corrected</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="n">option</span><span class="p">.</span><span class="nl">rs:</span><span class="mi">10</span><span class="o">:</span><span class="mi">14</span><span class="o">:</span> <span class="mi">16</span><span class="o">:</span><span class="mi">3</span> <span class="nl">error:</span> <span class="n">non</span><span class="o">-</span><span class="n">exhaustive</span> <span class="nl">patterns:</span> <span class="n">None</span> <span class="n">not</span> <span class="n">covered</span>
</span><span class='line'><span class="n">option</span><span class="p">.</span><span class="nl">rs:</span><span class="mi">10</span>   <span class="n">io</span><span class="o">::</span><span class="n">println</span><span class="p">(</span><span class="n">match</span> <span class="n">x</span> <span class="p">{</span>
</span><span class='line'><span class="n">option</span><span class="p">.</span><span class="nl">rs:</span><span class="mi">11</span>     <span class="n">Some</span><span class="p">(</span><span class="mi">777</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="s">&quot;Lucky Sevens&quot;</span><span class="p">,</span>
</span><span class='line'><span class="n">option</span><span class="p">.</span><span class="nl">rs:</span><span class="mi">12</span>     <span class="n">Some</span><span class="p">(</span><span class="mi">666</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="s">&quot;Number of the Beast&quot;</span><span class="p">,</span>
</span><span class='line'><span class="n">option</span><span class="p">.</span><span class="nl">rs:</span><span class="mi">13</span>     <span class="n">Some</span><span class="p">(</span><span class="mi">42</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="s">&quot;Meaning of Life&quot;</span><span class="p">,</span>
</span><span class='line'><span class="n">option</span><span class="p">.</span><span class="nl">rs:</span><span class="mi">14</span>     <span class="n">Some</span><span class="p">(</span><span class="n">_</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="s">&quot;Nothing special&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Not only did the compiler prevent me from generating an executable, it told me
that a pattern was not exhaustive, explicitly which one, and what case that was
not covered.</p>

<p>Coming back to encoding a lack of value for an int, we had left off that 0 <em>is</em>
a valid value.  For instance, how should we represent any other integer divided
by 0, as an integer?
Signed integers use a single bit to store whether
their value is positive or negative, the tradeoff being the signed integers
represent up to one less power of two than unsigned integers.  Maybe we could use an
additional bit to represent valid or invalid, but this would again cost us in
terms of representable values.
The IEEE 754 floating point representation has encodings for <a href="https://en.wikipedia.org/wiki/IEEE_floating_point#Formats">plus and minus
Infinity, plus and minus 0, and two kinds of NaN</a>.
To solve the validity problem, we can use enumerated types, which in Rust occur
as specializations of the Option type.  It&rsquo;s up to the compiler to implement
either additional information for the type, or use raw null pointers.  And to
get the value back out of the Option type, we <em>must</em> handle the case where there
is no valid value.</p>

<p>The key takeaways that I wish to convey are:</p>

<ol>
<li>In C and C++, I can use NULL to refer to a pointer that has no value.</li>
<li>A C/C++ compiler, such as clang, will allow me to compile code that violates
memory safety, such as dereferencing NULL pointers.</li>
<li>Rust instead uses Option types, an enumeration of a specialized type or None.</li>
<li>Rust forces me to use a match statement to access the possible value of an
Option type.</li>
<li>Pattern matching in Rust must be exhaustive.</li>
<li>The Rust compiler, rustc, forces me to handle the case where the pointer has
no value, whereas the C++ compiler, clang++, did not.</li>
<li>All conditional and switch statements can be replaced with pattern matching.</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The Persistence of Memory]]></title>
    <link href="http://nickdesaulniers.github.io/blog/2013/04/29/the-persistence-of-memory/"/>
    <updated>2013-04-29T20:35:00-07:00</updated>
    <id>http://nickdesaulniers.github.io/blog/2013/04/29/the-persistence-of-memory</id>
    <content type="html"><![CDATA[<blockquote><p>I would like to die on Mars&#8230;</p><footer><strong>Elon Musk, Bloomberg,</strong> <cite><a href='http://www.businessweek.com/articles/2012-09-13/elon-musk-the-21st-century-industrialist#p5,'>Elon Musk, the 21st Century Industrialist</a></cite></footer></blockquote>


<p>Well, isn&rsquo;t that forward thinking?  Granted, the full quote
<em>I would like to die on Mars, just not on impact</em> is meant to sound hopeful of
his company, <a href="http://www.spacex.com/">SpaceX</a>.  I agree that some day, humans
will be buried on Mars.  But is it forward thinking, enough?  Does it push the
needle to where it needs to be pushed?  Does it strive for innovation and push
our imagination like Star Trek did?  Or is it just a realistic goal for SpaceX?</p>

<blockquote><p>The person with big dreams is more powerful than one with all the facts.</p><footer><strong>Albert Einstein</strong></footer></blockquote>


<p>While Elon would like to die on Mars, I think it would be neat to transfer my &ldquo;soul&rdquo; into a
computer.  We refer to data persistence within a computer as memory, using
transistors and capacitors to store charges, effectively &ldquo;remembering&rdquo; a
particular state.  While neurons, dendrites, and synapses within the human
brain don&rsquo;t quite work the same as RAM, I believe we will find a way to
interface them some day.  If one could transfer to a computer, maybe they could
transfer back, or swap even.  One could
theoretically trade entire bodies.  The jury is still out for me as far my
opinion of Google&rsquo;s Glass, but I see wearable computing as a step in the right
direction towards interfacing with the human body.  I guess it reminds me of the
<a href="http://futurama.wikia.com/wiki/Heads_in_Jars">Heads in Jars from Futurama</a>.
I recognize that the old guard must give way for the new guard, lest the new be
held in place, bound socially by the old.</p>

<p>In database systems, there is this notion of
<a href="http://en.wikipedia.org/wiki/Atomic_transaction">Atomicity</a>, where a set of
operations is guaranteed to either complete as a group, or all fail should
at least one fail.  One of the most popular examples is a bank transfer.  Say
you&rsquo;re transferring $100 from Bank A to Bank B.  Bank A&rsquo;s database should not
dock your account $100 until Bank B has added $100, and vice versa.  Imagine
if the power went out after Bank A docked your account, but before Bank B added
to your account; that money could just disappear.  Bank B may have received it
but not credited your account, or Bank A may have it, just not a record that
it&rsquo;s yours.  You may have just doubled your money, or lost all of it.
The notion of
Atomicity provides for &ldquo;transactions,&rdquo; or sets of instructions that are
guaranteed to all pass or all fail.</p>

<p>Atomicity would be important for a memory transference device.  Once you were
transferred into a machine, would it still be &ldquo;you&rdquo; if you remained in your
body?  A physical clone, is as much <em>you</em>
<del><a href="http://www.dailymail.co.uk/sciencetech/article-2232148/Identical-twins-genetically-different-research-suggests.html">as an identical twin</a></del>,
but will never have the same memories and experiences that shape their mind.  If
you merely copied your mind to a machine rather than transferred it, then you
would still remained trapped in your
<a href="http://www.quotefully.com/q/Jk3y3rG2aP">rotting piece of meat</a>.</p>

<p>This is what I mean by transfer my &ldquo;soul.&rdquo;  An actual atomic transaction moving
all of your memories and experiences from body to machine, all at once, or not
at all.  I probably wouldn&rsquo;t want to
be the first volunteer for such a machine, because if the machine failed at the
atomic transaction, your soul would either be as lost as the $100 from the
earlier example, or you&rsquo;d just be copied, not moved.</p>

<p>In a world where diseases are too profitable to cure, I can imagine a world
where the richest 1% live forever while the poor are forced to die.  Frozen Walt
Disney just sat up.  An abuse of the technology, not too different a world from
the one in <a href="http://en.wikipedia.org/wiki/Surrogates_%28film%29">Surrogates</a>.</p>

<blockquote><p>Have you not done tormenting me with your accursed time! It&#8217;s Abominable! When! When! One day, is that not enough for you, one day he went dumb, one day I went blind, one day we&#8217;ll go deaf, one day we were born, one day we shall die, the same day, the same second, is that not enough for you? They give birth astride a grave, the light gleams an instant, then it&#8217;s night once more.</p><footer><strong>Pozzo</strong> <cite>Waiting for Godot by Samuel Becket</cite></footer></blockquote>




<blockquote><p>They say that it is fear of death and what comes after death that makes men turn to religion.</p><footer><strong>Mustafa Mond</strong> <cite>Brave New World by Alduos Huxley</cite></footer></blockquote>


<p>Ever since my father passed away, I&rsquo;ve occasionally suffered from existential
anxiety attacks.  It usually starts with me thinking about those Discovery
Channel shows about how the old the universe is, and how old it will become.
Then my mind starts to think of all of the really cool technological
advancements that have occurred in my lifetime, and how I wont be around to
experience all future advancements, like a game that others get to play while I
have to sit on the sidelines and watch.  Of course, if I&rsquo;m dead then I guess I
won&rsquo;t care.  Currently, I calm myself down my telling myself that such an event
is a long time away and I will live a long and happy life with many descendants,
though I have no guarantees.  My father only lived to be 48.</p>

<blockquote><p>&#8216;That&#8217;s such a weak excuse,&#8217; said Valentine. &#8216;Everyone dies. Everyone leaves. What matters is the things you build together before they go. What matters is the part of them that continues in you when they&#8217;re gone.&#8217;</p><footer><strong>Valentine</strong> <cite>Children of the Mind by Orson Scott Card</cite></footer></blockquote>




<blockquote><p>Where before they would bloom and wither in the space of a single day, now they hold their blooms for three and four days at a time. Moistened by the dew of night, bathed in the light of the sun, the white flowers strive to live their lives to the fullest, beautifying the town as if striving to live out the portion of life denied to those whose &#8220;tomorrows&#8221; were snatched away from them forever.</p><footer><strong>White Flowers</strong> <cite>Lost Odyssey</cite></footer></blockquote>




<blockquote><p>Human beings, who cannot live forever, daring to take a journey without end. This might be the ultimate tragedy, but it could just as well be the ultimate comedy. Kaim knows one thing, however: one cannot simply dismiss it as an exercise in futility.</p><footer><strong>The Upstreamers</strong> <cite>Lost Odyssey</cite></footer></blockquote>


<p>Randy Pausch&rsquo;s <em>The Last Lecture</em> taught me that legacy is the greatest thing you
can leave behind.  While I haven&rsquo;t yet started the business I&rsquo;ve always wanted,
my first legacy I will leave my kiddos is my collection of Iron Maiden vinyl
records.  They and their children will probably think I was nuts, but there is
the slim chance they might really appreciate my taste in music.  I also want to
write a book someday, that way I can marvel at how
<a href="http://www.goodreads.com/quotes/287093-beneath-this-mask-there-is-more-than-flesh-beneath-this">my ideas will outlast me</a>.</p>

<blockquote><p>I like to think that something survives after you die, it&#8217;s strange to think that you accumulate all this experience, and maybe a little wisdom, and it just goes away.  So I really want to believe that something survives, that maybe your consciousness endures.  But on the other hand, perhaps it&#8217;s like an on-off switch.  &#8220;Click!&#8221; And you&#8217;re gone.</p><footer><strong>Steve Jobs</strong> <cite>Steve Jobs by Walter Isaacson</cite></footer></blockquote>


<p>It terrifies me to no end to think what could possibly drive someone to suicide.
What doom a person would have to be surrounded with to honestly believe that no
matter what they did, that they could not change their current situation.  I
believe the journey is ultimately worth it.  It
terrifies me to think of all of the amazing minds this world has seen, among so
many who choose not to develop their own, that have come and gone.  Those who
could change the world yet are snatched away.</p>

<blockquote><p>This body holding me reminds me of my own mortality. Embrace this moment. Remember. We are eternal. All this pain is an illusion.</p><footer><strong>Parabola</strong> <cite>Tool</cite></footer></blockquote>


<p>I&rsquo;m sorry this post turned a little dark.  By talking about my fears, I hope to
not let them control me.  I believe publishing this will be a relief.  I think
I&rsquo;ll join Elon on Mars, but unlike Elon, I believe I will transcend my physical
being.  It&rsquo;s important therefor, to treasure your body while it lasts.</p>

<blockquote><p>&#8216;But it [life] won&#8217;t have amounted to anything,&#8217; said Grego. &#8216;If your children die, then it was all a waste.&#8217; &#8216;No&#8217; said Olhado quietly. Grego shook his head. &#8216;Yes it does, Olhado. Death undoes everything.&#8217; Olhado shrugged. &#8216;Then why do you bother doing everything, Grego? Because someday you will die. Why should anyone ever have children? Someday they will die, their children will die, all children will die. Someday stars will wind down or blow up. Someday death will cover us all like the water of a lake and perhaps nothing will ever come to the surface to show that we were there. But we were there, and during the time we lived, we were alive. That&#8217;s the truth-what is, what was, what will be-not what could be, what should have been, what never can be. If we die, then our death has meaning to the rest of the universe. Even if our lives are unknown, the fact that someone lived here, and died, that will have repercussions, that will shape the universe.&#8217;</p><footer><strong>Children of the Mind</strong> <cite>Orson Scott Card</cite></footer></blockquote>




<blockquote><p>There will allways be hope, wherever you are, until you yourself abondon it.</p><footer><strong>Old Revolutionary</strong> <cite>Lost Odyssey</cite></footer></blockquote>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Basic JIT]]></title>
    <link href="http://nickdesaulniers.github.io/blog/2013/04/03/basic-jit/"/>
    <updated>2013-04-03T00:05:00-07:00</updated>
    <id>http://nickdesaulniers.github.io/blog/2013/04/03/basic-jit</id>
    <content type="html"><![CDATA[<p>Ever since I learned about
<a href="`http://en.wikipedia.org/wiki/Just-in-time_compilation">Just In Time Compilation</a>
from the various
<a href="http://en.wikipedia.org/wiki/Ruby_%28programming_language%29#Implementations">Ruby VMs</a>
and
<a href="http://www.slideshare.net/newmovie/know-yourengines-velocity2011">JavaScript VMs</a>,
I&rsquo;ve been inspired.  I could tell you all about how just in time (JIT)
compilation worked, and how it could give your interpreted language a speed
boost.  It was so cool.  Well, it still is!  There&rsquo;s a ton of research going on
around JIT compilation.  But the problem for me is that I could never figure
out, let alone guess, how it was being done.  How could you compile code at
runtime, and then execute it?  I asked
<a href="http://pybites.blogspot.com/">Benjamin Peterson</a>
about how he had learned so much about JITs, and he referred me to
<a href="http://pypy.org/">pypy</a> (a Python JIT)&rsquo;s source.  But digging through source
was too much; I just wanted a simple example I could grok quickly.  So I&rsquo;ve
always been left wondering.</p>

<p>Luckily, I have an awesome job where I can meet face to face with the people
who are doing the work on making awesome production JIT compilers.  I spent
part of last week at <a href="http://www.gdconf.com/">GDC</a> demoing
<a href="https://blog.mozilla.org/blog/2013/03/27/mozilla-is-unlocking-the-power-of-the-web-as-a-platform-for-gaming/">Unreal Engine 3</a>
running in the browser.  The demo was actually the hard work of many, and I&rsquo;ll
dive into it more in another post following up the events, but
<a href="https://blog.mozilla.org/luke/">Luke Wagner</a>, a Mozillian working on the
JavaScript engine, added OdinMonkey to SpiderMonkey to allow optimizations of
<a href="https://blog.mozilla.org/luke/2013/03/21/asm-js-in-firefox-nightly/">asm.js</a>.</p>

<p>Luke is super friendly, and just listening to him talk with Dave Herman and
Alon Zakai is a treat.  I asked Luke the basics of JIT&#8217;ing at tonight&rsquo;s Mozilla
Research Party and he explained clearly. <em>Compile a simple object file, use
objdump to get the resulting platform specific assembly, use the mmap system
call to allocate some memory that you can write to <strong>AND</strong> execute, copy the
instructions into that buffer, typecast it to a function pointer and finally
call that.</em></p>

<p>So my goal was to at runtime, create a function that for simplicity&rsquo;s sake
multiplied two integers.  The first thing I did was write up a simple .c file,
then compile that to an object file with the -c flag.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="c1">// Compile me with: clang -c mul.c -o mul.o</span>
</span><span class='line'><span class="kt">int</span> <span class="nf">mul</span> <span class="p">(</span><span class="kt">int</span> <span class="n">a</span><span class="p">,</span> <span class="kt">int</span> <span class="n">b</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">a</span> <span class="o">*</span> <span class="n">b</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>As a heads up, I&rsquo;m on 64bit OSX.  So the generated assembly may differ on your
platform.  Obviously, the production JIT maintainers have abstracted away the
platform dependency, taking into account what platform you&rsquo;re on.  My example
doesn&rsquo;t, but that why I&rsquo;m walking you through the steps I took to find out the
x86_64 instructions.  The next step is to grab binutils, which is not installed
by default in OSX.  I used homebrew to install it: <code>brew install binutils</code>.
Homebrew installs gobjdump but it works with the same flags.</p>

<p>Once you have binutils and [g]objdump, the next step is to read out the machine
code from your object file, which is represented in hexadecimal.  By running
<code>gobjdump -j .text -d mul.o -M intel</code> you should get something similar
(remember, architecture dependent).</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="err">$</span> <span class="n">gobjdump</span> <span class="o">-</span><span class="n">j</span> <span class="p">.</span><span class="n">text</span> <span class="o">-</span><span class="n">d</span> <span class="n">mul</span><span class="p">.</span><span class="n">o</span> <span class="o">-</span><span class="n">M</span> <span class="n">intel</span>
</span><span class='line'>
</span><span class='line'><span class="n">Disassembly</span> <span class="n">of</span> <span class="n">section</span> <span class="p">.</span><span class="n">text</span><span class="o">:</span>
</span><span class='line'>
</span><span class='line'><span class="mo">0000000000000000</span> <span class="o">&lt;</span><span class="n">_mul</span><span class="o">&gt;:</span>
</span><span class='line'><span class="mi">0</span><span class="o">:</span> <span class="mi">55</span> <span class="n">push</span> <span class="n">rbp</span>
</span><span class='line'><span class="mi">1</span><span class="o">:</span> <span class="mi">48</span> <span class="mi">89</span> <span class="n">e5</span> <span class="n">mov</span> <span class="n">rbp</span><span class="p">,</span><span class="n">rsp</span>
</span><span class='line'><span class="mi">4</span><span class="o">:</span> <span class="mi">89</span> <span class="mi">7</span><span class="n">d</span> <span class="n">fc</span> <span class="n">mov</span> <span class="n">DWORD</span> <span class="n">PTR</span> <span class="p">[</span><span class="n">rbp</span><span class="o">-</span><span class="mh">0x4</span><span class="p">],</span><span class="n">edi</span>
</span><span class='line'><span class="mi">7</span><span class="o">:</span> <span class="mi">89</span> <span class="mi">75</span> <span class="n">f8</span> <span class="n">mov</span> <span class="n">DWORD</span> <span class="n">PTR</span> <span class="p">[</span><span class="n">rbp</span><span class="o">-</span><span class="mh">0x8</span><span class="p">],</span><span class="n">esi</span>
</span><span class='line'><span class="nl">a:</span> <span class="mi">8</span><span class="n">b</span> <span class="mi">75</span> <span class="n">fc</span> <span class="n">mov</span> <span class="n">esi</span><span class="p">,</span><span class="n">DWORD</span> <span class="n">PTR</span> <span class="p">[</span><span class="n">rbp</span><span class="o">-</span><span class="mh">0x4</span><span class="p">]</span>
</span><span class='line'><span class="nl">d:</span> <span class="mf">0f</span> <span class="n">af</span> <span class="mi">75</span> <span class="n">f8</span> <span class="n">imul</span> <span class="n">esi</span><span class="p">,</span><span class="n">DWORD</span> <span class="n">PTR</span> <span class="p">[</span><span class="n">rbp</span><span class="o">-</span><span class="mh">0x8</span><span class="p">]</span>
</span><span class='line'><span class="mi">11</span><span class="o">:</span> <span class="mi">89</span> <span class="n">f0</span> <span class="n">mov</span> <span class="n">eax</span><span class="p">,</span><span class="n">esi</span>
</span><span class='line'><span class="mi">13</span><span class="o">:</span> <span class="mi">5</span><span class="n">d</span> <span class="n">pop</span> <span class="n">rbp</span>
</span><span class='line'><span class="mi">14</span><span class="o">:</span> <span class="n">c3</span> <span class="n">ret</span>
</span></code></pre></td></tr></table></div></figure>


<p>Ok, so those instructions vary in size.  I don&rsquo;t know any x86 so I can&rsquo;t
comment too much on that particular
<a href="http://en.wikipedia.org/wiki/Instruction_set">Instruction Set Architecture</a>
but they&rsquo;re obviously in pairs of hexadecimal digits.  16<sup>2</sup> == 2<sup>8</sup> meaning that
each pair of hex digits can be represented by a single byte (or char of memory).
So these can all be thrown in an unsigned char [].  The man page for mmap explains
all of the fun flags, but the important point is that this way of allocating
memory makes it executable, so it can do bad things that memory allocated from
malloc can&rsquo;t.  I&rsquo;m sure the JavaScript engine guys have fun with that.  Once
memory is copied in, you can typecast the memory to a function pointer.
Make sure to check out the syntax that reminds me of a function pointer in an
argument list, but being used as an L-value.  Of course, you could just put the
cast right in front of the memory before you use it, but I find this as neat,
not so common C syntax.  I kind of
<a href="http://nickdesaulniers.github.com/blog/2013/01/26/c-function-pointers-alternate-syntax/">have a thing</a>
for stuff like that.  Then we can call it!  The resulting code looks like this.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cp">#include &lt;stdio.h&gt; </span><span class="c1">// printf</span>
</span><span class='line'><span class="cp">#include &lt;string.h&gt; </span><span class="c1">// memcpy</span>
</span><span class='line'><span class="cp">#include &lt;sys/mman.h&gt; </span><span class="c1">// mmap, munmap</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="nf">main</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'><span class="c1">// Hexadecimal x86_64 machine code for: int mul (int a, int b) { return a * b; }</span>
</span><span class='line'><span class="kt">unsigned</span> <span class="kt">char</span> <span class="n">code</span> <span class="p">[]</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>  <span class="mh">0x55</span><span class="p">,</span> <span class="c1">// push rbp</span>
</span><span class='line'>  <span class="mh">0x48</span><span class="p">,</span> <span class="mh">0x89</span><span class="p">,</span> <span class="mh">0xe5</span><span class="p">,</span> <span class="c1">// mov rbp, rsp</span>
</span><span class='line'>  <span class="mh">0x89</span><span class="p">,</span> <span class="mh">0x7d</span><span class="p">,</span> <span class="mh">0xfc</span><span class="p">,</span> <span class="c1">// mov DWORD PTR [rbp-0x4],edi</span>
</span><span class='line'>  <span class="mh">0x89</span><span class="p">,</span> <span class="mh">0x75</span><span class="p">,</span> <span class="mh">0xf8</span><span class="p">,</span> <span class="c1">// mov DWORD PTR [rbp-0x8],esi</span>
</span><span class='line'>  <span class="mh">0x8b</span><span class="p">,</span> <span class="mh">0x75</span><span class="p">,</span> <span class="mh">0xfc</span><span class="p">,</span> <span class="c1">// mov esi,DWORD PTR [rbp-04x]</span>
</span><span class='line'>  <span class="mh">0x0f</span><span class="p">,</span> <span class="mh">0xaf</span><span class="p">,</span> <span class="mh">0x75</span><span class="p">,</span> <span class="mh">0xf8</span><span class="p">,</span> <span class="c1">// imul esi,DWORD PTR [rbp-0x8]</span>
</span><span class='line'>  <span class="mh">0x89</span><span class="p">,</span> <span class="mh">0xf0</span><span class="p">,</span> <span class="c1">// mov eax,esi</span>
</span><span class='line'>  <span class="mh">0x5d</span><span class="p">,</span> <span class="c1">// pop rbp</span>
</span><span class='line'>  <span class="mh">0xc3</span> <span class="c1">// ret</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// allocate executable memory via sys call</span>
</span><span class='line'>  <span class="kt">void</span><span class="o">*</span> <span class="n">mem</span> <span class="o">=</span> <span class="n">mmap</span><span class="p">(</span><span class="nb">NULL</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">code</span><span class="p">),</span> <span class="n">PROT_WRITE</span> <span class="o">|</span> <span class="n">PROT_EXEC</span><span class="p">,</span>
</span><span class='line'>                   <span class="n">MAP_ANON</span> <span class="o">|</span> <span class="n">MAP_PRIVATE</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// copy runtime code into allocated memory</span>
</span><span class='line'>  <span class="n">memcpy</span><span class="p">(</span><span class="n">mem</span><span class="p">,</span> <span class="n">code</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">code</span><span class="p">));</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// typecast allocated memory to a function pointer</span>
</span><span class='line'>  <span class="kt">int</span> <span class="p">(</span><span class="o">*</span><span class="n">func</span><span class="p">)</span> <span class="p">()</span> <span class="o">=</span> <span class="n">mem</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// call function pointer</span>
</span><span class='line'>  <span class="n">printf</span><span class="p">(</span><span class="s">&quot;%d * %d = %d</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">11</span><span class="p">,</span> <span class="n">func</span><span class="p">(</span><span class="mi">5</span><span class="p">,</span> <span class="mi">11</span><span class="p">));</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// Free up allocated memory</span>
</span><span class='line'>  <span class="n">munmap</span><span class="p">(</span><span class="n">mem</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">code</span><span class="p">));</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Voila!  How neat is that!  It works!  Luke&rsquo;s directions, an hour of working on
this, and
<a href="http://blog.reverberate.org/2012/12/hello-jit-world-joy-of-simple-jits.html">this article</a>
in particular, and we have a simple JIT working. Again, this simple example is super
non-portable and dealing with memory in this fashion is generally unsafe.  But
now I know the basics of JIT&#8217;ing code, and now so do you!</p>

<p>Thanks Luke!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Commandments of a Mobile Web]]></title>
    <link href="http://nickdesaulniers.github.io/blog/2013/02/28/commandments-of-a-mobile-web/"/>
    <updated>2013-02-28T22:43:00-08:00</updated>
    <id>http://nickdesaulniers.github.io/blog/2013/02/28/commandments-of-a-mobile-web</id>
    <content type="html"><![CDATA[<p>Over the past few years, there&rsquo;s been certain
<a href="http://en.wikipedia.org/wiki/Paradigm_shift">paradigm shifts</a>
in web development. When you think of milestones that really changed how
development on the web was done, the two biggest were
<a href="https://www.ibm.com/developerworks/mydeveloperworks/blogs/BobZurek/entry/the_ajax_paradigm_shift?lang=en">Ajax</a>
and <a href="http://www.html5rocks.com/en/why">HTML5</a>.  Development was identifiably
different before and after such technological advancements.  There were
<a href="http://java.sys-con.com/node/315210">some</a> who initially
<a href="http://blog.tobie.me/post/31366970040/when-im-introspective-about-the-last-few-years-i">doubted</a>
the technologies, but I&rsquo;m sure such doubters eventually
<a href="http://www.sencha.com/blog/the-making-of-fastbook-an-html5-love-story/">saw the light</a>.
After spending time working on applications for Mozilla&rsquo;s upcoming mobile
operating system, Firefox OS, and talking with my fellow employees, I feel that
the mobile web is another one of those shifts in how we
approach web development that looking back will be an identifiable point in
time where we can say that we did things differently before and after.
So in that sense, I want to share some of the insights I&rsquo;ve found to
help other developers wrap their heads around how developing for the mobile web
isn&rsquo;t their traditional cup of tea.</p>

<h1>Internet connectivity is not guaranteed</h1>

<p>This is a fundamental divorce from the World Wide Web and the Internet. I feel
that a lot of people having trouble differentiating the Web from the Internet;
where you&rsquo;ve had one, you&rsquo;ve always had the other. Don&rsquo;t
assume your application will always have a valid connection.  When a user
is on a wifi connection, or hardwired, it&rsquo;s so obvious that if they&rsquo;re on your
website, then they must be connected to the Internet.  Right?  But what happens
now when one of your users loads up your site or app on a mobile device, then enters
a tunnel?  What does it do when offline?  Does it work?  Maybe it
doesn&rsquo;t make sense if you&rsquo;re offering a service that requires data from the
back end, but does that mean that the front end should totally look like crap
or break when the back end can&rsquo;t be reached?  Do your Ajax requests have error
callbacks?  Do you try and reconnect your WebSocket connections after they&rsquo;ve
failed?  Do you cache previous requests or use one of the many forms of offline
storage to show something to the user?  Developing on the loopback is literally
the best case for connectivity, but it gives the developer a false sense of
how latency and connectivity issues affect their application.  It&rsquo;s literally
shocking the first time you encounter your site/application offline if you
didn&rsquo;t think about the user experience up front.</p>

<h1>Bandwidth is not free</h1>

<p>The advent of broadband made it acceptable for sites to utilize massive amounts
of assets.  Seeing sites that load up so much stuff makes my heart sink when
I wonder about viewing such a site on my mobile device.  I only pay for so much
mobile data per month, then I&rsquo;m billed ridiculous amounts as a
<a href="http://forums.att.com/t5/Data-Messaging-Features-Internet/What-does-quot-Data-MB-Overage-quot-mean/td-p/2872883">&ldquo;Data Overage&rdquo;</a>.
Users in other countries frequently have a more pay as you go style plan, so
they&rsquo;re being billed for each bit across the wire.  In countries without the
infrastructure necessary to get broadband Internet to every household, mobile
is more prolific in getting users connected.</p>

<p>Things like minification and gzip certainly help, but deferred loading of
assets until they&rsquo;re necessary is frequently overlooked.
Massive libraries are nice for devs, but may end up giving mobile users more
problems than they are worth. There exist more advanced techniques such as
<a href="http://buildnewgames.com/optimizing-websockets-bandwidth/">WebSocket compression</a>.</p>

<p>How much does your site <a href="http://www.sitepoint.com/minimizing-page-weight-matters/">weigh</a>?</p>

<h1>An expensive website does not make an awesome app</h1>

<blockquote><p>Why doesn&#8217;t my million dollar website make a kick ass web app?</p></blockquote>


<p>This point is brought to you by <a href="http://www.mattbasta.com/">Matt Basta</a>.  The
point is that there is something fundamentally different between a web &ldquo;site&rdquo;
and a web &ldquo;app&rdquo;.  In a web site the usual flow involves loading up a page
and maybe navigating between pages.  An app more often than not will be a
single page that loads data asynchronously and dynamically modifies the content
displayed to the user.  Some web sites make great use of things like Ajax, and
are great example of single page sites.  But not all are.  Some still haven&rsquo;t
come around to loading all data asynchronously on request.  And it&rsquo;s not that
they necessarily even have to, they can be a website and never have to be
anything more.  But you&rsquo;ll find that some sites make better apps than others.</p>

<h2>No chrome</h2>

<p>Not the browser made by Google, Google Chrome; the actual
<a href="https://developer.mozilla.org/en-US/docs/Chrome">controls</a> on the top
of your browser such as the back and reload buttons, and the url bar.  This
point comes from <a href="https://github.com/cvan">Chris Van Wiemeersch</a>.  One of
the things you&rsquo;ll find when evaluating whether a site makes a good app is
whether it relies on chrome to navigate.  If it does, then it&rsquo;s not really
going to cut it as an app.  If you&rsquo;re going to make a single page app, try
making it fullscreen in your browser and try navigating around. Are you
hindered without the chrome?  One thing I
found recently was an error condition where I notified the user that they had
to be online to check for an update.  But when I was developing, I would just
refresh the page to clear the error message and try again.  On a device, as an
app, where there was no chrome, this meant closing and restarting the app.
That sucked, so I made it so the user could click/touch, after figuring out
their connectivity issues, to retry the fetch.  Even better may have
been to listen for online events!</p>

<h2>Traditional forms of input are not fun</h2>

<p>Here&rsquo;s some tips from <a href="http://potch.me/">Matthew &ldquo;Potch&rdquo; Claypotch</a>.</p>

<h3>Fingers aren&rsquo;t as precise as cursors</h3>

<p>Having tiny click
targets is really frustrating.  How many times have you clicked the wrong
thing on a mobile device?  Tiny buttons are not the easiest thing for users
to specify, especially when groups of them are clustered nearby.  Custom
buttons enabled by <a href="http://www.cssbuttongenerator.com/">a little CSS</a> can go a
long way.</p>

<h3>Typing on little keyboards in tedious</h3>

<p>This is an effect of tiny buttons, but requiring the user to type in large
strings gets annoying fast.  Sometimes this can&rsquo;t be avoided, but it should be
when it can.  Just as typing in a long, complex url to a mobile browser is
not enjoyable, neither is doing so in an app.</p>

<h1>Detect features not browser engine (User agent sniffing is a sin)</h1>

<p>Print <a href="http://diveintohtml5.com/everything.html">this</a> and staple it to your
wall above your workspace.  This should be
<a href="http://www.nczonline.net/blog/2009/12/29/feature-detection-is-not-browser-detection/">old</a>
<a href="http://msdn.microsoft.com/en-us/magazine/hh475813.aspx">news</a> at this point.</p>

<h2>Vendor prefixes are meant for browser vendors to test, not production code</h2>

<p>I place a majority of the blame for this on vendors; prefixes should never see
the light of day in release builds.  It&rsquo;s ridiculous to have to write four
copies of the same rule, when you&rsquo;re trying to express one thing.  I should
rewrite this sentence four different ways to prove a point.  -o-Do you understand
what I&rsquo;m getting at?  -ms-It&rsquo;s almost like rambling. -moz-Repetitive department
of repetition. -webkit-This is ridiculous.</p>

<p>But developers need to recognize the habit as an addiction, and not feed it.
If you have, I forgive you.  Now stop doing it.</p>

<p>These two particular articles are just so good, it wouldn&rsquo;t do them justice to
try and summarize them.  Please go read them, I&rsquo;ll wait.
<a href="http://hsivonen.iki.fi/vendor-prefixes/">this</a>
and
<a href="http://www.quirksmode.org/blog/archives/2010/03/css_vendor_pref.html">this</a></p>

<h2>Developing towards WebKit and not HTML5 is a sin</h2>

<p>I understand that Google Chrome is your favorite browser, and I am so happy for
you; but it is not mine.  I&rsquo;ll be the first to admit that Google
caught all of the other browser vendors with their pants down, but when I see
pages that look flawless in Chrome and
not so hot in others, it reminds me of days when sites only worked in IE6.
Surely you remember <em>those</em> days.  I hate when content publishers try and
dictate which browser I should use to view their content.  I understand WebKit
based browsers dominant in mobile, but so did IE6 in desktop share at one point.
It&rsquo;s not unreasonable to expect users to use the most updated version of their
browser, but empower your users to choose their browser.  Don&rsquo;t take that
choice away from them.</p>

<p>A neat <a href="http://robertnyman.com/2013/02/14/webkit-an-objective-view/">point</a> by
<a href="http://robertnyman.com/">Robert Nyman</a> is that WebKit itself already has forks.
Can you imagine if there were eventually vendor prefixes for forks of WebKit?
Continuing with vendor prefixes means that we&rsquo;ll now have seven vendor prefixes:
unprefixed, -moz-, -o-, -ms-, -webkit-o-, -webkit-chrome-, -webkit-safari-.
Awesome!  Maybe I should rewrite this sentence seven different ways to make a
point!</p>

<p>I&rsquo;m also curious if Google, Apple, and the WebKit maintainers are turning a
blind eye to this, or what their opinions are? Being a vendor and wanting an
open web are almost conflicts of interest; you want your browser to &ldquo;win&rdquo; or
dominate in marketshare, but at the same time you don&rsquo;t want any one browser
having too much marketshare.</p>

<h1>Design Responsively</h1>

<p>What is
<a href="http://mashable.com/2012/12/11/responsive-web-design/">responsive design</a>?
<a href="http://www.smashingmagazine.com/responsive-web-design-guidelines-tutorials/">Responsive design</a>
is making a site look great on
any size screen, without duplicating assets or sniffing a user agent string.
Firefox has a neat web dev tool called
<a href="https://developer.mozilla.org/en-US/docs/Tools/Responsive_Design_View">&ldquo;Responsive Design View&rdquo;</a>.
It&rsquo;s great for testing out your site on various screen sizes.
<a href="http://twitter.github.com/bootstrap/index.html">Twitter Bootstrap</a> is an
excellent example of a framework for developing a single app that looks great
on any screen size.  Even if you don&rsquo;t want to use a whole big framework,
simple things like using CSS rules in terms of percentages instead of hard
coded pixels can go a long way.</p>

<p>Sites that are trying to become more app like have trouble with conforming to
responsive design.  Instead of starting with a site and trying to figure out
how to hide
or not display information as the screen gets smaller, you&rsquo;ll find it much
<a href="http://johnpolacek.github.com/scrolldeck.js/decks/responsive/">easier</a> to
start small, and dynamically add content as the screen gets bigger.</p>

<h1>High performance code respects battery life</h1>

<p>In the end of the day, all of the code you write that runs in the browser is
a set of instructions the processor can decode, not necessarily the high level
JavaScript you wrote.  While it&rsquo;s important to avoid premature optimizations,
having a few
<a href="http://christianheilmann.com/2013/01/25/five-things-you-can-do-to-make-html5-perform-better/">rules of thumb</a>
up front will help you write better, faster code.
If the same overall action can be expressed in one instruction or one hundred,
which do you think will use
<a href="http://coding.smashingmagazine.com/2012/11/05/writing-fast-memory-efficient-javascript/">less power</a>?
Keep in mind that transistors leak current while switching.</p>

<h2>Native methods over library methods, CSS over JS</h2>

<p>What do I mean by &ldquo;native methods?&rdquo; Like C++?  Well, yes.  You see under the
hood the DOM bindings that you&rsquo;re calling are probably written in C++.  Call
<code>toSource()</code> on <code>document.getElementById()</code>.  The <code>[native code]</code> statement
in the returned string refers to the implementation.  While type specialized
code emitted by the JIT can match or even beat native code, you can only count
on that for hot loops.  In the same vein, library code is going to be
<a href="http://jsperf.com/getelementbyid-vs-jquery-id/25">slower</a> than any code
written natively.  I&rsquo;m not saying that you shouldn&rsquo;t use libraries, just know
that the use of libraries can incur some overhead.  Things like animations will
also be faster
when handled by natively implemented CSS over JS.  You can use JS to
dynamically add classes to elements to get finer resolution over events, but
then get the performance of CSS.</p>

<h2>Avoid JIT bailout</h2>

<p>The Just In Time (JIT) interpreter is a
<a href="http://www.slideshare.net/amdgigabyte/know-your-javascript-engine">new breed</a>
of VM that most browser
vendors are now using.  The JIT can
<a href="http://s3.mrale.ph/nodecamp.eu/#1">analyze</a> running code, and
<a href="http://en.wikipedia.org/wiki/Code_generation_%28compiler%29#Runtime_code_generation">emit</a>
native code
that is faster than reinterpreting code again, and even higher-optimized code
for type stable JavaScript, as long as certain &ldquo;guard&rdquo; conditions are met.
When a guard fails, the JIT has to
<a href="http://mxr.mozilla.org/mozilla-central/source/js/src/ion/Bailouts.h#19">bailout</a>
the emitted native code and start reinterpreting code again.</p>

<h2>Keep up to date on new APIs</h2>

<p>HTML5 is a big
<a href="http://www.w3.org/html/wg/drafts/html/master/single-page.html">spec</a>, and is
getting bigger.  So big that some recommendations are
being <a href="http://www.websocket.org/aboutwebsocket.html">spun off</a> from the
original HTML5 spec.  As an engineer, I&rsquo;m painfully aware that you need to
<a href="http://bonsaiden.github.com/JavaScript-Garden/">keep up</a>
in whatever industry you work in in order to stay relevant.
The complacent are the most vulnerable.  There&rsquo;s
<a href="http://caniuse.com/">a lot to keep track of</a> with
HTML5 and CSS3, but many new features offer higher performance methods of
skinning the cat.</p>

<h3>requestAnimationFrame</h3>

<p>window.requestAnimation frame is a godsend for animation.  Not too long ago, I
wrote up a quick
<a href="https://github.com/nickdesaulniers/canvas2dcontext/blob/master/examples/sprite.html#L6">example</a>
of various ways of implementing animation loops and their issues; you should
check it out.</p>

<h3>indexedDB over localstorage</h3>

<p>The indexedDB api might not be as simple as localstorage&rsquo;s is, but localstorage
is synchronous and is noticeably slow on mobile.  If you can bite the bullet
and use indexedDB, you&rsquo;ll find you&rsquo;re JS isn&rsquo;t blocking on
serializing/deserializing objects for storage.
<a href="https://twitter.com/fabricedesre">Fabrice Desré</a> shared this with me.</p>

<h3>WebWorkers</h3>

<p>Webworkers can&rsquo;t modify the DOM, but they can do heavy lifting without blocking
the main thread.</p>

<h3>CSS translate over absolute top and left rules</h3>

<p><a href="http://digitarald.de/">Harald Kirschner</a> recommends CSS translates over top
and left rules for absolutely positioning some elements.</p>

<h3>Gradients are expensive</h3>

<p><a href="http://www.backalleycoder.com/">Dan Buchner</a> notes that without beefy graphics
processing units of their desktop counterparts to enable hardware acceleration,
things like gradients will give you noticeable performance hits.</p>

<h3>createDocumentFragment</h3>

<p>Dan also suggests queuing up DOM changes.
Whenever you manipulate items in the DOM, you&rsquo;re going to trigger a reflow,
which may consist of an update to the layout and/or a repaint.  Minimizing these
makes for a faster update to the DOM.  For example, it can be faster to use
document.createDocumentFragment and append child nodes to it, and then append
that to the DOM, instead of appending lots of child nodes in between timer calls.
Surprise, this isn&rsquo;t actually a
<a href="http://ejohn.org/blog/dom-documentfragments/">new</a> DOM binding from HTML5.</p>

<h1>Conclusion</h1>

<p>These are just some tips I have for application developers.  I am by no means
an expert; I&rsquo;m sure if you dig deep enough, you can find plenty of examples of
my past work that contradicts some of my recommendations from this article.  But
I&rsquo;m a little smarter today than I was yesterday, and now so are you!  What are some
tips that you have to share that you&rsquo;ve found helpful developing for the
mobile web?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[C Function Pointers Alternate Syntax]]></title>
    <link href="http://nickdesaulniers.github.io/blog/2013/01/26/c-function-pointers-alternate-syntax/"/>
    <updated>2013-01-26T17:49:00-08:00</updated>
    <id>http://nickdesaulniers.github.io/blog/2013/01/26/c-function-pointers-alternate-syntax</id>
    <content type="html"><![CDATA[<p>On an interview with <a href="https://squareup.com/">Square</a>, I made the mistake
of stating that one of the benefits of working with JavaScript over C is
that functions are <a href="http://en.wikipedia.org/wiki/First-class_function">first class</a>
in JavaScript, therefore they may be <a href="http://eloquentjavascript.net/chapter6.html">passed around</a>.  To which the
interviewer replied, &ldquo;Well, C can do that, what about function pointers?&rdquo;  What? Luckily, I
was able to get out of that jam by guessing that JavaScript had a nicer
syntax.</p>

<p>While I was taught some C in university, we had never gone over function
pointers or more in depth topics such as <a href="http://en.wikipedia.org/wiki/Static_library">static</a>
or <a href="http://en.wikipedia.org/wiki/Dynamic_library">dynamic</a> <a href="http://www.yolinux.com/TUTORIALS/LibraryArchives-StaticAndDynamic.html">linkage</a>.
I was so embarrassed that my expensive (read <a href="http://online.wsj.com/article/SB10001424127887324442304578231922159602676.html?mod=WSJ_hps_LEFTTopStories">overpriced</a>)
degree had not taught me more about
the C programming language, especially from the Computer Engineering
department that focuses on software <strong>AND</strong> hardware.  On my exit
interview with the dean, I was very opinionated on the amount of C that
was (or wasn&rsquo;t) taught at my university.  His argument was that there
are only so much of so many languages you can cover in a university, which
to some extent is valid.  My problem has been that I&rsquo;ve enjoyed learning
many different programming languages, though I didn&rsquo;t really get it the
first time around (with Java).  I think knowing many different languages
and their respective paradigms makes you a better programmer in other
languages, since you can bring a <a href="http://therubyway.org/">Ruby Way</a> to
<a href="http://www.rust-lang.org/">Rust</a> or a <a href="http://www.ibm.com/developerworks/library/wa-javascript/index.html">JavaScript functional</a>
<a href="http://interglacial.com/hoj/hoj.html">style</a> into C.</p>

<p>I had read two books in the meantime that really flushed out more of the
C language to me and I would definitely recommend them to those who want
to learn more about the language. They are <a href="http://shop.oreilly.com/product/0636920015482.do">Head First C</a> by Dave and Dawn
Griffiths and <a href="http://shop.oreilly.com/product/0636920025108.do">21st Century C</a> by Ben Klemens.
I&rsquo;m also aware that <a href="http://en.wikipedia.org/wiki/The_C_Programming_Language">The C Programming Language</a> by
Brian Kernighan and Dennis Ritchie is also known as the canonical text.
The book is often referred to as &lsquo;K&amp;R&rsquo; after the authors&#8217; initials, and Dennis
Ritchie was the original creators of the C language and co-developer of
Unix.  I&rsquo;d love to get a chance to read it someday.</p>

<p><a href="http://blog.charlescary.com/?p=95">This article</a> appeared on
<a href="http://news.ycombinator.com/">Hacker News</a> and really piqued my
interest.  Defenitely a great read.  What really stuck out to me was one
of the <a href="http://blog.charlescary.com/?p=95#comment-31">comments</a> though.
The author of the comment mentioned a less ugly syntax for function
pointers, with a <a href="http://pastebin.com/MsJLY22j">link to an example</a>.
Now I&rsquo;m not sure what the commenter meant by &ldquo;these params decay
naturally to function pointers&rdquo; but I was skeptical about this different
syntax.  Event the <a href="http://en.wikipedia.org/wiki/Function_pointer#Example_in_C">Wikipedia article</a>
used the syntax that I was familiar with.  So I wrote up a quick example
to try it:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="c1">// compiled with:</span>
</span><span class='line'><span class="c1">// clang -Wall -Wextra function_pointers.c -o function_pointers</span>
</span><span class='line'><span class="cp">#include &quot;stdio.h&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="nf">usual_syntax</span> <span class="p">(</span><span class="kt">void</span> <span class="p">(</span><span class="o">*</span><span class="n">fn</span><span class="p">)</span> <span class="p">(</span><span class="kt">int</span> <span class="n">x</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">puts</span><span class="p">(</span><span class="s">&quot;usual syntax start&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="n">fn</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
</span><span class='line'>  <span class="n">puts</span><span class="p">(</span><span class="s">&quot;usual syntax end&quot;</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="nf">other_syntax</span> <span class="p">(</span><span class="kt">void</span> <span class="n">fn</span> <span class="p">(</span><span class="kt">int</span> <span class="n">x</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">puts</span><span class="p">(</span><span class="s">&quot;other syntax start&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="n">fn</span><span class="p">(</span><span class="mi">2</span><span class="p">);</span>
</span><span class='line'>  <span class="n">puts</span><span class="p">(</span><span class="s">&quot;other syntax end&quot;</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="nf">hello</span> <span class="p">(</span><span class="kt">int</span> <span class="n">x</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">printf</span><span class="p">(</span><span class="s">&quot;hello %d</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">x</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="nf">main</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">puts</span><span class="p">(</span><span class="s">&quot;hello world&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="n">usual_syntax</span><span class="p">(</span><span class="n">hello</span><span class="p">);</span>
</span><span class='line'>  <span class="n">other_syntax</span><span class="p">(</span><span class="n">hello</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Sure enough we get:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">hello</span> <span class="n">world</span>
</span><span class='line'><span class="n">usual</span> <span class="n">syntax</span> <span class="n">start</span>
</span><span class='line'><span class="n">hello</span> <span class="mi">1</span>
</span><span class='line'><span class="n">usual</span> <span class="n">syntax</span> <span class="n">end</span>
</span><span class='line'><span class="n">other</span> <span class="n">syntax</span> <span class="n">start</span>
</span><span class='line'><span class="n">hello</span> <span class="mi">2</span>
</span><span class='line'><span class="n">other</span> <span class="n">syntax</span> <span class="n">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>So the moral to the story I guess is that there&rsquo;s always more to your
favorite language.  From using <a href="https://github.com/nickdesaulniers/21stCenturyC/blob/master/chpt10/variadic_macros.c">variadic macros</a>
with <a href="https://github.com/nickdesaulniers/21stCenturyC/blob/master/chpt10/compound_literal.c">compound literals</a>
to enable a more <a href="https://github.com/nickdesaulniers/21stCenturyC/blob/master/chpt10/foreach.c">functional style</a>
in C to reflecting upon a function&rsquo;s <a href="https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Function/length">number of arguments</a>
or <a href="https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Function/name">name</a>
or <a href="http://taylodl.wordpress.com/2012/09/03/functional-javascript-memoization-part-ii/">adding attributes to a function</a>
or the
<a href="http://matt.might.net/articles/implementation-of-recursive-fixed-point-y-combinator-in-javascript-for-memoization/">y-combinator</a>
in JavaScript, I learn something new every day.  And I hope that you did
too!  Thanks for reading!  If you have some other recommendations on
good programming books, or design patterns, please leave a comment or
write a reply blog post!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[Internet] Freedom is Not Free]]></title>
    <link href="http://nickdesaulniers.github.io/blog/2013/01/19/internet-freedom-is-not-free/"/>
    <updated>2013-01-19T20:12:00-08:00</updated>
    <id>http://nickdesaulniers.github.io/blog/2013/01/19/internet-freedom-is-not-free</id>
    <content type="html"><![CDATA[<p>Last week, the Internet community
<a href="http://tech.mit.edu/V132/N61/swartz.html">lost</a> a member in the on going war
against the copyright industry.  While I&rsquo;ve never met the deceased, or
even heard of the deceased before his suicide, I&rsquo;m horrified.  I&rsquo;m
horrified that the government we are asked to put so much faith in,
would give someone, not that different from myself, such a <a href="http://www.techdirt.com/articles/20120917/17393320412/us-government-ups-felony-count-jstoraaron-swartz-case-four-to-thirteen.shtml">ridiculous sentence</a>.
That I could be thrown away, locked away from the things that
I love for 35 years, for freeing information that
<a href="http://arstechnica.com/tech-policy/2013/01/aaron-swartz-memorial-jstor-liberator-sets-public-domain-academic-articles-free/">should</a>
have been free, and was later
<a href="http://www.3news.co.nz/Reddit-co-founder-dies-weeks-before-trial/tabid/412/articleID/282905/Default.aspx">made</a> free.</p>

<p>That my government would strike such fear into someone&rsquo;s life that they
would prefer death by their own hands to punishment.  Why do we put up
with this?</p>

<p>The Internet, and the technology sector evolves so quickly.  It&rsquo;s
amazing that the law the deceased was being prosecuted under, pertaining
to computers, is from
<a href="http://en.wikipedia.org/wiki/Computer_Fraud_and_Abuse_Act">1986</a>.  Can
you even remember what computers were like in 1986?  I didn&rsquo;t even
exist!  My first family computer ran Windows 95.  I can only imagine how
archaic laws would be that were based on such rapidly evolving tech.</p>

<p>The limiting of information is problematic to me.  How do the people of
China, Iran, and others feel about their government?  I assume they are
aware that the government is limiting their body of knowledge.  Even the
US television news agencies can&rsquo;t get the story straight.  It
reminds me of George Orwell&rsquo;s <em>1984</em>, where the language is limited to
curtail expression.  If the free world uses the Internet as <a href="http://en.wikipedia.org/wiki/Transactive_memory">Transactive Memory</a>, does the
oppressed world know what they&rsquo;re missing?  Can you know what you&rsquo;re
missing, before you&rsquo;ve lost it?</p>

<p>The media and copyright lobby disgust me.  I&rsquo;m disgusted that <a href="http://www.mpaa.org/about/ceo">my former state senator</a>
is now the Chairman and
CEO of the MPAA.  Remember learning in high school civics the term
<a href="http://en.wikipedia.org/wiki/Revolving_door_%28politics%29">&ldquo;Revolving Door&rdquo;</a>? Case
in point.</p>

<p>America was constitutionalized as a republic, but through
amendment has <a href="http://en.wikipedia.org/wiki/Democratic_republic">evolved</a>
into a democratic republic.  The idea of a republic was important to an
<a href="http://seattletimes.com/html/nationworld/2003332210_tuesday31.html">agrarian society</a>,
and we still feel the effects every first Tuesday in
November; the least convenient day of the week.  Voting for someone
just to represent you was convenient when your form of long-range
communication was a man on a pony.  With the rise of the Internet, and
representatives who work for their lobbies and not the people,
why do we still elect officials?  Why are we a republic?  Why not just a
democracy?  Allow voters to authenticate and cast their vote online.
Everyone.  No computer or internet?  I&rsquo;m sure your local library offers
both free for public use.  &ldquo;But people don&rsquo;t always know what&rsquo;s right.&rdquo;
Sure, I think some people aren&rsquo;t too bright.  But then I see the
deadlock in congress, fiscal cliff after fiscal cliff, and I can&rsquo;t help
but think we could do better if we just fired all of these assholes.</p>

<p>Why can&rsquo;t the difference in viewpoints be celebrated?  A good leader
recognizes both sides of the coin.  I love having a diverse team of
people with varying backgrounds, because they come up with solutions I
never could have.  And if you want to beat your enemy, you have to know
your enemy.  That means empathizing, understanding where they come from.</p>

<blockquote><p>If you give orders and explain nothing, you might get obedience, but<br/>you&#8217;ll get no creativity. If you tell them your purpose, then when your<br/>original plan is shown to be faulty, they&#8217;ll find another way to achieve<br/>your goal. Explaining to your men doesn&#8217;t weaken their respect for you,<br/>it proves your respect for them.</p><footer><strong>Han Tzu</strong> <cite>Shadow of the Giant Pg. 303 by Orson Scott Card</cite></footer></blockquote>


<p>I don&rsquo;t hate anyone for what they believe, nor do I
try to persuade them otherwise.  I just feel like the technologically
minded are under represented in Washington.  I wish we had a
technological party.  We need a
party that strives to protect the internet, the ideals behind
the freedom and preservation of information, the technical investment in
sovereign energy and our failing infrastructure, and internet access
speeds that are unrivaled in the world, not stagnated by corporations
who are relatively regional monopolies.  One where social
issues are open to debate, but also where protecting our greatest asset and
achievement is top priority.  One where the media industry is invited to
the table, unlike the back door <a href="http://en.wikipedia.org/wiki/Stop_Online_Piracy_Act">policies</a>
they would try to slip in under our noses.  My dad advocated a turn the
other cheek policy.  That&rsquo;s called acting like an adult.</p>

<p>My belief of good vs. evil is that there is no good or evil, but that people
are inherently selfish.  They
do things that are perceived by others as evil.  But they don&rsquo;t do
things because those actions are evil, they do them because they gain
some form of personal utility from the action; they perceive the action
as good.  And it is good&hellip;to them.  It&rsquo;s easy to be evil.  It&rsquo;s the easy
way out.  It&rsquo;s harder to think about other people.  It&rsquo;s tougher to do
the right thing.  Being good is so recognizably hard; it&rsquo;s impressive.</p>

<p>The president of MIT, L. Rafael Reif, had this to say regarding the
deceased: <a href="http://touch.latimes.com/#section/-1/article/p2p-74009443/">&ldquo;It pains me to think that MIT played any role in a series of events that have ended in tragedy&hellip;&rdquo;</a>
Fuck you. Maybe if MIT&rsquo;s bottom line wasn&rsquo;t their acceptance rate, they
might be able to look out for more than just their own.</p>

<blockquote><p>All that is necessary for the triumph of evil is that good men do<br/>nothing.</p><footer><strong>Edmund Burke</strong> <cite>Thoughts on the Cause of Present Discontents</cite></footer></blockquote>


<p>Suicide is never the answer.  No matter how shitty your current
situation is, no matter if things will never go back to the way they
were, you will always be able to change your situation.  Maybe not
immediately, but that&rsquo;s what goals are for.  Anyone who ever committed
suicide to prove a point could have done more for their cause dedicating
the rest of their life to it.  If you&rsquo;re feeling depressed, talk to
someone.  It will make you feel so much better to talk to someone about
what&rsquo;s upsetting you.  As much as people like to shit on the Catholic
Church, I feel like the Catholic practice of penance (confession),
provides a cathartic placebo effect.  If you are depressed or hurting, and
you need someone to talk to, even a complete stranger, feel free to
contact me.  I will always provide an ear and a shoulder.</p>

<blockquote><p>It seems strange that my life should end in such a terrible place, but<br/>for three years I had roses and apologized to no one. I shall die here.<br/>Every inch of me shall perish. Every inch, but one. An inch. It is small<br/>and it is fragile and it is the only thing in the world worth having. We<br/>must never lose it or give it away. We must NEVER let them take it from<br/>us. I hope that whoever you are, you escape this place. I hope that the<br/>world turns, and that things get better. But what I hope most of all is<br/>that you understand what I mean when I tell you that, even though I do<br/>not know you, and even though I may never meet you, laugh with you, cry<br/>with you, or kiss you, I love you. With all my heart, I love you.</p><footer><strong>Valerie</strong> <cite>V for Vendetta</cite></footer></blockquote>


<p>The next time the media industry tries to limit what you have access to
on the Internet, make a big ruckus.  Inform everyone you know about the
facts.  Pushing for an increase in media piracy activities is not the
right answer.  Instead we should push to boycott working for
organizations like the RIAA and MPAA and their ilk.  Think about how
much better off we would be in the United States if teachers were paid
like rock stars and rock stars were paid like teachers?  Instead, everyone
in the media industry needs a fat paycheck.  Celebrity is the case in
point of the blind leading the blind.  Did you know that EMI
<a href="https://mashable.com/2013/01/18/i-have-a-dream-internet-freedom/">owns</a>
the copyright to the footage of Martin Luther King&rsquo;s &ldquo;I have a
dream&rdquo; speech?  If you can find it, I bet it wont be up long.  Frankly,
I&rsquo;m surprised EMI doesn&rsquo;t also own the Declaration of Independence and
Constitution, charging admission.</p>

<p>Revolutions are a continuation of the battle between sword and shield.
Something new is created and shows potential, then doubters pop up
seeking to curtail that which upsets their competitive edge.  In the
case of information, many make money and become powerful off
limiting the access to knowledge.  I think all knowledge that is
beneficial to mankind should be open, and that the Internet is the ultimate
utility for the sharing of our collective knowledge.  Where do you draw
the line, you might ask?  I think the knowledge required to make atomic
weapons and 3D-print receivers is decidedly unbefitting of society,
for instance.
And in the end, you can&rsquo;t take any of the knowledge you protect with
you.  If everyone shared what they knew, then you&rsquo;d have a more
improved life, since then the right people would be
in the know to advance our being.  Technology would advance even faster
than it does currently if we weren&rsquo;t limited to
<a href="http://www.techradar.com/us/news/computing-components/processors/why-intels-new-cpus-disappoint-1077260">tick-tock</a> product
cycles and business secrets.</p>

<p>So what does a rant about government, antiquated laws, corrupt
representatives, celebrating diversity, hypothetical political parties,
inaction, and established industries have to do with anything?
They&rsquo;re all anchored to a suicide.  They&rsquo;re all that&rsquo;s been running
through my mind lately.  What I see in the deceased, I see in myself.
Standing amongst my peers, celebrating <a href="http://www.internetfreedomday.net/">Internet Freedom Day</a>
, listening to <a href="https://www.eff.org/about/staff/peter-eckersley">Peter Eckersley</a> of the
<a href="https://www.eff.org/">EFF</a> talk, I realized <a href="http://www.youtube.com/watch?v=Vo0D6bzxLLw">&lsquo;The power is
yours!&rsquo;</a>.
So now I add my voice to the or so 20 Internet activists that will continue to
spring up as one falls.</p>

<p>What will you do to shape the world you live in?  What are you going to do to
fix it?  If you don&rsquo;t, I will.  Because if you want something done
right, you have to do it yourself.</p>

<blockquote><p>It has to start somewhere It has to start sometime<br/>What better place than here, what better time than now?</p><footer><strong>Rage Against the Machine</strong> <cite>Guerrilla Radio</cite></footer></blockquote>

]]></content>
  </entry>
  
</feed>
