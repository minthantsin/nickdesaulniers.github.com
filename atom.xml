<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Nick Desaulniers]]></title>
  <link href="http://nickdesaulniers.github.io/atom.xml" rel="self"/>
  <link href="http://nickdesaulniers.github.io/"/>
  <updated>2017-05-31T21:25:26-07:00</updated>
  <id>http://nickdesaulniers.github.io/</id>
  <author>
    <name><![CDATA[Nick Desaulniers]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Running Clang-Tidy on the Linux Kernel]]></title>
    <link href="http://nickdesaulniers.github.io/blog/2017/05/31/running-clang-tidy-on-the-linux-kernel/"/>
    <updated>2017-05-31T20:25:00-07:00</updated>
    <id>http://nickdesaulniers.github.io/blog/2017/05/31/running-clang-tidy-on-the-linux-kernel</id>
    <content type="html"><![CDATA[<p><a href="http://clang.llvm.org/extra/clang-tidy/">Clang-Tidy</a> is a linter from the LLVM
ecosystem.  I wanted to try to run it on the Linux kernel to see what kind of
bugs it would find.  The false positive rate seems pretty high (a persistent
bane to static analysis), but some patching in both the tooling and the source
can likely help bring this rate down.</p>

<p>The most straightforward way to invoke Clang-Tidy is with a compilation
database, which is a json based file that for each translation unit records</p>

<ol>
<li>The source file of the translation unit.</li>
<li>The top level directory of the source.</li>
<li>The exact arguments passed to the compiler.</li>
</ol>


<p>The exact arguments are necessary because <code>-D</code> and <code>-I</code> flags are necessary to
reproduce the exact Abstract Syntax Tree (AST) used to compile your code. Given
a compilation database, it&rsquo;s trivial to parse and recreate a build.  For the
kernel&rsquo;s KBuild, it&rsquo;s a lot like encoding the output of <code>make V=1</code>.</p>

<p>In order to generate a compilation database, we can use an awesome tool called
<a href="https://github.com/rizsotto/Bear">BEAR</a>. BEAR will
<a href="https://github.com/rizsotto/Bear/blob/6b07f5044f30a3070d1dc39801bcdd94395d673e/libear/ear.c#L21">hook</a>
calls to
<a href="https://linux.die.net/man/3/exec">exec</a>
and family, then write out the compilation database (compile_commands.json).</p>

<p>With BEAR installed, we can invoke the kernel&rsquo;s build with <code>bear make -j</code>. When
we&rsquo;re done:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>➜  linux git:<span class="o">(</span>nick<span class="o">)</span> ✗ du -h compile_commands.json
</span><span class='line'>11M compile_commands.json
</span><span class='line'>➜  linux git:<span class="o">(</span>nick<span class="o">)</span> ✗ wc -l compile_commands.json
</span><span class='line'>330296 compile_commands.json
</span><span class='line'>➜  linux git:<span class="o">(</span>nick<span class="o">)</span> ✗ head -n 26 compile_commands.json
</span><span class='line'><span class="o">[</span>
</span><span class='line'>    <span class="o">{</span>
</span><span class='line'>        <span class="s2">&quot;arguments&quot;</span>: <span class="o">[</span>
</span><span class='line'>            <span class="s2">&quot;cc&quot;</span>,
</span><span class='line'>            <span class="s2">&quot;-c&quot;</span>,
</span><span class='line'>            <span class="s2">&quot;-Wp,-MD,arch/x86/boot/tools/.build.d&quot;</span>,
</span><span class='line'>            <span class="s2">&quot;-Wall&quot;</span>,
</span><span class='line'>            <span class="s2">&quot;-Wmissing-prototypes&quot;</span>,
</span><span class='line'>            <span class="s2">&quot;-Wstrict-prototypes&quot;</span>,
</span><span class='line'>            <span class="s2">&quot;-O2&quot;</span>,
</span><span class='line'>            <span class="s2">&quot;-fomit-frame-pointer&quot;</span>,
</span><span class='line'>            <span class="s2">&quot;-std=gnu89&quot;</span>,
</span><span class='line'>            <span class="s2">&quot;-Wno-unused-value&quot;</span>,
</span><span class='line'>            <span class="s2">&quot;-Wno-unused-parameter&quot;</span>,
</span><span class='line'>            <span class="s2">&quot;-Wno-missing-field-initializers&quot;</span>,
</span><span class='line'>            <span class="s2">&quot;-I./tools/include&quot;</span>,
</span><span class='line'>            <span class="s2">&quot;-include&quot;</span>,
</span><span class='line'>            <span class="s2">&quot;include/generated/autoconf.h&quot;</span>,
</span><span class='line'>            <span class="s2">&quot;-D__EXPORTED_HEADERS__&quot;</span>,
</span><span class='line'>            <span class="s2">&quot;-o&quot;</span>,
</span><span class='line'>            <span class="s2">&quot;arch/x86/boot/tools/build&quot;</span>,
</span><span class='line'>            <span class="s2">&quot;arch/x86/boot/tools/build.c&quot;</span>
</span><span class='line'>        <span class="o">]</span>,
</span><span class='line'>        <span class="s2">&quot;directory&quot;</span>: <span class="s2">&quot;/home/nick/linux&quot;</span>,
</span><span class='line'>        <span class="s2">&quot;file&quot;</span>: <span class="s2">&quot;arch/x86/boot/tools/build.c&quot;</span>
</span><span class='line'>    <span class="o">}</span>,
</span></code></pre></td></tr></table></div></figure>


<p>Now with Clang-Tidy (probably worthwhile to build from source, but it&rsquo;s also
available off <code>apt</code>), we want to grab
<a href="https://github.com/llvm-mirror/clang-tools-extra/blob/master/clang-tidy/tool/run-clang-tidy.py">this helper script, run-clang-tidy.py</a>
to help analyze all this code.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>curl -O https://raw.githubusercontent.com/llvm-mirror/clang-tools-extra/master/clang-tidy/tool/run-clang-tidy.py
</span></code></pre></td></tr></table></div></figure>


<p>Then we can run it from the same directory as compile_commands.json:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>python run-clang-tidy.py <span class="se">\</span>
</span><span class='line'>  -clang-tidy-binary /usr/bin/clang-tidy-4.0 <span class="se">\</span>
</span><span class='line'>  &gt; clang_tidy_output.txt
</span></code></pre></td></tr></table></div></figure>


<p>This took about 1hr12min on my box. Let&rsquo;s see what the damage is:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>➜  linux git:<span class="o">(</span>nick<span class="o">)</span> ✗ cat clang_tidy_output.txt <span class="se">\</span>
</span><span class='line'>  | grep warning: | grep -oE <span class="s1">&#39;[^ ]+$&#39;</span> | sort | uniq -c
</span><span class='line'>
</span><span class='line'>     76 <span class="o">[</span>clang-analyzer-core.CallAndMessage<span class="o">]</span>
</span><span class='line'>     15 <span class="o">[</span>clang-analyzer-core.DivideZero<span class="o">]</span>
</span><span class='line'>      1 <span class="o">[</span>clang-analyzer-core.NonNullParamChecker<span class="o">]</span>
</span><span class='line'>    316 <span class="o">[</span>clang-analyzer-core.NullDereference<span class="o">]</span>
</span><span class='line'>     90 <span class="o">[</span>clang-analyzer-core.UndefinedBinaryOperatorResult<span class="o">]</span>
</span><span class='line'>      1 <span class="o">[</span>clang-analyzer-core.uninitialized.ArraySubscript<span class="o">]</span>
</span><span class='line'>   1410 <span class="o">[</span>clang-analyzer-core.uninitialized.Assign<span class="o">]</span>
</span><span class='line'>     10 <span class="o">[</span>clang-analyzer-core.uninitialized.Branch<span class="o">]</span>
</span><span class='line'>      5 <span class="o">[</span>clang-analyzer-core.uninitialized.UndefReturn<span class="o">]</span>
</span><span class='line'>     11 <span class="o">[</span>clang-analyzer-cplusplus.NewDeleteLeaks<span class="o">]</span>
</span><span class='line'>    694 <span class="o">[</span>clang-analyzer-deadcode.DeadStores<span class="o">]</span>
</span><span class='line'>    342 <span class="o">[</span>clang-analyzer-security.insecureAPI.strcpy<span class="o">]</span>
</span><span class='line'>      2 <span class="o">[</span>clang-analyzer-unix.API<span class="o">]</span>
</span><span class='line'>     11 <span class="o">[</span>clang-analyzer-unix.Malloc<span class="o">]</span>
</span><span class='line'>      4 <span class="o">[</span>clang-diagnostic-address-of-packed-member<span class="o">]</span>
</span><span class='line'>      2 <span class="o">[</span>clang-diagnostic-duplicate-decl-specifier<span class="o">]</span>
</span><span class='line'>     98 <span class="o">[</span>clang-diagnostic-implicit-int<span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>Looking through the output, there&rsquo;s seems to be almost nothing but false
positives, but who knows, maybe there&rsquo;s an actual bug or two in there.  Likely
possible patches to LLVM, its checkers, or the Linux kernel could lower the
false positive ratio.</p>

<p>If you&rsquo;re interested in seeing the kinds of warnings/outputs, I&rsquo;ve uploaded my
results run on a 4.12-rc3 based kernel that may or may not have been compiled
with Clang to
<a href="https://github.com/nickdesaulniers/linux/blob/clang_tidy/clang_tidy_output.txt.v2">my clang_tidy branch of the kernel on GitHub</a>.
As in my sorted output, I find it handy to <code>grep</code> for <code>warning:</code>. Maybe you can
find yourself a good first bug to
<a href="http://nickdesaulniers.github.io//blog/2017/05/16/submitting-your-first-patch-to-the-linux-kernel-and-responding-to-feedback/">contribute a fix to the kernel</a>?</p>

<p>There&rsquo;s likely also
<a href="http://clang.llvm.org/extra/clang-tidy/checks/list.html">some checks that make sense to disable or enable</a>.
Clang-Tidy also allows you to
<a href="http://clang.llvm.org/extra/clang-tidy/#writing-a-clang-tidy-check">write and use your own checkers</a>.
Who knows, someone may just end up writing static
analyses tailored to the Linux kernel.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Submitting Your First Patch to the Linux kernel and Responding to Feedback]]></title>
    <link href="http://nickdesaulniers.github.io/blog/2017/05/16/submitting-your-first-patch-to-the-linux-kernel-and-responding-to-feedback/"/>
    <updated>2017-05-16T01:02:00-07:00</updated>
    <id>http://nickdesaulniers.github.io/blog/2017/05/16/submitting-your-first-patch-to-the-linux-kernel-and-responding-to-feedback</id>
    <content type="html"><![CDATA[<p>After working on the Linux kernel for Nexus and Pixel phones for nearly a year,
and messing around with the
excellent <a href="http://eudyptula-challenge.org/">Eudyptula challenge</a>, I finally
wanted to take a crack at submitting patches upstream to the Linux kernel.</p>

<p>This post is woefully inadequate compared to the existing documentation, which
should be preferred.</p>

<ul>
<li><a href="http://elixir.free-electrons.com/linux/latest/source/Documentation/process">http://elixir.free-electrons.com/linux/latest/source/Documentation/process</a></li>
<li><a href="https://kernelnewbies.org/FirstKernelPatch">https://kernelnewbies.org/FirstKernelPatch</a></li>
</ul>


<p>I figure I’d document my workflow, now that I’ve gotten a few patches accepted
(and so I can refer to this post rather than my shell history&hellip;).  Feedback
welcome
(<a href="https://github.com/nickdesaulniers/nickdesaulniers.github.com/issues">open an issue</a>
or email me).</p>

<h2>Step 1: Setting up an email client</h2>

<p>I mostly use <code>git send-email</code> for sending patch files.  In my <code>~/,gitconfig</code> I
have added:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ini'><span class='line'><span class="k">[sendemail]</span>
</span><span class='line'>  <span class="c1">; setup for using git send-email; prompts for password</span>
</span><span class='line'>  <span class="na">smtpuser</span> <span class="o">=</span> <span class="s">myemailaddr@gmail.com</span>
</span><span class='line'><span class="s">  smtpserver = smtp.googlemail.com</span>
</span><span class='line'><span class="s">  smtpencryption = tls</span>
</span><span class='line'><span class="s">  smtpserverport = 587</span>
</span></code></pre></td></tr></table></div></figure>


<p>To send patches through my gmail account.  I don’t add my password so that I
don’t have to worry about it when I publish my dotfiles.  I simply get prompted
every time I want to send an email.</p>

<p>I use
<a href="https://nickdesaulniers.github.io/blog/2016/06/18/mutt-gmail-ubuntu/">mutt</a>
to respond to threads when I <em>don&rsquo;t</em> have a patch to send.</p>

<h2>Step 2: Make fixes</h2>

<p>How do you find a bug to fix?  My general approach to finding bugs in open
source C/C++ code bases has been using static analysis, a different compiler,
and/or more compiler warnings turned on.  The kernel also has an instance of
<a href="https://bugzilla.kernel.org/describecomponents.cgi">bugzilla</a>
running as an issue tracker.  Work out of a new branch, in case you choose to
abandon it later.  Rebase your branch before submitting (pull early, pull
often).</p>

<h2>Step 3: Thoughtful commit messages</h2>

<p>I always run <code>git log &lt;file I modified&gt;</code> to see some of the previous commit
messages on the file I modified.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>git log arch/x86/Makefile
</span><span class='line'>
</span><span class='line'>commit a5859c6d7b6114fc0e52be40f7b0f5451c4aba93
</span><span class='line'>...
</span><span class='line'>    x86/build: convert <span class="k">function </span>graph <span class="s1">&#39;-Os&#39;</span> error to warning
</span><span class='line'>commit 3f135e57a4f76d24ae8d8a490314331f0ced40c5
</span><span class='line'>...
</span><span class='line'>    x86/build: Mostly disable <span class="s1">&#39;-maccumulate-outgoing-args&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>The first words of commit messages in Linux are usually
<code>&lt;subsystem&gt;/&lt;sub-subsystem&gt;: &lt;descriptive comment&gt;</code>.</p>

<p>Let’s commit, <code>git commit &lt;files&gt; -s</code>.  We use the <code>-s</code> flag to <code>git commit</code> to
add our signoff.  Signing your patches is standard and notes your agreement to
the
<a href="https://ltsi.linuxfoundation.org/developers/signed-process">Linux Kernel Certificate of Origin</a>.</p>

<h2>Step 4: Generate Patch file</h2>

<p><code>git format-patch HEAD~</code>.  You can use <code>git format-patch HEAD~&lt;number of
commits to convert to patches&gt;</code> to turn multiple commits into patch files.
These patch files will be emailed to the
<a href="https://lkml.org/">Linux Kernel Mailing List (lkml)</a>.
They can be applied with <code>git am &lt;patchfile&gt;</code>.  I like to back these files up
in another directory for future reference, and cause I still make a lot of
mistakes with git.</p>

<h2>Step 5: checkpatch</h2>

<p>You’re going to want to run the kernel’s linter before submitting.  It will
catch style issues and other potential issues.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>./scripts/checkpatch.pl 0001-x86-build-don-t-add-maccumulate-outgoing-args-w-o-co.patch
</span><span class='line'>total: 0 errors, 0 warnings, 9 lines checked
</span><span class='line'>
</span><span class='line'>0001-x86-build-don-t-add-maccumulate-outgoing-args-w-o-co.patch has no obvious style problems and is ready <span class="k">for </span>submission.
</span></code></pre></td></tr></table></div></figure>


<p>If you hit issues here, fix up your changes, update your commit with <code>git
commit --amend &lt;files updated&gt;</code>, rerun format-patch, then rerun checkpatch
until you’re good to go.</p>

<h2>Step 6: email the patch to yourself</h2>

<p>This is good to do when you’re starting off.  While I use
<a href="https://nickdesaulniers.github.io/blog/2016/06/18/mutt-gmail-ubuntu/">mutt</a>
for responding to email, I use <code>git send-email</code> for sending patches.  Once
you’ve gotten a hang of the workflow, this step is optional, more of a sanity
check.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>git send-email <span class="se">\</span>
</span><span class='line'>0001-x86-build-require-only-gcc-use-maccumulate-outgoing-.patch
</span></code></pre></td></tr></table></div></figure>


<p>You don’t need to use command line arguments to cc yourself, assuming you set
up git correctly, git send-email should add you to the cc line as the author of
the patch.  Send the patch just to yourself and make sure everything looks ok.</p>

<h2>Step 7: fire off the patch</h2>

<p>Linux is huge, and has a trusted set of maintainers for various subsystems.
The
<a href="http://elixir.free-electrons.com/linux/latest/source/MAINTAINERS">MAINTAINERS file</a>
keeps track of these, but Linux has a tool to help you figure out where to send
your patch:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>./scripts/get_maintainer.pl 0001-x86-build-don-t-add-maccumulate-outgoing-args-w-o-co.patch
</span><span class='line'>Person A &lt;person@a.com&gt; <span class="o">(</span>maintainer:X86 ARCHITECTURE <span class="o">(</span>32-BIT AND 64-BIT<span class="o">))</span>
</span><span class='line'>Person B &lt;person@b.com&gt; <span class="o">(</span>maintainer:X86 ARCHITECTURE <span class="o">(</span>32-BIT AND 64-BIT<span class="o">))</span>
</span><span class='line'>Person C &lt;person@c.com&gt; <span class="o">(</span>maintainer:X86 ARCHITECTURE <span class="o">(</span>32-BIT AND 64-BIT<span class="o">))</span>
</span><span class='line'>x86@kernel.org <span class="o">(</span>maintainer:X86 ARCHITECTURE <span class="o">(</span>32-BIT AND 64-BIT<span class="o">))</span>
</span><span class='line'>linux-kernel@vger.kernel.org <span class="o">(</span>open list:X86 ARCHITECTURE <span class="o">(</span>32-BIT AND 64-BIT<span class="o">))</span>
</span></code></pre></td></tr></table></div></figure>


<p>With some additional flags, we can feed this output directly into
<code>git send-email</code>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>git send-email <span class="se">\</span>
</span><span class='line'>--cc-cmd<span class="o">=</span><span class="s1">&#39;./scripts/get_maintainer.pl --norolestats 0001-my.patch&#39;</span> <span class="se">\</span>
</span><span class='line'>--cc person@a.com <span class="se">\</span>
</span><span class='line'>0001-my.patch
</span></code></pre></td></tr></table></div></figure>


<p>Make sure to cc yourself when prompted.  Otherwise if you don’t subscribe to
LKML, then it will be difficult to reply to feedback.  It’s also a good idea to
cc any other author that has touched this functionality recently.</p>

<h2>Step 8: monitor feedback</h2>

<p><a href="https://patchwork.kernel.org/project/LKML/list/">Patchwork</a>
for the LKML is a great tool for tracking the progress of patches.  You should
register an account there.   I highly recommend bookmarking your submitter
link.  In Patchwork, click any submitter, then Filters (hidden in the top
left), change submitter to your name, click apply, then bookmark it.
<a href="https://patchwork.kernel.org/project/LKML/list/?submitter=171273">Here’s what mine looks like</a>.
Not much today, and mostly trivial patches, but hopefully this post won’t age
well in that regard.</p>

<p>Feedback may or may not be swift.  I think my first patch I had to ping a
couple of times, but eventually got a response.</p>

<h2>Step 9: responding to feedback</h2>

<p>Update your file, <code>git commit &lt;changed files&gt; --amend</code> to update your latest
commit, <code>git format-patch -v2 HEAD~</code>, edit the patch
file to put the changes below the dash below the signed off lines
(<a href="https://patchwork.kernel.org/patch/9720097/">example</a>), rerun checkpatch,
rerun get_maintainer if the files you modified changed since V1.  Next, you
need to find the messageID to respond to the thread properly.</p>

<p>In gmail, when viewing the message I want to respond to, you can click “Show
Original” from the dropdown near the reply button.  From there, copy the
MessageID from the top (everything in the angle brackets, but not the brackets
themselves).  Finally, we send the patch:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>git send-email <span class="se">\</span>
</span><span class='line'>--cc-cmd<span class="o">=</span><span class="s1">&#39;./scripts/get_maintainer.pl --norolestats 0001-my.patch&#39;</span> <span class="se">\</span>
</span><span class='line'>--cc person@a.com <span class="se">\</span>
</span><span class='line'>--in-reply-to 2017datesandletters@somehostname <span class="se">\</span>
</span><span class='line'>0001-my.patch
</span></code></pre></td></tr></table></div></figure>


<p>We make sure to add anyone who may have commented on the patch from the mailing
list to keep them in the loop.  Rinse and repeat 2 through 9 as desired until
patch is signed off/acked or rejected.</p>

<p>I&rsquo;ve added this handy shell function to my <code>~/.zshrc</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="k">function </span>kpatch <span class="o">()</span> <span class="o">{</span>
</span><span class='line'>  <span class="nv">patch</span><span class="o">=</span><span class="nv">$1</span>
</span><span class='line'>  <span class="nb">shift</span>
</span><span class='line'><span class="nb">  </span>git send-email <span class="se">\</span>
</span><span class='line'>    --cc-cmd<span class="o">=</span><span class="s2">&quot;./scripts/get_maintainer.pl --norolestats $patch&quot;</span> <span class="se">\</span>
</span><span class='line'>    <span class="nv">$@</span> <span class="nv">$patch</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>That I can then invoke like:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>kpatch 0001-Input-mousedev-fix-implicit-conversion-warning.patch --cc anyone@else.com
</span></code></pre></td></tr></table></div></figure>


<p>where <code>anyone@else.com</code> is anyone I want to add in additon to what
<code>get_maintainer</code> sugguests.</p>

<p>Finding out when your patch gets merged is a little tricky; each subsystem
maintainer seems to do things differently.  My first patch, I didn’t know it
went in until a bot at Google notified me.  The maintainers for the second and
third patches had bots notify me that it got merged into their trees, but when
they send Linus a PR and when that gets merged isn’t immediately obvious.</p>

<p>It’s not like Github where everyone involved gets an email that a PR got merged
and the UI changes.  While there’s pros and cons to having this fairly
decentralized process, and while it is kind of is git’s original designed-for
use case, I’d be remiss not to mention that I really miss Github.  Getting your
first patch acknowledged and even merged is
<a href="https://github.com/nickdesaulniers/What-Open-Source-Means-To-Me#what-open-source-means-to-me">intoxicating and makes you want to contribute more</a>;
radio silence has the opposite effect.</p>

<p>Happy hacking!</p>

<p>(Thanks to Reddit user /u/EliteTK for pointing out that <code>-v2</code> was more concise
than <code>--subject-prefix="Patch vX"</code>).</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Static and Dynamic Libraries]]></title>
    <link href="http://nickdesaulniers.github.io/blog/2016/11/20/static-and-dynamic-libraries/"/>
    <updated>2016-11-20T23:55:00-08:00</updated>
    <id>http://nickdesaulniers.github.io/blog/2016/11/20/static-and-dynamic-libraries</id>
    <content type="html"><![CDATA[<p>This is the second post in a series on memory segmentation.  It covers working
with static and dynamic libraries in Linux and OSX.  Make sure to check out the
<a href="http://nickdesaulniers.github.io/blog/2016/08/13/object-files-and-symbols/">first on object files and symbols</a>.</p>

<p>Let’s say we wanted to reuse some of the code from our previous project in our
next one.  We could continue to copy around object files, but let’s say we have
a bunch and it’s hard to keep track of all of them.  Let’s combine multiple
object files into an archive or static library.  Similar to a more conventional
zip file or &ldquo;compressed archive,&rdquo; our static library will be an uncompressed
archive.</p>

<p>We can use the <code>ar</code> command to create and manipulate a static archive.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>clang -c x.c y.c
</span><span class='line'><span class="nv">$ </span>ar -rv libhello.a x.o y.o
</span></code></pre></td></tr></table></div></figure>


<p>The <code>-r</code> flag will create the archive named <code>libhello.a</code> and add the files
<code>x.o</code> and <code>y.o</code> to its index.  I like to add the <code>-v</code> flag for verbose output.
Then we can use the familiar <code>nm</code> tool I introduced in the
<a href="http://nickdesaulniers.github.io/blog/2016/08/13/object-files-and-symbols/">previous post</a>
to examine the content of the archives and their symbols.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>file libhello.a
</span><span class='line'>libhello.a: current ar archive random library
</span><span class='line'><span class="nv">$ </span>nm libhello.a
</span><span class='line'>libhello.a<span class="o">(</span>x.o<span class="o">)</span>:
</span><span class='line'>                 U _puts
</span><span class='line'>0000000000000000 T _x
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>libhello.a<span class="o">(</span>y.o<span class="o">)</span>:
</span><span class='line'>                 U _puts
</span><span class='line'>0000000000000000 T _y
</span></code></pre></td></tr></table></div></figure>


<p>Some other useful flags for <code>ar</code> are <code>-d</code> to delete an object file, ex. <code>ar -d
libhello.a y.o</code> and <code>-u</code> to update existing members of the archive when their
source and object files are updated.  Not only can we run <code>nm</code> on our archive,
<code>otool</code> and <code>objdump</code> both work.</p>

<p>Now that we have our static library, we can statically link it to our program
and see the resulting symbols.  The <code>.a</code> suffix is typical on both OSX and
Linux for archive files.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>clang main.o libhello.a
</span><span class='line'><span class="nv">$ </span>nm a.out
</span><span class='line'>0000000100000f30 T _main
</span><span class='line'>                 U _puts
</span><span class='line'>0000000100000f50 T _x
</span><span class='line'>0000000100000f70 T _y
</span></code></pre></td></tr></table></div></figure>


<p>Our compiler understands how to index into archive files and pull out the
functions it needs to combine into the final executable.  If we use a static
library to statically link all functions required, we can have one binary with
no dependencies.  This can make deployment of binaries simple, but also greatly
increase their size.  Upgrading large binaries incrementally becomes more
costly in terms of space.</p>

<p>While static libraries allowed us to reuse source code, static linkage does not
allow us to reuse memory for executable code between different processes.  I
really want to put off talking about memory benefits until the next post, but
know that the solution to this problem lies in &ldquo;dynamic libraries.&rdquo;</p>

<p>While having a single binary file keeps things simple, it can really hamper
memory sharing and incremental relinking.  For example, if you have multiple
executables that are all built with the same static library, unless your OS is
really smart about copy-on-write page sharing, then you’re likely loading
multiple copies of the same exact code into memory! What a waste!  Also, when
you want to rebuild or update your binary, you spend time performing relocation
again and again with static libraries.  What if we could set aside object files
that we could share amongst multiple instances of the same or even different
processes, and perform relocation at runtime?</p>

<p>The solution is known as dynamic libraries.  If static libraries and static
linkage were Atari controllers, dynamic libraries and dynamic linkage are Steel
Battalion controllers.  We’ll show how to work with them in the rest of this
post, but I’ll prove how memory is saved in a later post.</p>

<p>Let’s say we want to created a shared version of libhello.  Dynamic libraries
typically have different suffixes per OS since each OS has it’s preferred
object file format.  On Linux the .so suffix is common, .dylib on OSX, and .dll
on Windows.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>clang -shared -fpic x.c y.c -o libhello.dylib
</span><span class='line'><span class="nv">$ </span>file libhello.dylib
</span><span class='line'>libhello.dylib: Mach-O 64-bit dynamically linked shared library x86_64
</span><span class='line'><span class="nv">$ </span>nm libhello.dylib
</span><span class='line'>                 U _puts
</span><span class='line'>0000000000000f50 T _x
</span><span class='line'>0000000000000f70 T _y
</span></code></pre></td></tr></table></div></figure>


<p>The <code>-shared</code> flag tells the linker to create a special file called a shared
library.  The <code>-fpic</code> option converts absolute addresses to relative addresses,
which allows for different processes to load the library at different virtual
addresses and share memory.</p>

<p>Now that we have our shared library, let’s dynamically link it into our
executable.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>clang main.c libhello.dylib
</span><span class='line'><span class="nv">$ </span>./a.out
</span><span class='line'>x
</span><span class='line'>y
</span></code></pre></td></tr></table></div></figure>


<p>The dynamic linker essential produces an incomplete binary.  You can verify
with <code>nm</code>.  At runtime, we’ll delay start up to perform some memory mapping
early on in the process start (performed by the dynamic linker) and pay slight
costs for trampolining into position independent code.</p>

<p>Let’s say we want to know what dynamic libraries a binary is using.  You can
either query the executable (most executable object file formats contain a
header the dynamic linker will parse and pull in libs) or observe the
executable while running it.  Because each major OS has its own object file
format, they each have their own tools for these two checks.  Note that
statically linked libraries won’t show up here, since their object code has
already been linked in and thus we’re not able to differentiate between object
code that came from our first party code vs third party static libraries.</p>

<p>On OSX, we can use <code>otool -L &lt;bin&gt;</code> to check which .dylibs will get pulled in.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>otool -L a.out
</span><span class='line'>a.out:
</span><span class='line'>           libhello.dylib <span class="o">(</span>compatibility version 0.0.0, current version 0.0.0<span class="o">)</span>
</span><span class='line'>           /usr/lib/libSystem.B.dylib <span class="o">(</span>compatibility version 1.0.0, current version 1226.10.1<span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>So we can see that <code>a.out</code> depends on <code>libhello.dylib</code> (and expects to find it
in the same directory as <code>a.out</code>).  It also depends on shared library called
libSystem.B.dylib.  If you run <code>otool -L</code> on libSystem itself, you’ll see it
depends on a bunch of other libraries including a C runtime, malloc
implementation, pthreads implementation, and more.  Let’s say you want to find
the final resting place of where a symbol is defined, without digging with <code>nm</code>
and <code>otool</code>, you can fire up your trusty debugger and ask it.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>lldb a.out
</span><span class='line'>...
</span><span class='line'><span class="o">(</span>lldb<span class="o">)</span> image lookup -r -s puts
</span><span class='line'>...
</span><span class='line'>        Summary: libsystem_c.dylib<span class="sb">`</span>puts        Address: libsystem_c.dylib<span class="o">[</span>0x0000000000085c30<span class="o">]</span> <span class="o">(</span>libsystem_c.dylib.__TEXT.__stubs + 3216<span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>You’ll see a lot of output since <code>puts</code> is treated as a regex.  You’re looking
for the Summary line that has an address and is <strong>not</strong> a symbol stub.  You can
then check your work with <code>otool</code> and <code>nm</code>.</p>

<p>If we want to observe the dynamic linker in action on OSX, we can use <code>dtruss</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>sudo dtruss ./a.out
</span><span class='line'>...
</span><span class='line'>stat64<span class="o">(</span><span class="s2">&quot;libhello.dylib\0&quot;</span>, 0x7FFF50CEAC68, 0x1<span class="o">)</span>         <span class="o">=</span> 0 0
</span><span class='line'>open<span class="o">(</span><span class="s2">&quot;libhello.dylib\0&quot;</span>, 0x0, 0x0<span class="o">)</span>              <span class="o">=</span> 3 0
</span><span class='line'>...
</span><span class='line'>mmap<span class="o">(</span>0x10EF27000, 0x1000, 0x5, 0x12, 0x3, 0x0<span class="o">)</span>          <span class="o">=</span> 0x10EF27000 0
</span><span class='line'>mmap<span class="o">(</span>0x10EF28000, 0x1000, 0x3, 0x12, 0x3, 0x1000<span class="o">)</span>               <span class="o">=</span> 0x10EF28000 0
</span><span class='line'>mmap<span class="o">(</span>0x10EF29000, 0xC0, 0x1, 0x12, 0x3, 0x2000<span class="o">)</span>         <span class="o">=</span> 0x10EF29000 0
</span><span class='line'>...
</span><span class='line'>close<span class="o">(</span>0x3<span class="o">)</span>              <span class="o">=</span> 0 0
</span><span class='line'>...
</span></code></pre></td></tr></table></div></figure>


<p>On Linux, we can simply use <code>ldd</code> or <code>readelf -d</code> to query an executable for a
list of its dynamic libraries.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>clang -shared -fpic x.c y.c -o libhello.so
</span><span class='line'><span class="nv">$ </span>clang main.c libhello.so
</span><span class='line'><span class="nv">$ </span>ldd a.out
</span><span class='line'>           linux-vdso.so.1 <span class="o">=</span>&gt;  <span class="o">(</span>0x00007fff95d43000<span class="o">)</span>
</span><span class='line'>           libhello.so <span class="o">=</span>&gt; not found
</span><span class='line'>           libc.so.6 <span class="o">=</span>&gt; /lib/x86_64-linux-gnu/libc.so.6 <span class="o">(</span>0x00007fcc98c5f000<span class="o">)</span>
</span><span class='line'>           /lib64/ld-linux-x86-64.so.2 <span class="o">(</span>0x0000555993852000<span class="o">)</span>
</span><span class='line'><span class="nv">$ </span>readelf -d a.out
</span><span class='line'>Dynamic section at offset 0xe18 contains 25 entries:
</span><span class='line'>  Tag        Type                         Name/Value
</span><span class='line'> 0x0000000000000001 <span class="o">(</span>NEEDED<span class="o">)</span>             Shared library: <span class="o">[</span>libhello.so<span class="o">]</span>
</span><span class='line'> 0x0000000000000001 <span class="o">(</span>NEEDED<span class="o">)</span>             Shared library: <span class="o">[</span>libc.so.6<span class="o">]</span>
</span><span class='line'>...
</span></code></pre></td></tr></table></div></figure>


<p>We can then use <code>strace</code> to observe the dynamic linker in action on Linux:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ LD_LIBRARY_PATH</span><span class="o">=</span>. strace ./a.out
</span><span class='line'>...
</span><span class='line'>open<span class="o">(</span><span class="s2">&quot;./libhello.so&quot;</span>, O_RDONLY|O_CLOEXEC<span class="o">)</span> <span class="o">=</span> 3
</span><span class='line'>...
</span><span class='line'><span class="nb">read</span><span class="o">(</span>3, <span class="s2">&quot;\177ELF\2\1\1\0\0\0\0\0\0\0\0\0\3\0&gt;\0\1\0\0\0\260\5\0\0\0\0\0\0&quot;</span>..., 832<span class="o">)</span> <span class="o">=</span> 832
</span><span class='line'>fstat<span class="o">(</span>3, <span class="o">{</span><span class="nv">st_mode</span><span class="o">=</span>S_IFREG|0755, <span class="nv">st_size</span><span class="o">=</span>8216, ...<span class="o">})</span> <span class="o">=</span> 0
</span><span class='line'>close<span class="o">(</span>3<span class="o">)</span>                                <span class="o">=</span> 0
</span><span class='line'>...
</span></code></pre></td></tr></table></div></figure>


<p>What’s this <code>LD_LIBRARY_PATH</code> thing?  That’s shell syntax for setting an
environmental variable just for the duration of that command (as opposed to
exporting it so it stays set for multiple commands).  As opposed to OSX’s
dynamic linker, which was happy to look in the cwd for libhello.dylib, on Linux
we must supply the cwd if the dynamic library we want to link in is not in the
standard search path.</p>

<p>But what is the standard search path?  Well, there’s another environmental
variable we can set to see this, <code>LD_DEBUG</code>.  For example, on OSX:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ LD_DEBUG</span><span class="o">=</span>libs <span class="nv">LD_LIBRARY_PATH</span><span class="o">=</span>. ./a.out
</span><span class='line'>     15828:        find <span class="nv">library</span><span class="o">=</span>libhello.so <span class="o">[</span>0<span class="o">]</span>; searching
</span><span class='line'>     15828:         search <span class="nv">path</span><span class="o">=</span>./tls/x86_64:./tls:./x86_64:.             <span class="o">(</span>LD_LIBRARY_PATH<span class="o">)</span>
</span><span class='line'>     15828:          trying <span class="nv">file</span><span class="o">=</span>./tls/x86_64/libhello.so
</span><span class='line'>     15828:          trying <span class="nv">file</span><span class="o">=</span>./tls/libhello.so
</span><span class='line'>     15828:          trying <span class="nv">file</span><span class="o">=</span>./x86_64/libhello.so
</span><span class='line'>     15828:          trying <span class="nv">file</span><span class="o">=</span>./libhello.so
</span><span class='line'>     15828:
</span><span class='line'>     15828:        find <span class="nv">library</span><span class="o">=</span>libc.so.6 <span class="o">[</span>0<span class="o">]</span>; searching
</span><span class='line'>     15828:         search <span class="nv">path</span><span class="o">=</span>./tls/x86_64:./tls:./x86_64:.             <span class="o">(</span>LD_LIBRARY_PATH<span class="o">)</span>
</span><span class='line'>     15828:          trying <span class="nv">file</span><span class="o">=</span>./tls/x86_64/libc.so.6
</span><span class='line'>     1earc:          trying <span class="nv">file</span><span class="o">=</span>./tls/libc.so.6
</span><span class='line'>     15828:          trying <span class="nv">file</span><span class="o">=</span>./x86_64/libc.so.6
</span><span class='line'>     15828:          trying <span class="nv">file</span><span class="o">=</span>./libc.so.6
</span><span class='line'>     15828:         search <span class="nv">cache</span><span class="o">=</span>/etc/ld.so.cache
</span><span class='line'>     15828:          trying <span class="nv">file</span><span class="o">=</span>/lib/x86_64-linux-gnu/libc.so.6
</span><span class='line'>     15828:        calling init: /lib/x86_64-linux-gnu/libc.so.6
</span><span class='line'>     15828:        calling init: ./libhello.so
</span><span class='line'>     15828:        initialize program: ./a.out
</span><span class='line'>     15828:        transferring control: ./a.out
</span><span class='line'>x
</span><span class='line'>y
</span><span class='line'>     15828:        calling fini: ./a.out <span class="o">[</span>0<span class="o">]</span>
</span><span class='line'>     15828:        calling fini: ./libhello.so <span class="o">[</span>0<span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>LD_DEBUG</code> is pretty useful.  Try:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ LD_DEBUG</span><span class="o">=</span><span class="nb">help</span> ./a.out
</span><span class='line'>Valid options <span class="k">for </span>the LD_DEBUG environment variable are:
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>  libs        display library search paths
</span><span class='line'>  reloc       display relocation processing
</span><span class='line'>  files       display progress <span class="k">for </span>input file
</span><span class='line'>  symbols     display symbol table processing
</span><span class='line'>  bindings    display information about symbol binding
</span><span class='line'>  versions    display version dependencies
</span><span class='line'>  scopes      display scope information
</span><span class='line'>  all         all previous options combined
</span><span class='line'>  statistics  display relocation statistics
</span><span class='line'>  unused      determined unused DSOs
</span><span class='line'>  <span class="nb">help        </span>display this <span class="nb">help </span>message and <span class="nb">exit</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>To direct the debugging output into a file instead of standard output
</span><span class='line'>a filename can be specified using the LD_DEBUG_OUTPUT environment variable.
</span></code></pre></td></tr></table></div></figure>


<p>For some cool stuff, I recommend checking out <code>LD_DEBUG=symbols</code> and
<code>LD_DEBUG=statistics</code>.</p>

<p>Going back to <code>LD_LIBRARY_PATH</code>, usually libraries you create and want to reuse
between projects go into /usr/local/lib and the headers into
/usr/local/include.  I think of the convention as:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>tree -L 2 /usr/
</span><span class='line'>/usr
</span><span class='line'>├── bin <span class="c"># system installed binaries like nm, gcc</span>
</span><span class='line'>├── include <span class="c"># system installed headers like stdio.h</span>
</span><span class='line'>├── lib <span class="c"># system installed libraries, both static and dynamic</span>
</span><span class='line'>└── <span class="nb">local</span>
</span><span class='line'>    ├── bin <span class="c"># user installed binaries like rustc</span>
</span><span class='line'>    ├── include <span class="c"># user installed headers</span>
</span><span class='line'>    └── lib <span class="c"># user installed</span>
</span></code></pre></td></tr></table></div></figure>


<p>Unfortunately, it’s a loose convention that’s broken down over the years and
things are scattered all over the place.  You can also run into dependency and
versioning issues, that I don’t want to get into here, by placing libraries
here instead of keeping them in-tree or out-of-tree of the source code of a
project.  Just know when you see a library like <code>libc.so.6</code> that the numeric
suffix is a major version number that follows semantic versioning.  For more
information, you should read Michael Kerrisk’s excellent book <em>The Linux
Programming Interface</em>.  This post is based on his chapter’s 41 &amp; 42 (but with
more info on tooling and OSX).</p>

<p>If we were to place our libhello.so into /usr/local/lib (on Linux you need to
then run <code>sudo ldconfig</code>) and move x.h and y.h to /usr/local/include, then we
could then compile with:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>clang main.c -lhello
</span></code></pre></td></tr></table></div></figure>


<p>Note that rather than give a full path to our library, we can use the <code>-l</code> flag
followed by the name of our library with the lib prefix and .so suffix removed.</p>

<p>When working with shared libraries and external code, three flags I use pretty
often:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>* -l&lt;libname to link, no lib prefix or file extension; ex: -lnanomsg to link libnanomsg.so&gt;
</span><span class='line'>* -L &lt;path to search <span class="k">for </span>lib <span class="k">if </span>in non standard directory&gt;
</span><span class='line'>* -I &lt;path to headers <span class="k">for </span>that library, <span class="k">if </span>in non standard directory&gt;
</span></code></pre></td></tr></table></div></figure>


<p>For finding specific flags needed for compilation where dynamic linkage is
required, a tool called <code>pkg-config</code> can be used for finding appropriate flags.
I’ve had less than stellar experiences with the tool as it puts the onus on the
library author to maintain the .pc files, and the user to have them installed
in the right place that <code>pkg-config</code> looks.  When they do exist and are
installed properly, the tool works well:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>sudo apt-get install libpng12-dev
</span><span class='line'><span class="nv">$ </span>pkg-config --libs --cflags libpng12
</span><span class='line'>-I/usr/include/libpng12  -lpng12
</span><span class='line'><span class="nv">$ </span>clang program.c <span class="sb">`</span>!!<span class="sb">`</span>
</span></code></pre></td></tr></table></div></figure>


<p>Using another neat environmental variable, we can hook into the dynamic linkage
process and inject our own shared libraries to be linked instead of the
expected libraries.  Let’s say libgood.so and libmalicous.so both define a
symbol for a function (the same symbol name and function signature).  We can
get a binary that links in libgood.so’s function to instead call
libmalicous.so’s version:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>./a.out
</span><span class='line'>hello from libgood
</span><span class='line'><span class="nv">$ LD_PRELOAD</span><span class="o">=</span>./libmalicious.so ./a.out
</span><span class='line'>hello from libmalicious
</span></code></pre></td></tr></table></div></figure>


<p>LD_PRELOAD is not available on OSX, instead you can use
<code>DYLD_INSERT_LIBRARIES</code>, <code>DYLD_LIBRARY_PATH</code>, and recompile the original
executable with <code>-flat_namespace</code>. Having to recompile the original executable
is less than ideal for hooking an existing binary, but I could not hook libc
as in the previous libmalicious example.  I would be interested to know if you
can though!</p>

<p>Manually invoking the dynamic linker from our code,
<a href="https://rafalcieslak.wordpress.com/2013/04/02/dynamic-linker-tricks-using-ld_preload-to-cheat-inject-features-and-investigate-programs/">we can even man in the middle library calls (call our hooked function first, then invoke the original target)</a>.
We’ll see more of this in the next post on using the dynamic linker.</p>

<p>As you can guess, readjusting the search paths for dynamic libraries is a
security concern as it let’s good and bad folks change the expected execution
paths.  Guarding against the use of these env vars becomes a rabbit hole that
gets pretty tricky to solve without the heavy handed use of statically linking
dependencies.</p>

<p>In the the previous post, I alluded to undefined symbols like <code>puts</code>.  <code>puts</code>
is part of libc, which is probably the most shared dynamic library on most
computing devices since most every program makes use of the C runtime.  (I
think of a “runtime” as implicit code that runs in your program that you didn’t
necessarily write yourself.  Usually a runtime is provided as a library that
gets implicitly linked into your executable when you compile.)  You can
statically link against libc with the <code>-static</code> flag, on Linux at least (OSX
makes this difficult,
<a href="https://developer.apple.com/library/content/qa/qa1118/_index.html">&ldquo;Apple does not support statically linked binaries on Mac OS X&rdquo;</a>).</p>

<p>I’m not sure what the benefit would be to mixing static and dynamic linking,
but after searching the search paths from LD_DEBUG=libs for shared versions of
a library, if any static ones are found, they will get linked in.</p>

<p>There’s also an interesting form of library called a &ldquo;virtual dynamic shared
object&rdquo; on Linux.  I haven’t covered memory mapping yet, but know it exists, is
usually hidden for libc, and that you can read more about it via <code>man 7 vdso</code>.</p>

<p>One thing I find interesting and don’t quite understand how to recreate is that
somehow glibc on Linux is also executable:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>/lib/x86_64-linux-gnu/libc.so.6
</span><span class='line'>GNU C Library <span class="o">(</span>Ubuntu GLIBC 2.24-3ubuntu1<span class="o">)</span> stable release version 2.24, by Roland McGrath et al.
</span><span class='line'>Copyright <span class="o">(</span>C<span class="o">)</span> 2016 Free Software Foundation, Inc.
</span><span class='line'>This is free software; see the <span class="nb">source </span><span class="k">for </span>copying conditions.
</span><span class='line'>There is NO warranty; not even <span class="k">for </span>MERCHANTABILITY or FITNESS FOR A
</span><span class='line'>PARTICULAR PURPOSE.
</span><span class='line'>Compiled by GNU CC version 6.2.0 20161005.
</span><span class='line'>Available extensions:
</span><span class='line'>    crypt add-on version 2.1 by Michael Glad and others
</span><span class='line'>    GNU Libidn by Simon Josefsson
</span><span class='line'>    Native POSIX Threads Library by Ulrich Drepper et al
</span><span class='line'>    BIND-8.2.3-T5B
</span><span class='line'>libc ABIs: UNIQUE IFUNC
</span><span class='line'>For bug reporting instructions, please see:
</span><span class='line'>&lt;https://bugs.launchpad.net/ubuntu/+source/glibc/+bugs&gt;.
</span></code></pre></td></tr></table></div></figure>


<p>Also, note that linking against third party code has licensing implications (of
course) of particular interest when it’s GPL or LGPL.
<a href="http://stackoverflow.com/a/10179181/1027966">Here is a good overview</a>
which I’d summarize as: code that <em>statically</em> links against LGPL code must
also be LGPL, while any form of linkage against GPL code must be GPL’d.</p>

<p>Ok, that was a lot. In the previous post, we covered
<a href="http://nickdesaulniers.github.io/blog/2016/08/13/object-files-and-symbols/">Object Files and Symbols</a>.
In this post we covered hacking around with static and dynamic linkage.  In the
next post, I hope to talk about manually invoking the dynamic linker at
runtime.</p>

<ul>
<li><a href="http://nickdesaulniers.github.io/blog/2016/08/13/object-files-and-symbols/">Part 1 &ndash; Object Files and Symbols</a></li>
<li><a href="http://nickdesaulniers.github.io/blog/2016/11/20/static-and-dynamic-libraries/">Part 2 &ndash; Static and Dynamic Libraries</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Object Files and Symbols]]></title>
    <link href="http://nickdesaulniers.github.io/blog/2016/08/13/object-files-and-symbols/"/>
    <updated>2016-08-13T20:46:00-07:00</updated>
    <id>http://nickdesaulniers.github.io/blog/2016/08/13/object-files-and-symbols</id>
    <content type="html"><![CDATA[<p>What was supposed to be one blog post about memory segmentation turned into
what will be a series of posts.  As the first in the series, we cover the
extreme basics of object files and symbols.  In follow up posts, I
plan to talk about
<a href="http://nickdesaulniers.github.io/blog/2016/11/20/static-and-dynamic-libraries/">static libraries, dynamic libraries,</a>
dynamic linkage, memory segments, and finally memory usage accounting.  I also
cover command line tools for working with these notions, both in Linux and OSX.</p>

<p>A quick review of the compilation+execution pipeline (for terminology):</p>

<ol>
<li>Lexing produces tokens</li>
<li>Parsing produces an abstract syntax tree</li>
<li>Analysis produces a code flow graph</li>
<li>Optimization produces a reduced code flow graph</li>
<li>Code gen produces object code</li>
<li>Linkage produces a complete executable</li>
<li>Loader instructs the OS how to start running the executable</li>
</ol>


<p>This series will focus on part #6.</p>

<p>Let&rsquo;s say you have some amazing C/C++ code,  but for separations of concerns,
you want to start moving it out into separate source files.  Whereas previously
in one file you had:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="c1">// main.c</span>
</span><span class='line'><span class="cp">#include &lt;stdio.h&gt;</span>
</span><span class='line'><span class="kt">void</span> <span class="nf">helper</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">puts</span><span class="p">(</span><span class="s">&quot;helper&quot;</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="kt">int</span> <span class="nf">main</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">helper</span><span class="p">();</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>You now have two source files and maybe a header:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="c1">// main.c</span>
</span><span class='line'><span class="cp">#include &quot;helper.h&quot;</span>
</span><span class='line'><span class="kt">int</span> <span class="nf">main</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">helper</span><span class="p">();</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// helper.h</span>
</span><span class='line'><span class="kt">void</span> <span class="nf">helper</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//helper.c</span>
</span><span class='line'><span class="cp">#include &lt;stdio.h&gt;</span>
</span><span class='line'><span class="cp">#include &quot;helper.h&quot;</span>
</span><span class='line'><span class="kt">void</span> <span class="nf">helper</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">puts</span><span class="p">(</span><span class="s">&quot;helper&quot;</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>In the single source version, we would have compiled and linked that with
<code>clang main.c</code> and had an executable file.  In the multiple source version, we
first compile our source files to object files, then link them altogether.
That can be done separately:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>clang -c helper.c     <span class="c"># produces helper.o</span>
</span><span class='line'><span class="nv">$ </span>clang -c main.c       <span class="c"># produces main.o</span>
</span><span class='line'><span class="nv">$ </span>clang main.o helper.o <span class="c"># produces a.out</span>
</span></code></pre></td></tr></table></div></figure>


<p>We can also do the compilation and linkage in one step:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>clang helper.c main.c <span class="c"># produces a.out</span>
</span></code></pre></td></tr></table></div></figure>


<p>Nothing special thus far; C/C++ 101.  In the first case of separate compilation
and linkage steps, we were left with intermediate object files (.o).  What
exactly are these?</p>

<p><a href="https://en.wikipedia.org/wiki/Object_file">Object files</a>
are almost full executables.  They contain machine code, but that code still
requires a relocation step.  It also contains metadata about the addresses of
its variables and functions (called symbols) in an associative data structure
called a
<a href="https://en.wikipedia.org/wiki/Symbol_table">symbol table</a>.
The addresses may not be the final address of the symbol in the final
executable. They also contain some information for the loader and probably some
other stuff.</p>

<p>Remember that if we fail to specify the helper object file, we&rsquo;ll get an
undefined symbol error.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>clang main.c
</span><span class='line'>Undefined symbols <span class="k">for </span>architecture x86_64:
</span><span class='line'>  <span class="s2">&quot;_helper&quot;</span>, referenced from:
</span><span class='line'>      _main in main-459dde.o
</span><span class='line'>ld: symbol<span class="o">(</span>s<span class="o">)</span> not found <span class="k">for </span>architecture x86_64
</span><span class='line'>clang: error: linker <span class="nb">command </span>failed with <span class="nb">exit </span>code 1 <span class="o">(</span>use -v to see invocation<span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>The problem is main.o refers to some symbol called <code>helper</code>, but on it&rsquo;s own
doesn&rsquo;t contain any more information about it.  Let&rsquo;s say we want to know what
symbols an object file contains, or expects to find elsewhere.  Let&rsquo;s introduce
our first tool, <code>nm</code>.  <code>nm</code> will print the name list or symbol table for a
given object or executable file.  On OSX, these are prefixed with an
underscore.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>nm helper.o
</span><span class='line'>0000000000000000 T _helper
</span><span class='line'>                 U _puts
</span><span class='line'>
</span><span class='line'><span class="nv">$ </span>nm main.o
</span><span class='line'>                 U _helper
</span><span class='line'>0000000000000000 T _main
</span><span class='line'>
</span><span class='line'><span class="nv">$ </span>nm a.out
</span><span class='line'>...
</span><span class='line'>0000000100000f50 T _helper
</span><span class='line'>0000000100000f70 T _main
</span><span class='line'>                 U _puts
</span><span class='line'>...
</span></code></pre></td></tr></table></div></figure>


<p>Let&rsquo;s dissect what&rsquo;s going on here.  The output (as understood by <code>man 1 nm</code>)
is a space separated list of address, type, and symbol name.  We can see that
the addresses are placeholders in object files, and final in executables.  The
name should make sense; it&rsquo;s the name of the function or variable.  While I&rsquo;d
love to get in depth on the various symbol types and talk about sections, I
don&rsquo;t think I could do as great a job as Peter Van Der Linden in his book
&ldquo;Expert C Programming: Deep C Secrets.&rdquo;</p>

<p>For our case, we just care about whether the symbol in a given object file is
defined or not.  The type U (undefined) means that this symbol is referenced or
used in this object code/executable, but it&rsquo;s value wasn&rsquo;t defined here.
When we compiled main.c alone and got the undefined symbol error, it should now
make sense why we got the undefined symbol error for helper.  main.o contains
a symbol for main, and references helper.  helper.o contains a symbol for
helper, and references to puts.  The final executable contains symbols for main
and helper and references to puts.</p>

<p>You might be wondering where puts comes from then, and why didn&rsquo;t we get an
undefined symbol error for puts like we did earlier for helper.  The answer is
the C runtime.  libc is implicitly dynamically linked to all executables
created by the C compiler.  We&rsquo;ll cover dynamic linkage in a later post in
this series.</p>

<p>When the linker performs relocation on the object files, combining them into a
final executable, it goes through placeholders of addresses and fills them in.
We did this manually in our post on
<a href="http://nickdesaulniers.github.io/blog/2015/05/25/interpreter-compiler-jit/">JIT compilers</a>.</p>

<p>While <code>nm</code> gave us a look into our symbol table, two other tools I use
frequently are <code>objdump</code> on Linux and <code>otool</code> on OSX.  Both of these provide
disassembled assembly instructions and their addresses.  Note how the symbols
for functions get translated into labels of the disassembled functions, and
that their address points to the first instruction in that label.  Since I&rsquo;ve
shown <code>objdump</code>
<a href="http://nickdesaulniers.github.io/blog/2013/04/03/basic-jit/">numerous times</a>
in
<a href="http://nickdesaulniers.github.io/blog/2014/04/18/lets-write-some-x86-64/">previous posts</a>,
here&rsquo;s <code>otool</code>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>otool -tV helper.o
</span><span class='line'>helper.o:
</span><span class='line'><span class="o">(</span>__TEXT,__text<span class="o">)</span> section
</span><span class='line'>_helper:
</span><span class='line'>0000000000000000    pushq    %rbp
</span><span class='line'>0000000000000001    movq    %rsp, %rbp
</span><span class='line'>0000000000000004    subq    <span class="nv">$0x10</span>, %rsp
</span><span class='line'>0000000000000008    leaq    0xe<span class="o">(</span>%rip<span class="o">)</span>, %rdi         <span class="c">## literal pool for: &quot;helper&quot;</span>
</span><span class='line'>000000000000000f    callq    _puts
</span><span class='line'>0000000000000014    movl    %eax, -0x4<span class="o">(</span>%rbp<span class="o">)</span>
</span><span class='line'>0000000000000017    addq    <span class="nv">$0x10</span>, %rsp
</span><span class='line'>000000000000001b    popq    %rbp
</span><span class='line'>000000000000001c    retq
</span><span class='line'><span class="nv">$ </span>otool -tV main.o
</span><span class='line'>main.o:
</span><span class='line'><span class="o">(</span>__TEXT,__text<span class="o">)</span> section
</span><span class='line'>_main:
</span><span class='line'>0000000000000000    pushq    %rbp
</span><span class='line'>0000000000000001    movq    %rsp, %rbp
</span><span class='line'>0000000000000004    movb    <span class="nv">$0x0</span>, %al
</span><span class='line'>0000000000000006    callq    _helper
</span><span class='line'>000000000000000b    xorl    %eax, %eax
</span><span class='line'>000000000000000d    popq    %rbp
</span><span class='line'>000000000000000e    retq
</span><span class='line'><span class="nv">$ </span>otool -tV a.out
</span><span class='line'>a.out:
</span><span class='line'><span class="o">(</span>__TEXT,__text<span class="o">)</span> section
</span><span class='line'>_helper:
</span><span class='line'>0000000100000f50    pushq    %rbp
</span><span class='line'>0000000100000f51    movq    %rsp, %rbp
</span><span class='line'>0000000100000f54    subq    <span class="nv">$0x10</span>, %rsp
</span><span class='line'>0000000100000f58    leaq    0x43<span class="o">(</span>%rip<span class="o">)</span>, %rdi        <span class="c">## literal pool for: &quot;helper&quot;</span>
</span><span class='line'>0000000100000f5f    callq    0x100000f80             <span class="c">## symbol stub for: _puts</span>
</span><span class='line'>0000000100000f64    movl    %eax, -0x4<span class="o">(</span>%rbp<span class="o">)</span>
</span><span class='line'>0000000100000f67    addq    <span class="nv">$0x10</span>, %rsp
</span><span class='line'>0000000100000f6b    popq    %rbp
</span><span class='line'>0000000100000f6c    retq
</span><span class='line'>0000000100000f6d    nop
</span><span class='line'>0000000100000f6e    nop
</span><span class='line'>0000000100000f6f    nop
</span><span class='line'>_main:
</span><span class='line'>0000000100000f70    pushq    %rbp
</span><span class='line'>0000000100000f71    movq    %rsp, %rbp
</span><span class='line'>0000000100000f74    movb    <span class="nv">$0x0</span>, %al
</span><span class='line'>0000000100000f76    callq    _helper
</span><span class='line'>0000000100000f7b    xorl    %eax, %eax
</span><span class='line'>0000000100000f7d    popq    %rbp
</span><span class='line'>0000000100000f7e    retq
</span></code></pre></td></tr></table></div></figure>


<p><code>readelf -s &lt;object file&gt;</code> will give us a list of symbols on Linux.
<a href="https://en.wikipedia.org/wiki/Executable_and_Linkable_Format">ELF</a>
is the file format used by the loader on Linux, while OSX uses
<a href="https://en.wikipedia.org/wiki/Mach-O">Mach-O</a>.
Thus <code>readelf</code> and <code>otool</code>, respectively.</p>

<p>Also note that for static linkage, symbols need to be unique*, as they refer to
memory locations to either read/write to in the case of variables or locations
to jump to in the case of functions.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>cat double_define.c
</span><span class='line'>void a <span class="o">()</span> <span class="o">{}</span>
</span><span class='line'>void a <span class="o">()</span> <span class="o">{}</span>
</span><span class='line'>int main <span class="o">()</span> <span class="o">{}</span>
</span><span class='line'><span class="nv">$ </span>clang double_define.c
</span><span class='line'>double_define.c:2:6: error: redefinition of <span class="s1">&#39;a&#39;</span>
</span><span class='line'>void a <span class="o">()</span> <span class="o">{}</span>
</span><span class='line'>     ^
</span><span class='line'>double_define.c:1:6: note: previous definition is here
</span><span class='line'>void a <span class="o">()</span> <span class="o">{}</span>
</span><span class='line'>     ^
</span><span class='line'>1 error generated.
</span></code></pre></td></tr></table></div></figure>


<p>*: there&rsquo;s a notion of weak symbols, and some special things for dynamic
libraries we&rsquo;ll see in a follow up post.</p>

<p>Languages like C++ that support function overloading (functions with the same
name but different arguments, return types, namespaces, or class) must mangle
their function names to make them unique.</p>

<p>Code like:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="k">namespace</span> <span class="n">util</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">class</span> <span class="nc">Widget</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">public</span><span class="o">:</span>
</span><span class='line'>      <span class="kt">void</span> <span class="n">doSomething</span> <span class="p">(</span><span class="kt">bool</span> <span class="n">save</span><span class="p">);</span>
</span><span class='line'>      <span class="kt">void</span> <span class="n">doSomething</span> <span class="p">(</span><span class="kt">int</span> <span class="n">n</span><span class="p">);</span>
</span><span class='line'>  <span class="p">};</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Will produce symbols like:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>clang class.cpp -std<span class="o">=</span>c++11
</span><span class='line'><span class="nv">$ </span>nm a.out
</span><span class='line'>0000000100000f70 T __ZN4util6Widget11doSomethingEb
</span><span class='line'>0000000100000f60 T __ZN4util6Widget11doSomethingEi
</span><span class='line'>...
</span></code></pre></td></tr></table></div></figure>


<p>Note: GNU <code>nm</code> on Linux distros will have a <code>--demangle</code> option:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>nm --demangle a.out
</span><span class='line'>...
</span><span class='line'>00000000004006d0 T util::Widget::doSomething<span class="o">(</span>bool<span class="o">)</span>
</span><span class='line'>00000000004006a0 T util::Widget::doSomething<span class="o">(</span>int<span class="o">)</span>
</span><span class='line'>...
</span></code></pre></td></tr></table></div></figure>


<p>On OSX, we can pipe <code>nm</code> into <code>c++filt</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>nm a.out | c++filt
</span><span class='line'>0000000100000f70 T util::Widget::doSomething<span class="o">(</span>bool<span class="o">)</span>
</span><span class='line'>0000000100000f60 T util::Widget::doSomething<span class="o">(</span>int<span class="o">)</span>
</span><span class='line'>...
</span></code></pre></td></tr></table></div></figure>


<p>Finally, if you don&rsquo;t have an object file, but instead a backtrace that needs
demangling, you can either invoke <code>c++filt</code> manually or use
<a href="http://demangler.com/">demangler.com</a>.</p>

<p>Rust also mangles its function names.  For FFI or interface with C functions,
other languages usually have to look for or expose symbols in a manner suited
to C, the lowest common denominator.
<a href="http://en.cppreference.com/w/cpp/language/language_linkage">C++</a>
has <code>extern "C"</code> blocks and
<a href="https://doc.rust-lang.org/book/ffi.html">Rust</a>
has <code>extern</code> blocks.</p>

<p>We can use <code>strip</code> to remove symbols from a binary.  This can slim down a
binary at the cost of making stack traces unreadable.  If you&rsquo;re following
along at home, try comparing the output from your disassembler and <code>nm</code> before
and after running <code>strip</code> on the executable.  Luckily, you can&rsquo;t strip the
symbols out of object files, otherwise they&rsquo;d be useless as you&rsquo;d no longer be
able to link them.</p>

<p>If we compile with the <code>-g</code> flag, we can create a different kind of symbol;
<a href="https://en.wikipedia.org/wiki/Debug_symbol">debug symbols</a>.
Depending on your compiler+host OS, you&rsquo;ll get another file you can run through
<code>nm</code> to see an entry per symbol.  You&rsquo;ll get more info by using <code>dwarfdump</code> on
this file.  Debug symbols will retain source information such as filename and
line number for all symbols.</p>

<p>This post should have been a simple refresher of some of the basics of working
with C code. Finding symbols to be placed into a final executable and
relocating addresses are the main job of the linker, and will be the main theme
of the posts in this series. Keep your eyes out for more in this series on
memory segmentation.</p>

<ul>
<li><a href="http://nickdesaulniers.github.io/blog/2016/08/13/object-files-and-symbols/">Part 1 &ndash; Object Files and Symbols</a></li>
<li><a href="http://nickdesaulniers.github.io/blog/2016/11/20/static-and-dynamic-libraries/">Part 2 &ndash; Static and Dynamic Libraries</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Cross Compiling C/C++ for Android]]></title>
    <link href="http://nickdesaulniers.github.io/blog/2016/07/01/android-cli/"/>
    <updated>2016-07-01T22:42:00-07:00</updated>
    <id>http://nickdesaulniers.github.io/blog/2016/07/01/android-cli</id>
    <content type="html"><![CDATA[<p>Let’s say you want to build a hello world command line application in C or C++
and run it on your Android phone.  How would you go about it?  It’s not super
practical; apps visible and distributable to end users must use the framework
(AFAIK), but for folks looking to get into developing on ARM it’s likely they
have an ARM device in their pocket.</p>

<p>This post is for folks who typically invoke their compiler from the command
line, either explicitly, from build scripts, or other forms of automation.</p>

<p>At
<a href="https://twitter.com/LostOracle/status/697859368226697218">work</a>,
when working on Android, we typically checkout the entire Android source code
(<a href="https://twitter.com/LostOracle/status/702569487531249664">which is huge</a>),
use <code>lunch</code> to configure a ton of environmental variables, then use Makefiles
with lots of includes and special vars.  We don’t want to spend the time and
disk space checking out the Android source code just to have a working cross
compiler.  Luckily, the Android tools team has an excellent utility to grab a
prebuilt cross compiler.</p>

<p>This assumes you’re building from a Linux host.  Android is a distribution of
Linux, which is much easier to target from a Linux host.  At home, I’ll usually
develop on my OSX machine, ssh’d into my headless Linux box. (iTerm2 and tmux
both have exclusive features, but I currently prefer iTerm2.)</p>

<p>The first thing we want to do is fetch the
<a href="https://developer.android.com/ndk/downloads/index.html">Android NDK</a>.
Not the SDK, the NDK.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>➜  ~ curl -O <span class="se">\</span>
</span><span class='line'>  http://dl.google.com/android/repository/android-ndk-r12b-linux-x86_64.zip
</span><span class='line'>➜  ~ unzip android-ndk-r12b-linux-x86_64.zip
</span></code></pre></td></tr></table></div></figure>


<p>It would be helpful to install adb and fastboot, too.  This might be different
for your distro’s package manager.  Better yet may be to just build from
source.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>➜  ~ sudo apt-get install android-tools-adb android-tools-fastboot
</span></code></pre></td></tr></table></div></figure>


<p>Now for you Android device that you want to target, you’ll want to know the
ISA.  Let’s say I want to target my Nexus 6P, which has an ARMv8-A ISA (the
first 64b ARM ISA).</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>➜  ~ ./android-ndk-r12b/build/tools/make_standalone_toolchain.py --arch arm64 <span class="se">\</span>
</span><span class='line'>  --install-dir ~/arm
</span></code></pre></td></tr></table></div></figure>


<p>This will create a nice standalone bundle in <code>~/arm</code>.  It will contain our
cross compiler, linker, headers, libs, and
<a href="https://twitter.com/LostOracle/status/749297676223598592">sysroot (crt.o and friends)</a>.
Most Android devices are ARMv7-A, so you’d use <code>--arch arm</code>.  See the other
supported architectures for cross compiling under
<a href="https://developer.android.com/ndk/guides/standalone_toolchain.html#itc">table 4</a>.</p>

<p>You might also want to change your install-dir and possible add it to your
<code>$PATH</code>, or set <code>$CC</code> and <code>$CXX</code>.</p>

<p>Now we can compile <code>hello_world.c</code>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>➜  ~ cat hello_world.c
</span><span class='line'><span class="c">#include &lt;stdio.h&gt;</span>
</span><span class='line'>int main <span class="o">()</span> <span class="o">{</span>
</span><span class='line'>  puts<span class="o">(</span><span class="s2">&quot;hello world&quot;</span><span class="o">)</span>;
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'>➜  ~ ~/arm/bin/clang -pie hello_world.c
</span><span class='line'>➜  ~ file a.out
</span><span class='line'>a.out: ELF 64-bit LSB shared object, ARM aarch64, version 1 <span class="o">(</span>SYSV<span class="o">)</span>, dynamically
</span><span class='line'>linked, interpreter /system/bin/linker64,
</span><span class='line'>BuildID<span class="o">[</span>sha1<span class="o">]=</span>ecc46648cf2c873253b3b522c0d14b91cf17c70f, not stripped
</span></code></pre></td></tr></table></div></figure>


<p><a href="http://stackoverflow.com/a/30547603">Since Android Lollipop</a>,
Android has required that executables be linked as
position independent (<code>-pie</code>) to help provide
<a href="https://en.wikipedia.org/wiki/Address_space_layout_randomization#Android">ASLR</a>.</p>

<p><code>&lt;install-dir&gt;/bin/</code> also has shell scripts with more full featured names like
<code>aarch64-linux-android-clang</code> if you prefer to have clearer named executables
in your $PATH.</p>

<p>Connect your phone, enable remote debugging, and accept the prompt for remote
debugging.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>➜  ~ adb push a.out /data/local/tmp/.
</span><span class='line'>➜  ~ adb shell <span class="s2">&quot;./data/local/tmp/a.out&quot;</span>
</span><span class='line'>hello world
</span></code></pre></td></tr></table></div></figure>


<p>We’ll use this toolchain in a follow post to start writing some ARMv8-A
assembly.  Stay tuned.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Setting up mutt with gmail on Ubuntu]]></title>
    <link href="http://nickdesaulniers.github.io/blog/2016/06/18/mutt-gmail-ubuntu/"/>
    <updated>2016-06-18T16:26:00-07:00</updated>
    <id>http://nickdesaulniers.github.io/blog/2016/06/18/mutt-gmail-ubuntu</id>
    <content type="html"><![CDATA[<p>I was looking to set up the
<a href="http://www.mutt.org/">mutt</a>
email client on my Ubuntu box to go through my gmail account.  Since it took me
a couple of hours to figure out, and I’ll probably forget by the time I need to
know again, I figure I’d post my steps here.</p>

<p>I’m on Ubuntu 16.04 LTS (<code>lsb_release -a</code>)</p>

<p>Install mutt:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>sudo apt-get install mutt
</span></code></pre></td></tr></table></div></figure>


<p>In gmail, allow other apps to access gmail:</p>

<p><a href="https://support.google.com/accounts/answer/6010255?hl=en">Allowing less secure apps to access your account</a>
<a href="https://www.google.com/settings/security/lesssecureapps">Less Secure Apps</a></p>

<p>Create the folder</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>sudo touch <span class="nv">$MAIL</span>
</span><span class='line'><span class="nv">$ </span>sudo chmod 660 <span class="nv">$MAIL</span>
</span><span class='line'><span class="nv">$ </span>sudo chown <span class="sb">`</span>whoami<span class="sb">`</span>:mail <span class="nv">$MAIL</span>
</span></code></pre></td></tr></table></div></figure>


<p>where <code>$MAIL</code> for me was <code>/var/mail/nick</code>.</p>

<p>Create the ~/.muttrc file</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nb">set </span><span class="nv">realname</span> <span class="o">=</span> <span class="s2">&quot;&lt;first and last name&gt;&quot;</span>
</span><span class='line'><span class="nb">set </span><span class="nv">from</span> <span class="o">=</span> <span class="s2">&quot;&lt;gmail username&gt;@gmail.com&quot;</span>
</span><span class='line'><span class="nb">set </span><span class="nv">use_from</span> <span class="o">=</span> yes
</span><span class='line'><span class="nb">set </span><span class="nv">envelope_from</span> <span class="o">=</span> yes
</span><span class='line'>
</span><span class='line'><span class="nb">set </span><span class="nv">smtp_url</span> <span class="o">=</span> <span class="s2">&quot;smtps://&lt;gmail username&gt;@gmail.com@smtp.gmail.com:465/&quot;</span>
</span><span class='line'><span class="nb">set </span><span class="nv">smtp_pass</span> <span class="o">=</span> <span class="s2">&quot;&lt;gmail password&gt;&quot;</span>
</span><span class='line'><span class="nb">set </span><span class="nv">imap_user</span> <span class="o">=</span> <span class="s2">&quot;&lt;gmail username&gt;@gmail.com&quot;</span>
</span><span class='line'><span class="nb">set </span><span class="nv">imap_pass</span> <span class="o">=</span> <span class="s2">&quot;&lt;gmail password&gt;&quot;</span>
</span><span class='line'><span class="nb">set </span><span class="nv">folder</span> <span class="o">=</span> <span class="s2">&quot;imaps://imap.gmail.com:993&quot;</span>
</span><span class='line'><span class="nb">set </span><span class="nv">spoolfile</span> <span class="o">=</span> <span class="s2">&quot;+INBOX&quot;</span>
</span><span class='line'><span class="nb">set </span><span class="nv">ssl_force_tls</span> <span class="o">=</span> yes
</span><span class='line'>
</span><span class='line'><span class="c"># G to get mail</span>
</span><span class='line'><span class="nb">bind </span>index G imap-fetch-mail
</span><span class='line'><span class="nb">set </span><span class="nv">editor</span> <span class="o">=</span> <span class="s2">&quot;vim&quot;</span>
</span><span class='line'><span class="nb">set </span><span class="nv">charset</span> <span class="o">=</span> <span class="s2">&quot;utf-8&quot;</span>
</span><span class='line'><span class="nb">set </span><span class="nv">record</span> <span class="o">=</span> <span class="s1">&#39;&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>I’m sure there’s better/more config options.  Feel free to go wild, this is by
no means a comprehensive setup.</p>

<p>Run mutt:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>mutt
</span></code></pre></td></tr></table></div></figure>


<p>We should see it connect and download our messages.  <code>m</code> to start sending new
messages. <code>G</code> to fetch new messages.</p>

<p><img class="center" src="http://nickdesaulniers.github.io/images/mutt.png"></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Data Models and Word Size]]></title>
    <link href="http://nickdesaulniers.github.io/blog/2016/05/30/data-models-and-word-size/"/>
    <updated>2016-05-30T12:54:00-07:00</updated>
    <id>http://nickdesaulniers.github.io/blog/2016/05/30/data-models-and-word-size</id>
    <content type="html"><![CDATA[<p><em>This post is a follow up to
<a href="http://nickdesaulniers.github.io/blog/2016/05/15/whats-in-a-word/">my previous blog post about word size</a>.</em></p>

<p>Three C/C++ programmers walk into a bar.  One argues that sizeof(void*) is
equivalent to sizeof(long), one argues that sizeof(void*) is equivalent to
sizeof(int), and the third argues it’s sizeof(long long).  Simultaneously,
they’re all right, but they’re also all wrong (and need a lesson about portable
C code).  What the hell is going on?</p>

<p>One of the first few programs a programmer might write after hello world is
something like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cp">#include &lt;stdio.h&gt;</span>
</span><span class='line'><span class="kt">int</span> <span class="nf">main</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">printf</span><span class="p">(</span><span class="s">&quot;sizeof(int): %zu</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="kt">int</span><span class="p">));</span>
</span><span class='line'>  <span class="n">printf</span><span class="p">(</span><span class="s">&quot;sizeof(long): %zu</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="kt">long</span><span class="p">));</span>
</span><span class='line'>  <span class="n">printf</span><span class="p">(</span><span class="s">&quot;sizeof(long long): %zu</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="kt">long</span> <span class="kt">long</span><span class="p">));</span>
</span><span class='line'>  <span class="n">printf</span><span class="p">(</span><span class="s">&quot;sizeof(void*): %zu</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="kt">void</span><span class="o">*</span><span class="p">));</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><em>Note the use of the %zu format specifier, a C99 addition that isn’t portable to
older compilers!  (This post is more about considerations when porting older
code to newer machines, not about porting newer code to run on older machines.
Not having a standards compliant C compiler makes writing more portable C code
even trickier, and is a subject for another blog post).</em></p>

<p>When I run that code on my x86-64 OSX machine, I get the following output:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>sizeof<span class="o">(</span>int<span class="o">)</span>: 4
</span><span class='line'>sizeof<span class="o">(</span>long<span class="o">)</span>: 8
</span><span class='line'>sizeof<span class="o">(</span>long long<span class="o">)</span>: 8
</span><span class='line'>sizeof<span class="o">(</span>void*<span class="o">)</span>: 8
</span></code></pre></td></tr></table></div></figure>


<p>So it looks like I would be the first programmer in the story in the first
paragraph, since on my machine, it looks like sizeof(long) == sizeof(void*).
Also note how sizeof(long long) is equivalent as well.</p>

<p>But what would happen if I compiled my code on a 32 bit machine?  Luckily, my
processor has backwards compatibility with 32b binaries, so I can cross compile
it locally and still run it. Ex:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>➜  clang sizeof.c -Wall -Wextra -Wpedantic
</span><span class='line'>➜  file a.out
</span><span class='line'>a.out: Mach-O 64-bit executable x86_64
</span><span class='line'>➜  clang sizeof.c -Wall -Wextra -Wpedantic -m32
</span><span class='line'>➜  file a.out
</span><span class='line'>a.out: Mach-O executable i386
</span><span class='line'>➜  ./a.out
</span><span class='line'>sizeof<span class="o">(</span>int<span class="o">)</span>: 4
</span><span class='line'>sizeof<span class="o">(</span>long<span class="o">)</span>: 4
</span><span class='line'>sizeof<span class="o">(</span>long long<span class="o">)</span>: 8
</span><span class='line'>sizeof<span class="o">(</span>void*<span class="o">)</span>: 4
</span></code></pre></td></tr></table></div></figure>


<p>Huh, suddenly sizeof(void*) == sizeof(int) == sizeof(long)!  This seems
to be the case of the second programmer from the story.</p>

<p>Both programmer 1 and programmer 2 might agree that the size of a pointer is
equivalent to their machine’s respective
<a href="http://nickdesaulniers.github.io/blog/2016/05/15/whats-in-a-word/">word size</a>,
but that too would be an incorrect assumption for portable C/C++ code!</p>

<p>Programmer 3 goes through the hellscape that is installing a working compiler
for Windows and building a 64b command line application (to be fair, installing
command line tools for OSX is worse; installing a compiler for most OS’ leaves
much to be desired).  When they run that program, they see:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>sizeof<span class="o">(</span>int<span class="o">)</span>: 4
</span><span class='line'>sizeof<span class="o">(</span>long<span class="o">)</span>: 4
</span><span class='line'>sizeof<span class="o">(</span>long long<span class="o">)</span>: 8
</span><span class='line'>sizeof<span class="o">(</span>void*<span class="o">)</span>: 8
</span></code></pre></td></tr></table></div></figure>


<p>This is yet a third case (the third programmer from the story).  In this case,
only sizeof(long long) is equivalent to sizeof(void*).</p>

<h3>Data Models</h3>

<p>What these programmers are seeing is known as data models.  Programmer 1 one on
a 64b x86-64 OSX machine had an LP64 data model where longs (L), (larger long
longs,) and pointers (P) are 64b, but ints were 32b.  Programmer 2 on a 32b x86
OSX machine had an ILP32 data model where ints (I), longs (L), and pointers (P)
were 32b, but long longs were 64b.  Programmer 3 on a 64b x86-64 Windows
machine had a LLP64 data model, where only long longs (LL) and pointers (P)
were 64b, ints and longs being 32b.</p>

<table>
<thead>
<tr>
<th><strong>Data model</strong> </th>
<th> <strong>sizeof(int)</strong> </th>
<th> <strong>sizeof(long)</strong> </th>
<th> <strong>sizeof(long long)</strong> </th>
<th> <strong>sizeof(void*)</strong> </th>
<th> <strong>example</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td>ILP32 </td>
<td> 32b </td>
<td> 32b </td>
<td> 64b </td>
<td> 32b </td>
<td> Win32, i386 OSX &amp; Linux</td>
</tr>
<tr>
<td>LP64 </td>
<td> 32b </td>
<td> 64b </td>
<td> 64b </td>
<td> 64b </td>
<td> x86-64 OSX &amp; Linux</td>
</tr>
<tr>
<td>LLP64 </td>
<td> 32b </td>
<td> 32b </td>
<td> 64b </td>
<td> 64b </td>
<td> Win64</td>
</tr>
</tbody>
</table>


<p>There are older data models such as LP32 (Windows 3.1, Macintosh, where ints
are 16b), and more exotic ones like ILP64, and SILP64.  Knowing the data model
thus is important for portable C/C++ code.</p>

<h3>Historical Perspective</h3>

<p>Running out of address space is and will continue to be tradition in computing.
Applications become bigger as computer power and memory gets cheaper.
Companies want to sell chips that have larger word sizes to address more
memory, but early adopters don’t want to buy a computer where there favorite
application hasn’t been compiled and thus doesn’t exist on yet.  <strong>Someone from
the back shouts <em>virtual machines</em> then ducks as a chair is thrown.</strong></p>

<p><a href="http://www.unix.org/version2/whatsnew/lp64_wp.html">This document</a>
highlights some reasons why LP64 is preferred to ILP64: ILP64
made portable C code that only needed 32b of precision harder to maintain (on
ILP64 an int was 64b, but a short was 16b!).  It mentions how for data
structures that did not contain pointers, their size would be the same on LLP64
as ILP32, which is the direction Microsoft went.  LLP64 was essentially the
ILP32 model with 64b pointers.</p>

<p><em>Linux also supports an ABI called
<a href="https://en.wikipedia.org/wiki/X32_ABI">x32</a>
which can use x86-64 ISA improvements but uses 32b pointers to reduce the size
of data structures that would otherwise have 64b pointers.</em></p>

<p>For a great historical perspective on the evolution of word size and data
models, as well as the &ldquo;toil and trouble&rdquo; caused,
<a href="https://queue.acm.org/detail.cfm?id=1165766">this paper</a>
was an excellent reference.  It describes Microsoft finally abandoning support
for 16b data models in Windows XP 64.  It mentions that the industry was pretty
split between LP64, LLP64, and ILP64 as porting code from the good old days of
ILP32 would break in different ways.  That the use of long was more prevalent
in Windows applications vs the use of int in unix applications.  It also makes
the key point that a lot of programmers from the ILP32 era made assumptions
that sizeof(int) == sizeof(long) == sizeof(void*) which would not hold true
for the LP64/LLP64 era.</p>

<p>One important point the paper makes makes that’s easily missed is that typedef
wasn’t added to C until 1977 when hardware manufactures still couldn’t agree on
how many bits were in a char (CHAR_BITS) and some machines were using 24b
addressing schemes.  stdint.h and inttypes.h did not exist yet.</p>

<p><a href="http://nickdesaulniers.github.io/blog/2016/05/15/whats-in-a-word/">This article</a>
talks about two main categories of effects of switching from ILP32 to LP64 and
has excellent examples of problematic code.  That section near the end is worth
the read alone and makes excellent points to look for during code review.</p>

<h3>Conclusion</h3>

<p>Word size or ISA doesn’t tell you anything about sizeof(int), sizeof(long), or
sizeof(long long).  We also saw that one machine can support multiple different
data models (when I compiled and ran the same code with the -m32 flag).</p>

<p>The C standard tells you minimum guaranteed sizes for these types, but the data
model (part of the ABI, external to but abiding by the C standard) is what
tells you about the specifics sizes of standard integers and pointers.</p>

<h3>Further Reading</h3>

<ul>
<li><a href="http://www.unix.org/version2/whatsnew/lp64_wp.html">64-Bit Programming Models: Why LP64?</a></li>
<li><a href="https://queue.acm.org/detail.cfm?id=1165766">The Long Road to 64 Bits</a></li>
<li><a href="http://www.unix.org/whitepapers/64bit.html">The UNIX System &mdash; 64bit and Data Size Neutrality</a></li>
<li><a href="https://en.wikipedia.org/wiki/64-bit_computing#64-bit_data_models">64-bit data models</a></li>
<li><a href="https://docs.oracle.com/cd/E19620-01/805-3024/lp64-1/index.html">C Language Data Type Models: LP64 and ILP32</a></li>
<li><a href="https://blogs.oracle.com/nike/entry/ilp64_lp64_llp64">ILP64, LP64, LLP64</a></li>
<li><a href="https://en.wikipedia.org/wiki/X32_ABI">x32 ABI</a></li>
<li><a href="http://stackoverflow.com/a/9162072">difference between stdint.h and inttypes.h</a></li>
<li><a href="https://msdn.microsoft.com/en-us/library/windows/desktop/aa384083%28v=vs.85%29.aspx">Abstract Data Models</a></li>
<li><a href="https://msdn.microsoft.com/en-us/library/windows/desktop/aa384264%28v=vs.85%29.aspx">The New Data Types</a></li>
<li><a href="http://stackoverflow.com/a/13413892">Is there any reason not to use fixed width integer types (e.g. uint8_t)?</a></li>
<li><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050131-00/?p=36563/">Why did the Win64 team choose the LLP64 model?</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[What's in a Word?]]></title>
    <link href="http://nickdesaulniers.github.io/blog/2016/05/15/whats-in-a-word/"/>
    <updated>2016-05-15T17:58:00-07:00</updated>
    <id>http://nickdesaulniers.github.io/blog/2016/05/15/whats-in-a-word</id>
    <content type="html"><![CDATA[<p>Recently, there some was some confusion between myself and a coworker over the
definition of a &ldquo;word.&rdquo;  I&rsquo;m currently working on a blog post about data
alignment and figured it would be good to clarify some things now, that we can
refer to later.</p>

<p>Having studied computer engineering and being quite fond of processor design,
when I think of a &ldquo;word,&rdquo; I think of the number of bits wide a processor&rsquo;s
general purpose registers are
(aka <a href="https://en.wikipedia.org/wiki/Word_%28computer_architecture%29#Size_families">word size</a>).
This places hard requirements on the largest representable number and address
space.  A 64 bit processor can represent 2<sup>64</sup>-1 (1.8x10<sup>19</sup>) as the largest
unsigned long integer, and address up to 2<sup>64</sup>-1 (16 EiB) different addresses in
memory.</p>

<p>Further, word size limits the possible combinations of operations the processor
can perform, length of immediate values used, inflates the size of binary files
and memory needed to store pointers, and puts pressure on instruction caches.</p>

<p>Word size also has implications on loads and stores based on alignment, as
we&rsquo;ll see in a follow up post.</p>

<p>When I think of 8 bit computers, I think of my first microcontroller: an
Arduino with an Atmel AVR processor.  When I think of 16 bit computers, I think
of my first game console, a Super Nintendo with a Ricoh 5A22.  When I think of
32 bit computers, I think of my first desktop with Intel&rsquo;s Pentium III.  And
when I think of 64 bit computers, I think modern smartphones with ARMv8
instruction sets.  When someone mentions a particular word size, what are the
machines that come to mind for you?</p>

<p>So to me, when someone&rsquo;s talking about a 64b processor, to that machine (and
me) a word is 64b.  When we&rsquo;re referring to a 8b processor, a word is 8b.</p>

<p>Now, some confusion.</p>

<p>Back in my previous blog posts about
<a href="http://nickdesaulniers.github.io/blog/2014/04/18/lets-write-some-x86-64/">x86-64 assembly</a>,
<a href="http://nickdesaulniers.github.io/blog/2015/05/25/interpreter-compiler-jit/">JITs</a>, or
<a href="http://nickdesaulniers.github.io/blog/2016/01/20/debugging-x86-64-assembly-with-lldb-and-dtrace/">debugging</a>,
you might have seen me use instructions that have suffixes of b for byte (8b),
w for word (16b), dw for double word (32b), and qw for quad word (64b) (since
SSE2 there&rsquo;s also double quadwords of 128b).</p>

<p>Wait a minute!  How suddenly does a &ldquo;word&rdquo; refer to 16b on a 64b processor, as
opposed to a 64b &ldquo;word?&rdquo;</p>

<p>In short, historical baggage.  Intel&rsquo;s first hit processor was the
<a href="https://en.wikipedia.org/wiki/Intel_4004">4004</a>,
a 4b processor released in 1971.  It wasn&rsquo;t until 1979 that Intel created the
16b
<a href="https://en.wikipedia.org/wiki/Intel_8086">8086 processor</a>.</p>

<p>The 8086 was created to compete with other 16b processors that beat it to the
market, like the
<a href="https://en.wikipedia.org/wiki/Zilog_Z80">Zilog Z80</a>
(any Gameboy emulator fans out there?  Yes, I know about the Sharp LR35902).
The 8086 was the first design in the
<a href="https://en.wikipedia.org/wiki/X86">x86 family</a>,
and it allowed for the same assembly syntax from the earlier 8008, 8080, and
8085 to be reassembled for it.  The 8086&rsquo;s little brother (8088) would be used
in
<a href="https://en.wikipedia.org/wiki/IBM_Personal_Computer#Open_standards">IBM&rsquo;s PC</a>,
and the rest is history.  x86 would become one of the most successful
ISAs in history.</p>

<p>For backwards compatibility, it seems that both Microsoft&rsquo;s (whose success has
tracked that of x86 since MS-DOS and IBM&rsquo;s PC) and Intel&rsquo;s documentation refers
to words still as being 16b. This allowed 16b PE32+ executables to be run on
32b or even 64b newer versions of Windows, without requiring recompilation of
source or source code modification.</p>

<p>This isn&rsquo;t necessarily wrong to refer to a word based on backwards
compatibility, it&rsquo;s just important to understand the context in which the term
&ldquo;word&rdquo; is being used, and that there might be some confusion if you have a
background with x86 assembly, Windows API programming, or processor design.</p>

<p>So the next time someone asks: why does Intel&rsquo;s documentation commonly refer to
a &ldquo;word&rdquo; as 16b, you can tell them that the x86 and x86-64 ISAs have maintained
the notion of a word being 16b since the first x86 processor, the 8086, which
was a 16b processor.</p>

<p><em>Side Note: for an excellent historical perspective programming early x86
chips, I recommend Michael Abrash&rsquo;s</em>
<a href="http://www.gamedev.net/page/resources/_/technical/graphics-programming-and-theory/graphics-programming-black-book-r1698">Graphics Programming Black Book</a>.
<em>For instance he talks about 8086&rsquo;s little brother, the 8088, being a 16b chip
but only having an 8b bus with which to access memory. This caused a mysterious</em>
<a href="http://downloads.gamedev.net/pdf/gpbb/gpbb4.pdf">&ldquo;cycle eater&rdquo;</a>
<em>to prevent fast access to 16b variables, though they were the processor&rsquo;s
natural size.  Michael also alludes to alignment issues we&rsquo;ll see in a follow
up post.</em></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Intro to Debugging x86-64 Assembly]]></title>
    <link href="http://nickdesaulniers.github.io/blog/2016/01/20/debugging-x86-64-assembly-with-lldb-and-dtrace/"/>
    <updated>2016-01-20T20:04:00-08:00</updated>
    <id>http://nickdesaulniers.github.io/blog/2016/01/20/debugging-x86-64-assembly-with-lldb-and-dtrace</id>
    <content type="html"><![CDATA[<p>I&rsquo;m hacking on an assembly project, and wanted to document some of the tricks I
was using for figuring out what was going on.  This post might seem a little
basic for folks who spend all day heads down in gdb or who do this stuff
professionally, but I just wanted to share a quick intro to some tools that
others may find useful.
(<a href="https://pchiusano.github.io/2014-10-11/defensive-writing.html">oh god, I&rsquo;m doing it</a>)</p>

<p>If your coming from gdb to lldb, there&rsquo;s a few differences in commands.  LLDB
has
<a href="http://lldb.llvm.org/lldb-gdb.html">great documentation</a>
on some of the differences. Everything in this post about LLDB is pretty much
there.</p>

<p>The bread and butter commands when working with gdb or lldb are:</p>

<ul>
<li>r (run the program)</li>
<li>s (step in)</li>
<li>n (step over)</li>
<li>finish (step out)</li>
<li>c (continue)</li>
<li>q (quit the program)</li>
</ul>


<p>You can hit enter if you want to run the last command again, which is really
useful if you want to keep stepping over statements repeatedly.</p>

<p>I&rsquo;ve been using LLDB on OSX.  Let&rsquo;s say I want to debug a program I can build,
but is crashing or something:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>sudo lldb ./asmttpd web_root
</span></code></pre></td></tr></table></div></figure>


<p>Setting a breakpoint on jump to label:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="o">(</span>lldb<span class="o">)</span> b sys_write
</span><span class='line'>Breakpoint 3: <span class="nv">where</span> <span class="o">=</span> asmttpd<span class="sb">`</span>sys_write, <span class="nv">address</span> <span class="o">=</span> 0x00000000000029ae
</span></code></pre></td></tr></table></div></figure>


<p>Running the program until breakpoint hit:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="o">(</span>lldb<span class="o">)</span> r
</span><span class='line'>Process 32236 launched: <span class="s1">&#39;./asmttpd&#39;</span> <span class="o">(</span>x86_64<span class="o">)</span>
</span><span class='line'>Process 32236 stopped
</span><span class='line'>* thread <span class="c">#1: tid = 0xe69b9, 0x00000000000029ae asmttpd`sys_write, queue = &#39;com.apple.main-thread&#39;, stop reason = breakpoint 3.1</span>
</span><span class='line'>    frame <span class="c">#0: 0x00000000000029ae asmttpd`sys_write</span>
</span><span class='line'>asmttpd<span class="sb">`</span>sys_write:
</span><span class='line'>-&gt;  0x29ae &lt;+0&gt;: pushq  %rdi
</span><span class='line'>    0x29af &lt;+1&gt;: pushq  %rsi
</span><span class='line'>    0x29b0 &lt;+2&gt;: pushq  %rdx
</span><span class='line'>    0x29b1 &lt;+3&gt;: pushq  %r10
</span></code></pre></td></tr></table></div></figure>


<p>Seeing more of the current stack frame:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="o">(</span>lldb<span class="o">)</span> d
</span><span class='line'>asmttpd<span class="sb">`</span>sys_write:
</span><span class='line'>-&gt;  0x29ae &lt;+0&gt;:  pushq  %rdi
</span><span class='line'>    0x29af &lt;+1&gt;:  pushq  %rsi
</span><span class='line'>    0x29b0 &lt;+2&gt;:  pushq  %rdx
</span><span class='line'>    0x29b1 &lt;+3&gt;:  pushq  %r10
</span><span class='line'>    0x29b3 &lt;+5&gt;:  pushq  %r8
</span><span class='line'>    0x29b5 &lt;+7&gt;:  pushq  %r9
</span><span class='line'>    0x29b7 &lt;+9&gt;:  pushq  %rbx
</span><span class='line'>    0x29b8 &lt;+10&gt;: pushq  %rcx
</span><span class='line'>    0x29b9 &lt;+11&gt;: movq   %rsi, %rdx
</span><span class='line'>    0x29bc &lt;+14&gt;: movq   %rdi, %rsi
</span><span class='line'>    0x29bf &lt;+17&gt;: movq   <span class="nv">$0x1</span>, %rdi
</span><span class='line'>    0x29c6 &lt;+24&gt;: movq   <span class="nv">$0x2000004</span>, %rax
</span><span class='line'>    0x29cd &lt;+31&gt;: syscall
</span><span class='line'>    0x29cf &lt;+33&gt;: popq   %rcx
</span><span class='line'>    0x29d0 &lt;+34&gt;: popq   %rbx
</span><span class='line'>    0x29d1 &lt;+35&gt;: popq   %r9
</span><span class='line'>    0x29d3 &lt;+37&gt;: popq   %r8
</span><span class='line'>    0x29 &lt;+39&gt;: popq   %r10
</span><span class='line'>    0x29d7 &lt;+41&gt;: popq   %rdx
</span><span class='line'>    0x29d8 &lt;+42&gt;: popq   %rsi
</span><span class='line'>    0x29d9 &lt;+43&gt;: popq   %rdi
</span><span class='line'>    0x29da &lt;+44&gt;: retq
</span></code></pre></td></tr></table></div></figure>


<p>Getting a back trace (call stack):</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="o">(</span>lldb<span class="o">)</span> bt
</span><span class='line'>* thread <span class="c">#1: tid = 0xe69b9, 0x00000000000029ae asmttpd`sys_write, queue = &#39;com.apple.main-thread&#39;, stop reason = breakpoint 3.1</span>
</span><span class='line'>  * frame <span class="c">#0: 0x00000000000029ae asmttpd`sys_write</span>
</span><span class='line'>    frame <span class="c">#1: 0x00000000000021b6 asmttpd`print_line + 16</span>
</span><span class='line'>    frame <span class="c">#2: 0x0000000000002ab3 asmttpd`start + 35</span>
</span><span class='line'>    frame <span class="c">#3: 0x00007fff9900c5ad libdyld.dylib`start + 1</span>
</span><span class='line'>    frame <span class="c">#4: 0x00007fff9900c5ad libdyld.dylib`start + 1</span>
</span></code></pre></td></tr></table></div></figure>


<p>peeking at the upper stack frame:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="o">(</span>lldb<span class="o">)</span> up
</span><span class='line'>frame <span class="c">#1: 0x00000000000021b6 asmttpd`print_line + 16</span>
</span><span class='line'>asmttpd<span class="sb">`</span>print_line:
</span><span class='line'>    0x21b6 &lt;+16&gt;: movabsq <span class="nv">$0x30cb</span>, %rdi
</span><span class='line'>    0x21c0 &lt;+26&gt;: movq   <span class="nv">$0x1</span>, %rsi
</span><span class='line'>    0x21c7 &lt;+33&gt;: callq  0x29ae                    ; sys_write
</span><span class='line'>    0x21cc &lt;+38&gt;: popq   %rcx
</span></code></pre></td></tr></table></div></figure>


<p>back down to the breakpoint-halted stack frame:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="o">(</span>lldb<span class="o">)</span> down
</span><span class='line'>frame <span class="c">#0: 0x00000000000029ae asmttpd`sys_write</span>
</span><span class='line'>asmttpd<span class="sb">`</span>sys_write:
</span><span class='line'>-&gt;  0x29ae &lt;+0&gt;: pushq  %rdi
</span><span class='line'>    0x29af &lt;+1&gt;: pushq  %rsi
</span><span class='line'>    0x29b0 &lt;+2&gt;: pushq  %rdx
</span><span class='line'>    0x29b1 &lt;+3&gt;: pushq  %r10
</span></code></pre></td></tr></table></div></figure>


<p>dumping the values of registers:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="o">(</span>lldb<span class="o">)</span> register <span class="nb">read</span>
</span><span class='line'>General Purpose Registers:
</span><span class='line'>       <span class="nv">rax</span> <span class="o">=</span> 0x0000000000002a90  asmttpd<span class="sb">`</span>start
</span><span class='line'>       <span class="nv">rbx</span> <span class="o">=</span> 0x0000000000000000
</span><span class='line'>       <span class="nv">rcx</span> <span class="o">=</span> 0x00007fff5fbffaf8
</span><span class='line'>       <span class="nv">rdx</span> <span class="o">=</span> 0x00007fff5fbffa40
</span><span class='line'>       <span class="nv">rdi</span> <span class="o">=</span> 0x00000000000030cc  start_text
</span><span class='line'>       <span class="nv">rsi</span> <span class="o">=</span> 0x000000000000000f
</span><span class='line'>       <span class="nv">rbp</span> <span class="o">=</span> 0x00007fff5fbffa18
</span><span class='line'>       <span class="nv">rsp</span> <span class="o">=</span> 0x00007fff5fbff9b8
</span><span class='line'>        <span class="nv">r8</span> <span class="o">=</span> 0x0000000000000000
</span><span class='line'>        <span class="nv">r9</span> <span class="o">=</span> 0x00007fff7b1670c8  atexit_mutex + 24
</span><span class='line'>       <span class="nv">r10</span> <span class="o">=</span> 0x00000000ffffffff
</span><span class='line'>       <span class="nv">r11</span> <span class="o">=</span> 0xffffffff00000000
</span><span class='line'>       <span class="nv">r12</span> <span class="o">=</span> 0x0000000000000000
</span><span class='line'>       <span class="nv">r13</span> <span class="o">=</span> 0x0000000000000000
</span><span class='line'>       <span class="nv">r14</span> <span class="o">=</span> 0x0000000000000000
</span><span class='line'>       <span class="nv">r15</span> <span class="o">=</span> 0x0000000000000000
</span><span class='line'>       <span class="nv">rip</span> <span class="o">=</span> 0x00000000000029ae  asmttpd<span class="sb">`</span>sys_write
</span><span class='line'>    <span class="nv">rflags</span> <span class="o">=</span> 0x0000000000000246
</span><span class='line'>        <span class="nv">cs</span> <span class="o">=</span> 0x000000000000002b
</span><span class='line'>        <span class="nv">fs</span> <span class="o">=</span> 0x0000000000000000
</span><span class='line'>        <span class="nv">gs</span> <span class="o">=</span> 0x0000000000000000
</span></code></pre></td></tr></table></div></figure>


<p>read just one register:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="o">(</span>lldb<span class="o">)</span> register <span class="nb">read </span>rdi
</span><span class='line'>     <span class="nv">rdi</span> <span class="o">=</span> 0x00000000000030cc  start_text
</span></code></pre></td></tr></table></div></figure>


<p>When you&rsquo;re trying to figure out what system calls are made by some C code,
using dtruss is very helpful.  dtruss is available on OSX and seems to be some
kind of wrapper around DTrace.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>cat sleep.c
</span><span class='line'><span class="c">#include &lt;time.h&gt;</span>
</span><span class='line'>int main <span class="o">()</span> <span class="o">{</span>
</span><span class='line'>  struct timespec <span class="nv">rqtp</span> <span class="o">=</span> <span class="o">{</span>
</span><span class='line'>    2,
</span><span class='line'>    0
</span><span class='line'>  <span class="o">}</span>;
</span><span class='line'>
</span><span class='line'>  nanosleep<span class="o">(</span>&amp;rqtp, NULL<span class="o">)</span>;
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$ </span>clang sleep.c
</span><span class='line'>
</span><span class='line'><span class="nv">$ </span>sudo dtruss ./a.out
</span><span class='line'>...all kinds of fun stuff
</span><span class='line'>__semwait_signal<span class="o">(</span>0xB03, 0x0, 0x1<span class="o">)</span>    <span class="o">=</span> -1 Err#60
</span></code></pre></td></tr></table></div></figure>


<p>If you compile with <code>-g</code> to emit debug symbols, you can use lldb&rsquo;s disassemble
command to get the equivalent assembly:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>clang sleep.c -g
</span><span class='line'><span class="nv">$ </span>lldb a.out
</span><span class='line'><span class="o">(</span>lldb<span class="o">)</span> target create <span class="s2">&quot;a.out&quot;</span>
</span><span class='line'>Current executable <span class="nb">set </span>to <span class="s1">&#39;a.out&#39;</span> <span class="o">(</span>x86_64<span class="o">)</span>.
</span><span class='line'><span class="o">(</span>lldb<span class="o">)</span> b main
</span><span class='line'>Breakpoint 1: <span class="nv">where</span> <span class="o">=</span> a.out<span class="sb">`</span>main + 16 at sleep.c:3, <span class="nv">address</span> <span class="o">=</span> 0x0000000100000f40
</span><span class='line'><span class="o">(</span>lldb<span class="o">)</span> r
</span><span class='line'>Process 33213 launched: <span class="s1">&#39;/Users/Nicholas/code/assembly/asmttpd/a.out&#39;</span> <span class="o">(</span>x86_64<span class="o">)</span>
</span><span class='line'>Process 33213 stopped
</span><span class='line'>* thread <span class="c">#1: tid = 0xeca04, 0x0000000100000f40 a.out`main + 16 at sleep.c:3, queue = &#39;com.apple.main-thread&#39;, stop reason = breakpoint 1.1</span>
</span><span class='line'>    frame <span class="c">#0: 0x0000000100000f40 a.out`main + 16 at sleep.c:3</span>
</span><span class='line'>   1    <span class="c">#include &lt;time.h&gt;</span>
</span><span class='line'>   2    int main <span class="o">()</span> <span class="o">{</span>
</span><span class='line'>-&gt; 3      struct timespec <span class="nv">rqtp</span> <span class="o">=</span> <span class="o">{</span>
</span><span class='line'>   4        2,
</span><span class='line'>   5        0
</span><span class='line'>   6      <span class="o">}</span>;
</span><span class='line'>   7
</span><span class='line'><span class="o">(</span>lldb<span class="o">)</span> disassemble
</span><span class='line'>a.out<span class="sb">`</span>main:
</span><span class='line'>    0x100000f30 &lt;+0&gt;:  pushq  %rbp
</span><span class='line'>    0x100000f31 &lt;+1&gt;:  movq   %rsp, %rbp
</span><span class='line'>    0x100000f34 &lt;+4&gt;:  subq   <span class="nv">$0x20</span>, %rsp
</span><span class='line'>    0x100000f38 &lt;+8&gt;:  leaq   -0x10<span class="o">(</span>%rbp<span class="o">)</span>, %rdi
</span><span class='line'>    0x100000f3c &lt;+12&gt;: xorl   %eax, %eax
</span><span class='line'>    0x100000f3e &lt;+14&gt;: movl   %eax, %esi
</span><span class='line'>-&gt;  0x100000f40 &lt;+16&gt;: movq   0x49<span class="o">(</span>%rip<span class="o">)</span>, %rcx
</span><span class='line'>    0x100000f47 &lt;+23&gt;: movq   %rcx, -0x10<span class="o">(</span>%rbp<span class="o">)</span>
</span><span class='line'>    0x100000f4b &lt;+27&gt;: movq   0x46<span class="o">(</span>%rip<span class="o">)</span>, %rcx
</span><span class='line'>    0x100000f52 &lt;+34&gt;: movq   %rcx, -0x8<span class="o">(</span>%rbp<span class="o">)</span>
</span><span class='line'>    0x100000f56 &lt;+38&gt;: callq  0x100000f68               ; symbol stub <span class="k">for</span>: nanosleep
</span><span class='line'>    0x100000f5b &lt;+43&gt;: xorl   %edx, %edx
</span><span class='line'>    0x100000f5d &lt;+45&gt;: movl   %eax, -0x14<span class="o">(</span>%rbp<span class="o">)</span>
</span><span class='line'>    0x100000f60 &lt;+48&gt;: movl   %edx, %eax
</span><span class='line'>    0x100000f62 &lt;+50&gt;: addq   <span class="nv">$0x20</span>, %rsp
</span><span class='line'>    0x100000f66 &lt;+54&gt;: popq   %rbp
</span><span class='line'>    0x100000f67 &lt;+55&gt;: retq
</span></code></pre></td></tr></table></div></figure>


<p>Anyways, I&rsquo;ve been learning some interesting things about OSX that I&rsquo;ll be
sharing soon. If you&rsquo;d like to learn more about x86-64 assembly programming,
you should read my other posts about
<a href="http://nickdesaulniers.github.io/blog/2014/04/18/lets-write-some-x86-64/">writing x86-64</a>
and a toy
<a href="http://nickdesaulniers.github.io/blog/2015/05/25/interpreter-compiler-jit/">JIT for Brainfuck</a>
(<a href="https://www.reddit.com/r/programming/comments/377ov9/interpreter_compiler_jit/crkkrz4">the creator of Brainfuck liked it</a>).</p>

<p>I should also do a post on
<a href="http://rr-project.org/">Mozilla&rsquo;s rr</a>,
because it can do amazing things like step backwards.  Another day&hellip;</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[My SIGGRAPH 2015 Experience]]></title>
    <link href="http://nickdesaulniers.github.io/blog/2015/08/14/my-siggraph-2015-experience/"/>
    <updated>2015-08-14T10:10:00-07:00</updated>
    <id>http://nickdesaulniers.github.io/blog/2015/08/14/my-siggraph-2015-experience</id>
    <content type="html"><![CDATA[<p>I was recently lucky enough to get to attend my first SIGGRAPH conference this
year.  While I didn&rsquo;t attend any talks, I did spend some time in the expo. Here
is a collection of some of the neat things I saw at SIGGRAPH 2015.  Sorry it&rsquo;s
not more collected; I didn&rsquo;t have the intention of writing a blog post until
after folks kept asking me &ldquo;how was it?&rdquo;</p>

<h2>VR</h2>

<p>Most booths had demos on VR headsets.  Many were DK2&rsquo;s and GearVR&rsquo;s.  AMD and
NVIDIA had Crescent Bay&rsquo;s (next gen VR headset).  It was noticeably lighter than
the DK2, and I thought it rendered better quality.  It had nicer cable bundling,
and
headphones built in, that could fold up and lock out of the way that made it
nice to put on/take off.  I also tried a Sony Morpheus.  They had a very
engaging demo that was a tie in to the upcoming movie about tight rope walking,
&ldquo;The Walk&rdquo;.  They had a thin PVC pipe taped to the floor that you had to
balance on, and a fan, and you were tight rope walking between the Twin Towers.
Looking down and trying to balance was terrifying.  There were some demos with
a strange mobile VR setup where folks had a backpack on that had an open laptop
hanging off the back and could walk around.  Toyota and Ford had demos where you
could inspect their vehicles in virtual space.  I did not see a single HTC/Valve
Vive at SIGGRAPH.</p>

<p><img class="center" src="http://nickdesaulniers.github.io/images/siggraph/s8.jpg">
<img class="center" src="http://nickdesaulniers.github.io/images/siggraph/s1.jpg">
<img class="center" src="http://nickdesaulniers.github.io/images/siggraph/s3.jpg">
<img class="center" src="http://nickdesaulniers.github.io/images/siggraph/s2.jpg">
<img class="center" src="http://nickdesaulniers.github.io/images/siggraph/s4.jpg"></p>

<h2>AR</h2>

<p>Epson had some AR glasses. They were very glasses friendly, unlike most VR
headsets.  The nose piece was flexible, and if you flattened it out, the headset
could rest on top of your glasses and worked well.  The headset had some very
thick compound lenses.  There was a front facing camera and they had a simple
demo using image recognition of simple logos (like QR codes) that helped provide
position data.  There were other demos with orientation tracking that worked
well.  They didn&rsquo;t have positional sensor info, but had some hack that tried to
estimate positional velocity off the angular momentum (I spoke with the
programmer who implemented it).  <a href="https://moverio.epson.biz/">https://moverio.epson.biz/</a></p>

<h2>Holograms</h2>

<p>There was a demo of holograms using tilted pieces of plastic arranged in a box.
Also, there was a multiple (200+) projector array that projected a scene onto a
special screen.  When walking around the screen, the viewing angle always seemed
correct.  It was very convincing, except for the jarring restart of the animated
loop which could be smoothed out (think looping/seamless gifs).</p>

<p><img class="center" src="http://nickdesaulniers.github.io/images/siggraph/s5.jpg"></p>

<h2>VR/3D video</h2>

<p>Google cardboard had a booth showing off 3D videos from youtube.  I had a hard
time telling if the video were stereoscopic or monoptic since the demo videos
only had things in the distance so it was hard to tell if parallax was
implemented correctly.  A bunch of booths were showing off 3D video, but as far
as I could tell, all of the correctly rendered stereoscopic shots were computer
rendered.  I could not find a single instance with footage shot from a
stereoscopic rig, though I tried.</p>

<h2>Booths/Expo</h2>

<p>NVIDIA and Intel had the largest booths, followed by Pixar&rsquo;s Renderman.  Felt
like a GDC event, smaller, but definitely larger than GDC next.  More focus on
shiny photorealism demos, artistic tools, less on game engines themselves.</p>

<h2>Vulcan/OpenGL ES 3.2</h2>

<p>Intel had demos of Vulcan and OpenGL ES 3.2.  For 3.2 they were showing off
tessellation shaders, I think.  For the Vulcan demo, they had a cool demo showing
how with
a particle demo scene rendered with OpenGL 4, a single CPU was pegged, it was
using a lot of power, and had pretty abysmal framerate.  When rendering the same
scene with Vulcan, they were able to more evenly distribute the workload across
CPUs, achieve higher framerate, while using less power.  The API to Vulcan is
<em>still</em> not published, so no source code is available. It was explained to me
that Vulcan is still not thread safe; instead you get the freedom to implement
synchronization rather than the driver.</p>

<h2>Planetarium</h2>

<p>There was a neat demo of a planetarium projector being repurposed to display
an &ldquo;on rails&rdquo; demo of a virtual scene.  You didn&rsquo;t get parallax since it was
being projected on a hemisphere, but it was neat in that like IMAX your entire
FOV was encompassed, but you could move your head, not see any pixels, and
didn&rsquo;t experience any motion sickness or disorientation.</p>

<p><img class="center" src="http://nickdesaulniers.github.io/images/siggraph/s7.jpg"></p>

<h2>X3D/X3DOM</h2>

<p>I spoke with some folks at the X3D booth about X3DOM.  To me, it seems like a
bunch of previous attempts have kind of added on too much complexity in an
effort to support every use case under the sun, rather than just accept
limitations, so much so that getting started writing hello world became
difficult.  Some of the folks I spoke to at the booth echoed this sentiment, but
also noted the lack of authoring tools as things that hurt adoption.  I have
some neat things I&rsquo;m working on in this space, based on this and other prior
works, that I plan on showing off at the upcoming BrazilJS.</p>

<h2>Maker Faire</h2>

<p>There was a cool maker faire, some things I&rsquo;ll have to order for family members
(young hackers in training) were <a href="http://cannybots.com/">Canny bots</a>,
<a href="http://ebeeproject.net/">eBee</a> and <a href="http://www.withpiper.com/">Piper</a>.</p>

<p><img class="center" src="http://nickdesaulniers.github.io/images/siggraph/s6.jpg"></p>

<h2>Experimental tech</h2>

<p>Bunch of neat input devices, one I liked used directional sound as tactile
feedback.  One demo was rearranging icons on a home screen.  Rather than touch
the screen, there was a field of tiny speakers that would blast your finger with
sound when it entered to simulate the feeling of vibration. It would vibrate
to let you know you had &ldquo;grabbed&rdquo; and icon, and then drag it.</p>

<h2>Book Signing</h2>

<p>This was the first time I got to see my book printed in physical form!  It
looked gorgeous, hardcover printed in color.  I met about half of the fellow
authors who were also at SIGGRAPH, and our editor.  I even got to meet Eric
Haines, who reviewed my chapter before publication!</p>

<p><img class="center" src="http://nickdesaulniers.github.io/images/siggraph/s9.jpg">
<img class="center" src="http://nickdesaulniers.github.io/images/siggraph/s10.jpg">
<img class="center" src="http://nickdesaulniers.github.io/images/siggraph/s11.jpg"></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Additional C/C++ Tooling]]></title>
    <link href="http://nickdesaulniers.github.io/blog/2015/07/23/additional-c-slash-c-plus-plus-tooling/"/>
    <updated>2015-07-23T21:10:00-07:00</updated>
    <id>http://nickdesaulniers.github.io/blog/2015/07/23/additional-c-slash-c-plus-plus-tooling</id>
    <content type="html"><![CDATA[<p><a href="http://shop.oreilly.com/product/0636920025108.do">21st Century C by Ben Klemens</a>
was a great read. It had a section with an
intro to autotools, git, and gdb.
There are a few other useful tools that came to mind that I&rsquo;ve used when
working with C and C++ codebases. These tools are a great way to start
contributing to
<a href="https://github.com/nickdesaulniers/What-Open-Source-Means-To-Me#what-open-source-means-to-me">Open Source</a>
C &amp; C++ codebases; running these tools on
the code or adding them to the codebases.  A lot of these favor command line,
open source utilities. See how many you are familiar with!</p>

<h2>Build Tools</h2>

<h3>CMake</h3>

<p>The first tool I&rsquo;d like to take a look at is
<a href="http://www.cmake.org/overview/">CMake</a>.  CMake is yet another build tool; I
realize how contentious it is to even discuss one of the many.  From my
experience working with
<a href="https://kripken.github.io/emscripten-site/docs/introducing_emscripten/about_emscripten.html">Emscripten</a>,
we recommend the use of CMake for people
writing portable C/C++ programs.  CMake is able to emit Makefiles for unixes,
project files for Xcode on OSX, and project files for Visual Studio on Windows.
There are also a few other &ldquo;generators&rdquo; that you can use.</p>

<p>I&rsquo;ve been really impressed with CMake&rsquo;s modules for
<a href="http://www.cmake.org/cmake/help/v3.0/command/find_package.html">finding dependencies</a>
and
<a href="http://www.cmake.org/cmake/help/v3.0/module/ExternalProject.html">another for fetching and building external dependencies</a>.
I think
<a href="https://www.youtube.com/watch?v=nshzjMDD79w">C++ needs a package manager badly</a>,
and I think CMake would be a solid foundation for one.</p>

<p>The syntax isn&rsquo;t the greatest, but when I wanted to try to build one of my C++
projects on Windows which I know nothing about developing on, I was able to
install CMake and Visual Studio and get my project building.  If you can build
your code on one platform, it will usually build on the others.</p>

<p>If you&rsquo;re not worried about writing cross platform C/C++, maybe CMake is not
worth the effort, but I find it useful.  I wrestle with the syntax sometimes,
but documentation is not bad and it&rsquo;s something you deal with early on in the
development of a project and hopefully never have to touch again (how I wish
that were true).</p>

<h2>Code Formatters</h2>

<h3>ClangFormat</h3>

<p>Another contentious point of concern amongst developers is code style.
<a href="http://google-styleguide.googlecode.com/svn/trunk/cppguide.html">Big companies</a>
with lots of C++ code have
<a href="https://developer.mozilla.org/en-US/docs/Mozilla/Developer_guide/Coding_Style#CC_practices">documents</a>
explaining their stylistic choices.  Don&rsquo;t waste another hour of your life
arguing about something that really doesn&rsquo;t matter.
<a href="http://clang.llvm.org/docs/ClangFormat.html">ClangFormat</a> will help you
codify your style and format your code for you to match the style.  Simply
write the code however you want, and run the formatter on it before commiting
it.</p>

<p>It can also emit a .clang-format file that you can commit and clang-format will automatically look for that file and use the rules codified there.</p>

<h2>Linters</h2>

<h3>Flint / Flint++</h3>

<p><a href="https://github.com/facebook/flint">Flint</a> is a C++ linter in use at Facebook.
Since it moved from being
implemented in C++ to D, I&rsquo;ve had issues building it.  I&rsquo;ve had better luck
with a fork that&rsquo;s pure C++ without any of the third party dependencies Flint
originally had, called
<a href="https://github.com/L2Program/FlintPlusPlus">Flint++</a>.  While not quite full-on
static analyzers, both can be used for finding potential issues in your code
ahead of time. Linters can look at individual files in isolation; you don&rsquo;t
have to wait for long recompiles like you would with a static analyzer.</p>

<h2>Static Analyzers</h2>

<h3>Scan-build</h3>

<p><a href="http://clang-analyzer.llvm.org/scan-build.html">Scan-build</a> is a static
analyzer for C and C++ code.  You build your code &ldquo;through&rdquo; it, then use the
sibling tool scan-view to see the results.  Scan-view will emit and open an
html file that shows a list of the errors it detected.  It will insert
hyperlinks into the resulting document that step you through how certain
conditions could lead to a null pointer dereference, for example.  You can also
save and share those html files with others in the project. Static analyzers
will help you catch bugs at compile time before you run the code.</p>

<h2>Runtime Sanitizers</h2>

<h3>ASan and UBSan</h3>

<p>Clang&rsquo;s Address (ASan) and Undefined Behavior (UBSan) sanitizers are simply
compiler flags that can be used to detect errors at runtime.  ASan and UBSan
two of the more popular tools, but there are actually a ton and more being
implemented.  See the list
<a href="http://clang.llvm.org/docs/UsersManual.html#controlling-code-generation">here</a>.
These sanitizers will catch bugs at runtime, so you&rsquo;ll have to run the code
to notice any violations, at variable runtime performance costs per sanitizer.
ASan and TSan (Thread Sanitizer) made it into gcc4.8 and UBSan is in gcc4.9.</p>

<h2>Header Analysis</h2>

<h3>Include What You Use</h3>

<p><a href="https://github.com/include-what-you-use/include-what-you-use">Include What You Use</a>
(IWYU) helps you find unused or unnecessary <code>#include</code> preprocessor directives.
It should be obvious how this can help improve compile times. IWYU can also
help cut down on recompiles by recommending forward declarations under certain
conditions.
I look forward to the C++ module proposal being adopted, but until then this
tool can help you spot cruft that can be removed.</p>

<h2>Rapid Recompiles</h2>

<h3>ccache</h3>

<p><a href="https://ccache.samba.org/">ccache</a> greatly improves recompile times by caching
the results of parts of the compilation process.
<a href="https://github.com/nickdesaulniers/dotfiles/blob/49984b3e82022e5ce82e778fc8ce990f8e1e554a/.mozconfig#L1">I use when building Firefox</a>,
and it saves a great deal of time.</p>

<h3>distcc</h3>

<p><a href="https://github.com/distcc/distcc">distcc</a> is a distributed build system.
<a href="http://blog.dholbert.org/">Some folks at Mozilla</a> speed up their Firefox builds with it.</p>

<h2>Memory Leak Detectors</h2>

<h3>Valgrind</h3>

<p><a href="http://valgrind.org/info/about.html">Valgrind</a> has a
<a href="http://valgrind.org/info/about.html">suite of tools</a>, my
favorite being memcheck for finding memory leaks. Unfortunately, it doesn&rsquo;t
seem to work on OSX since 10.10.
<a href="https://code.google.com/p/address-sanitizer/wiki/ComparisonOfMemoryTools">This page</a>
referring to ASan seems to indicate that it can do everything Valgrind&rsquo;s
Memcheck can, at less of a runtime performance cost, but I&rsquo;m not sure how true
this is exactly.</p>

<h3>leaks</h3>

<p>A much more primitive tool for finding leaks from the command line, BSD&rsquo;s have
<code>leaks</code>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">MallocStackLogging</span><span class="o">=</span>1 ./a.out
</span><span class='line'>leaks a.out
</span><span class='line'>...
</span></code></pre></td></tr></table></div></figure>


<h2>Profilers</h2>

<h3>Perf</h3>

<p>Perf, and
<a href="http://www.brendangregg.com/flamegraphs.html">Brendan Gregg&rsquo;s tools for emitting SVG flamegraphs</a>
from the output
are helpful for finding where time is spent in a program. In fact, there are
numerous perfomance analysis tools that are Linux specific.  My recommendation
is spend some time on <a href="http://www.brendangregg.com/linuxperf.html">Brendan Gregg&rsquo;s blog</a>.</p>

<h3>DTrace</h3>

<p>OSX doesn&rsquo;t have the same tooling as Linux, but DTrace was ported to it.  I&rsquo;ve
used it to find sampling profiles of my code before. Again,
<a href="http://www.brendangregg.com/dtrace.html">Brendan Gregg&rsquo;s blog</a> is a good
resource; there are some fantastic DTrace one liners.</p>

<h2>Debuggers</h2>

<h3>lldb</h3>

<p>lldb is analogous to gdb.  I can&rsquo;t say I have enough experience with LLDB and GDB to note the difference between the two, but LLDB did show the relative statements forward and back from the current statement by default.  I&rsquo;m informed by my friends/mortal enemies using emacs that this is less of an issue when using emacs/gdb in combination.</p>

<h2>Fuzzers</h2>

<h3>American Fuzzy Lop</h3>

<p><a href="http://lcamtuf.coredump.cx/afl/">American Fuzzy Lop</a> (AFL) is a neat program
that performs fuzzing on programs
that take inputs from files and repeatedly runs the program, modifies the
input trying to get full code coverage, and tries to find crashes.  It&rsquo;s been
getting lots of attention lately, and while I haven&rsquo;t used it myself yet, it
seems like a very powerful tool. Mozilla employs the use of fuzzers on their
JavaScript engine, for instance (not AFL, but
<a href="http://www.squarefree.com/2007/08/02/introducing-jsfunfuzz/">one developed in house</a>).</p>

<h2>Disassemblers</h2>

<h3>gobjdump</h3>

<p>If you really need to make sure the higher level code you&rsquo;re writing is getting
translated into the assembly your expecting, <code>gobjdump -S</code> will intermix the
emitted binary&rsquo;s disassembled assembly and the source code.  This was used
extensively while developing <a href="http://nickdesaulniers.github.io/blog/2015/05/25/interpreter-compiler-jit/">my Brainfuck JIT</a>.</p>

<h2>Conclusion</h2>

<p>Hopefully you learned of some useful tools that you should know about when
working with C or C++.  What did I miss?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Interpreter, Compiler, JIT]]></title>
    <link href="http://nickdesaulniers.github.io/blog/2015/05/25/interpreter-compiler-jit/"/>
    <updated>2015-05-25T08:35:00-07:00</updated>
    <id>http://nickdesaulniers.github.io/blog/2015/05/25/interpreter-compiler-jit</id>
    <content type="html"><![CDATA[<p>Interpreters and compilers are interesting programs, themselves used to run or
translate other programs, respectively.  Those other programs that might be
interpreted might be languages like JavaScript, Ruby, Python, PHP, and Perl.  The
other programs that might be compiled are C, C++, and to some extent Java and
C#.</p>

<p>Taking the time to do translation to native machine code ahead of
time can result in better performance at runtime, but an interpreter can get to work right away without spending any time translating.  There happens to be a sweet spot
somewhere in between interpretation and compilation that combines the best of
both worlds.  Such a technique
is called Just In Time (JIT) compiling.  While interpreting, compiling, and JIT&#8217;ing code might sound radically different, they&rsquo;re actually strikingly similar.  In
this post, I hope to show how similar by comparing the code for an interpreter,
a compiler, and a JIT compiler for the language Brainfuck in around 100 lines
of C code each.</p>

<p>All of the code in the post is up on <a href="https://github.com/nickdesaulniers/bf_interpreter_jit_compiler">GitHub</a>.</p>

<div class="embed-video-container"><iframe src="http://nickdesaulniers.github.io//www.youtube.com/embed/_C5AHaS1mOA" allowfullscreen></iframe></div>


<p>Brainfuck is an interesting, if hard to read, language.  It only has eight
operations it can perform <code>&gt; &lt; + - . , [ ]</code>, yet is Turing complete.  There&rsquo;s nothing really to
lex; each character is a token, and if the token is not one of the eight
operators, it&rsquo;s ignored.  There&rsquo;s also not much of a grammar to parse; the
forward jumping and backwards jumping operators should be matched for well
formed input, but that&rsquo;s about it.  In this post, we&rsquo;ll skip over validating
input assuming well formed input so we can focus on the interpretation/code
generation.  You can read more about it on the
<a href="http://en.wikipedia.org/wiki/Brainfuck">Wikipedia page</a>,
which we&rsquo;ll be using as a reference throughout.</p>

<p>A Brainfuck program operates on a 30,000 element byte array initialized to all
zeros.  It starts off with an instruction pointer, that initially points to the
first element in the data array or &ldquo;tape.&rdquo;  In C code for an interpreter that
might look like:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="c1">// Initialize the tape with 30,000 zeroes.</span>
</span><span class='line'><span class="kt">unsigned</span> <span class="kt">char</span> <span class="n">tape</span> <span class="p">[</span><span class="mi">30000</span><span class="p">]</span> <span class="o">=</span> <span class="p">{</span> <span class="mi">0</span> <span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Set the pointer to point at the left most cell of the tape.</span>
</span><span class='line'><span class="kt">unsigned</span> <span class="kt">char</span><span class="o">*</span> <span class="n">ptr</span> <span class="o">=</span> <span class="n">tape</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Then, since we&rsquo;re performing an operation for each character in the Brainfuck
source, we can have a for loop over every character with a nested switch
statement containing case statements for each operator.</p>

<p>The first two operators, <code>&gt;</code> and <code>&lt;</code> increment and decrement the data pointer.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="k">case</span> <span class="sc">&#39;&gt;&#39;</span>: <span class="o">++</span><span class="n">ptr</span><span class="p">;</span> <span class="k">break</span><span class="p">;</span>
</span><span class='line'><span class="k">case</span> <span class="sc">&#39;&lt;&#39;</span>: <span class="o">--</span><span class="n">ptr</span><span class="p">;</span> <span class="k">break</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>One thing that could be bad is that because the interpreter is written in C and
we&rsquo;re representing the tape as an array but we&rsquo;re not validating our inputs,
there&rsquo;s potential for stack buffer overrun since we&rsquo;re not performing bounds
checks.  Again, punting and assuming well formed input to keep the code and the
point more precise.</p>

<p>Next up are the <code>+</code> and <code>-</code> operators, used for incrementing and decrementing
the cell pointed to by the data pointer by one.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="k">case</span> <span class="sc">&#39;+&#39;</span>: <span class="o">++</span><span class="p">(</span><span class="o">*</span><span class="n">ptr</span><span class="p">);</span> <span class="k">break</span><span class="p">;</span>
</span><span class='line'><span class="k">case</span> <span class="sc">&#39;-&#39;</span>: <span class="o">--</span><span class="p">(</span><span class="o">*</span><span class="n">ptr</span><span class="p">);</span> <span class="k">break</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>The operators <code>.</code> and <code>,</code> provide Brainfuck&rsquo;s only means of input or output, by
writing the value pointed to by the instruction pointer to stdout as an ASCII
value, or reading one byte from stdin as an ASCII value and writing it to the
cell pointed to by the instruction pointer.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="k">case</span> <span class="sc">&#39;.&#39;</span>: <span class="n">putchar</span><span class="p">(</span><span class="o">*</span><span class="n">ptr</span><span class="p">);</span> <span class="k">break</span><span class="p">;</span>
</span><span class='line'><span class="k">case</span> <span class="sc">&#39;,&#39;</span>: <span class="o">*</span><span class="n">ptr</span> <span class="o">=</span> <span class="n">getchar</span><span class="p">();</span> <span class="k">break</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Finally, our looping constructs, <code>[</code> and <code>]</code>.  From the definition on Wikipedia
for <code>[</code>: <code>if the byte at the data pointer is zero, then instead of moving the
instruction pointer forward to the next command, jump it forward to the command
after the matching ] command</code> and for <code>]</code>: <code>if the byte at the data pointer is
nonzero, then instead of moving the instruction pointer forward to the next
command, jump it back to the command after the matching [ command.</code></p>

<p>I interpret that as:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="k">case</span> <span class="sc">&#39;[&#39;</span>:
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="p">(</span><span class="o">*</span><span class="n">ptr</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">loop</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>    <span class="k">while</span> <span class="p">(</span><span class="n">loop</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="kt">unsigned</span> <span class="kt">char</span> <span class="n">current_char</span> <span class="o">=</span> <span class="n">input</span><span class="p">[</span><span class="o">++</span><span class="n">i</span><span class="p">];</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="n">current_char</span> <span class="o">==</span> <span class="sc">&#39;]&#39;</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="o">--</span><span class="n">loop</span><span class="p">;</span>
</span><span class='line'>      <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="n">current_char</span> <span class="o">==</span> <span class="sc">&#39;[&#39;</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="o">++</span><span class="n">loop</span><span class="p">;</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">break</span><span class="p">;</span>
</span><span class='line'><span class="k">case</span> <span class="sc">&#39;]&#39;</span>:
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="o">*</span><span class="n">ptr</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">loop</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>    <span class="k">while</span> <span class="p">(</span><span class="n">loop</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="kt">unsigned</span> <span class="kt">char</span> <span class="n">current_char</span> <span class="o">=</span> <span class="n">input</span><span class="p">[</span><span class="o">--</span><span class="n">i</span><span class="p">];</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="n">current_char</span> <span class="o">==</span> <span class="sc">&#39;[&#39;</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="o">--</span><span class="n">loop</span><span class="p">;</span>
</span><span class='line'>      <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="n">current_char</span> <span class="o">==</span> <span class="sc">&#39;]&#39;</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="o">++</span><span class="n">loop</span><span class="p">;</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">break</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Where the variable <code>loop</code> keeps track of open brackets for which we&rsquo;ve not seen
a matching close bracket, aka our nested depth.</p>

<p>So <a href="https://github.com/nickdesaulniers/bf_interpreter_jit_compiler/blob/master/interpreter.c">we can see the interpreter is quite basic</a>, in around 50 SLOC were able to
read a byte, and immediately perform an action based on the operator.  How we
perform that operation might not be the fastest though.</p>

<p>How about if we want to compile the Brainfuck source code to native machine
code?  Well, we need to know a little bit about our host machine&rsquo;s Instruction
Set Architecture (ISA) and Application Binary Interface (ABI).  The rest of the
code in this post will not be as portable as the above C code, since it assumes
an x86-64 ISA and UNIX ABI.  Now would be a good time to <a href="http://nickdesaulniers.github.io/blog/2014/04/18/lets-write-some-x86-64/">take a detour and learn more about writing assembly for x86-64</a>.  The interpreter is even portable enough to <a href="https://github.com/nickdesaulniers/bf_interpreter_jit_compiler#emscripten">build with Emscripten and run in a browser</a>!</p>

<p>For our compiler, we&rsquo;ll iterate over every character in the source file again,
switching on the recognized operator.  This time, instead of performing an
action right away, we&rsquo;ll print assembly instructions to stdout.  Doing so
requires running the compiler on an input file, redirecting stdout to a file,
then running the system assembler and linker on that file.  We&rsquo;ll stick with
just compiling and not assembling (though it&rsquo;s not too difficult), and linking
(for now).</p>

<p>First, we need to print a prologue for our compiled code:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="k">const</span> <span class="kt">char</span><span class="o">*</span> <span class="k">const</span> <span class="n">prologue</span> <span class="o">=</span>
</span><span class='line'>  <span class="s">&quot;.text</span><span class="se">\n</span><span class="s">&quot;</span>
</span><span class='line'>  <span class="s">&quot;.globl _main</span><span class="se">\n</span><span class="s">&quot;</span>
</span><span class='line'>  <span class="s">&quot;_main:</span><span class="se">\n</span><span class="s">&quot;</span>
</span><span class='line'>  <span class="s">&quot;  pushq %rbp</span><span class="se">\n</span><span class="s">&quot;</span>
</span><span class='line'>  <span class="s">&quot;  movq %rsp, %rbp</span><span class="se">\n</span><span class="s">&quot;</span>
</span><span class='line'>  <span class="s">&quot;  pushq %r12</span><span class="se">\n</span><span class="s">&quot;</span>        <span class="c1">// store callee saved register</span>
</span><span class='line'>  <span class="s">&quot;  subq $30008, %rsp</span><span class="se">\n</span><span class="s">&quot;</span> <span class="c1">// allocate 30,008 B on stack, and realign</span>
</span><span class='line'>  <span class="s">&quot;  leaq (%rsp), %rdi</span><span class="se">\n</span><span class="s">&quot;</span> <span class="c1">// address of beginning of tape</span>
</span><span class='line'>  <span class="s">&quot;  movl $0, %esi</span><span class="se">\n</span><span class="s">&quot;</span>     <span class="c1">// fill with 0&#39;s</span>
</span><span class='line'>  <span class="s">&quot;  movq $30000, %rdx</span><span class="se">\n</span><span class="s">&quot;</span> <span class="c1">// length 30,000 B</span>
</span><span class='line'>  <span class="s">&quot;  call _memset</span><span class="se">\n</span><span class="s">&quot;</span>      <span class="c1">// memset</span>
</span><span class='line'>  <span class="s">&quot;  movq %rsp, %r12&quot;</span><span class="p">;</span>
</span><span class='line'><span class="n">puts</span><span class="p">(</span><span class="n">prologue</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>During the linking phase, we&rsquo;ll make sure to link in libc so we can call
memset.  What we&rsquo;re doing is backing up callee saved registers we&rsquo;ll be using,
stack allocating the tape, realigning the stack (<a href="http://nickdesaulniers.github.io/blog/2014/04/18/lets-write-some-x86-64/">x86-64 ABI point #1</a>), copying
the address of the only item on the stack into a register for our first
argument, setting the second argument to the constant <code>0</code>, the third arg to
<code>30000</code>, then calling memset.  Finally, we use the callee saved register %r12
as our instruction pointer, which is the address into a value on the stack.</p>

<p>We
can expect the call to memset to result in a segfault if simply subtract just
30000B, and not realign for the 2 registers (64 b each, 8 B each) we pushed on
the stack.  The first pushed register aligns the stack on a 16 B boundary, the
second misaligns it; that&rsquo;s why we allocate an additional 8 B on the stack
(<a href="http://nickdesaulniers.github.io/blog/2014/04/18/lets-write-some-x86-64/">x86-64 ABI point #1</a>).  The stack is mis-aligned upon function entry in x86-64.
30000 is a multiple of 16.</p>

<p><img class="center" src="http://nickdesaulniers.github.io/images/compiler_stack_alignment.png"></p>

<p>Moving the instruction pointer (<code>&gt;</code>, <code>&lt;</code>) and modifying the pointed to value
(<code>+</code>, <code>-</code>) are straight-forward:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="k">case</span> <span class="sc">&#39;&gt;&#39;</span>:
</span><span class='line'>  <span class="n">puts</span><span class="p">(</span><span class="s">&quot;  inc %r12&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="k">break</span><span class="p">;</span>
</span><span class='line'><span class="k">case</span> <span class="sc">&#39;&lt;&#39;</span>:
</span><span class='line'>  <span class="n">puts</span><span class="p">(</span><span class="s">&quot;  dec %r12&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="k">break</span><span class="p">;</span>
</span><span class='line'><span class="k">case</span> <span class="sc">&#39;+&#39;</span>:
</span><span class='line'>  <span class="n">puts</span><span class="p">(</span><span class="s">&quot;  incb (%r12)&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="k">break</span><span class="p">;</span>
</span><span class='line'><span class="k">case</span> <span class="sc">&#39;-&#39;</span>:
</span><span class='line'>  <span class="n">puts</span><span class="p">(</span><span class="s">&quot;  decb (%r12)&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="k">break</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>For output, <code>.</code>, we need to copy the pointed to byte into the register for the
first argument to putchar.  We
explicitly zero out the register before calling putchar, since it takes an int
(32 b), but we&rsquo;re only copying a char (8 b) (Look up C&rsquo;s type promotion rules for more info).  x86-64 has an instruction that does both, movzXX, Where the first X is the source size (b, w) and the second is the destination size (w, l, q).  Thus movzbl moves a <strong>b</strong>yte (8 b) into a doub<strong>l</strong>e word (32 b).  %rdi and %edi are the same register, but %rdi is the full
64 b register, while %edi is the lowest (or least significant) 32 b.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="k">case</span> <span class="sc">&#39;.&#39;</span>:
</span><span class='line'>  <span class="c1">// move byte to double word and zero upper bits since putchar takes an</span>
</span><span class='line'>  <span class="c1">// int.</span>
</span><span class='line'>  <span class="n">puts</span><span class="p">(</span><span class="s">&quot;  movzbl (%r12), %edi&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="n">puts</span><span class="p">(</span><span class="s">&quot;  call _putchar&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="k">break</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Input (<code>,</code>) is easy; call getchar, move the resulting lowest byte into the cell
pointed to by the instruction pointer.  %al is the lowest 8 b of the 64 b %rax register.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="k">case</span> <span class="sc">&#39;,&#39;</span>:
</span><span class='line'>  <span class="n">puts</span><span class="p">(</span><span class="s">&quot;  call _getchar&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="n">puts</span><span class="p">(</span><span class="s">&quot;  movb %al, (%r12)&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="k">break</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>As usual, the looping constructs (<code>[</code> &amp; <code>]</code>) are much more work.  We have to
match up jumps to matching labels, but for an assembly program, labels must be
unique.  One way we can solve for this is whenever we encounter an opening
brace, push a monotonically increasing number that represents the numbers of
opening brackets we&rsquo;ve seen so far onto a stack like data structure.  Then, we
do our comparison and jump to what will be the label that should be produced by
the matching close label.  Next, we insert our starting label, and finally
increment the number of brackets seen.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="k">case</span> <span class="sc">&#39;[&#39;</span>:
</span><span class='line'>  <span class="n">stack_push</span><span class="p">(</span><span class="o">&amp;</span><span class="n">stack</span><span class="p">,</span> <span class="n">num_brackets</span><span class="p">);</span>
</span><span class='line'>  <span class="n">puts</span><span class="p">(</span><span class="s">&quot;  cmpb $0, (%r12)&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="n">printf</span><span class="p">(</span><span class="s">&quot;  je bracket_%d_end</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">num_brackets</span><span class="p">);</span>
</span><span class='line'>  <span class="n">printf</span><span class="p">(</span><span class="s">&quot;bracket_%d_start:</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">num_brackets</span><span class="o">++</span><span class="p">);</span>
</span><span class='line'>  <span class="k">break</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>For close brackets, we pop the number of brackets seen (or rather, number of
pending open brackets which we have yet to see a matching close bracket) off of
the stack, do our comparison, jump to the matching start label, and finally
place our end label.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="k">case</span> <span class="sc">&#39;]&#39;</span>:
</span><span class='line'>  <span class="n">stack_pop</span><span class="p">(</span><span class="o">&amp;</span><span class="n">stack</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">matching_bracket</span><span class="p">);</span>
</span><span class='line'>  <span class="n">puts</span><span class="p">(</span><span class="s">&quot;  cmpb $0, (%r12)&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="n">printf</span><span class="p">(</span><span class="s">&quot;  jne bracket_%d_start</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">matching_bracket</span><span class="p">);</span>
</span><span class='line'>  <span class="n">printf</span><span class="p">(</span><span class="s">&quot;bracket_%d_end:</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">matching_bracket</span><span class="p">);</span>
</span><span class='line'>  <span class="k">break</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>So for sequential loops (<code>[][]</code>) we can expect the relevant assembly to look
like:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='gas'><span class='line'>  <span class="nf">cmpb</span> <span class="no">$0</span><span class="p">,</span> <span class="p">(</span><span class="nv">%r12</span><span class="p">)</span>
</span><span class='line'>  <span class="nf">je</span> <span class="no">bracket_0_end</span>
</span><span class='line'><span class="nl">bracket_0_start:</span>
</span><span class='line'>
</span><span class='line'>  <span class="nf">cmpb</span> <span class="no">$0</span><span class="p">,</span> <span class="p">(</span><span class="nv">%r12</span><span class="p">)</span>
</span><span class='line'>  <span class="nf">jne</span> <span class="no">bracket_0_start</span>
</span><span class='line'><span class="nl">bracket_0_end:</span>
</span><span class='line'>
</span><span class='line'>  <span class="nf">cmpb</span> <span class="no">$0</span><span class="p">,</span> <span class="p">(</span><span class="nv">%r12</span><span class="p">)</span>
</span><span class='line'>  <span class="nf">je</span> <span class="no">bracket_1_end</span>
</span><span class='line'><span class="nl">bracket_1_start:</span>
</span><span class='line'>
</span><span class='line'>  <span class="nf">cmpb</span> <span class="no">$0</span><span class="p">,</span> <span class="p">(</span><span class="nv">%r12</span><span class="p">)</span>
</span><span class='line'>  <span class="nf">jne</span> <span class="no">bracket_1_start</span>
</span><span class='line'><span class="nl">bracket_1_end:</span>
</span></code></pre></td></tr></table></div></figure>


<p>and for nested loops (<code>[[]]</code>), we can expect assembly like the following (note
the difference in the order of numbered start and end labels):</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='gas'><span class='line'>  <span class="nf">cmpb</span> <span class="no">$0</span><span class="p">,</span> <span class="p">(</span><span class="nv">%r12</span><span class="p">)</span>
</span><span class='line'>  <span class="nf">je</span> <span class="no">bracket_0_end</span>
</span><span class='line'><span class="nl">bracket_0_start:</span>
</span><span class='line'>
</span><span class='line'>  <span class="nf">cmpb</span> <span class="no">$0</span><span class="p">,</span> <span class="p">(</span><span class="nv">%r12</span><span class="p">)</span>
</span><span class='line'>  <span class="nf">je</span> <span class="no">bracket_1_end</span>
</span><span class='line'><span class="nl">bracket_1_start:</span>
</span><span class='line'>
</span><span class='line'>  <span class="nf">cmpb</span> <span class="no">$0</span><span class="p">,</span> <span class="p">(</span><span class="nv">%r12</span><span class="p">)</span>
</span><span class='line'>  <span class="nf">jne</span> <span class="no">bracket_1_start</span>
</span><span class='line'><span class="nl">bracket_1_end:</span>
</span><span class='line'>
</span><span class='line'>  <span class="nf">cmpb</span> <span class="no">$0</span><span class="p">,</span> <span class="p">(</span><span class="nv">%r12</span><span class="p">)</span>
</span><span class='line'>  <span class="nf">jne</span> <span class="no">bracket_0_start</span>
</span><span class='line'><span class="nl">bracket_0_end:</span>
</span></code></pre></td></tr></table></div></figure>


<p>Finally, we need an epilogue to clean up the stack and callee saved registers
after ourselves.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="k">const</span> <span class="kt">char</span><span class="o">*</span> <span class="k">const</span> <span class="n">epilogue</span> <span class="o">=</span>
</span><span class='line'>  <span class="s">&quot;  addq $30008, %rsp</span><span class="se">\n</span><span class="s">&quot;</span> <span class="c1">// clean up tape from stack.</span>
</span><span class='line'>  <span class="s">&quot;  popq %r12</span><span class="se">\n</span><span class="s">&quot;</span> <span class="c1">// restore callee saved register</span>
</span><span class='line'>  <span class="s">&quot;  popq %rbp</span><span class="se">\n</span><span class="s">&quot;</span>
</span><span class='line'>  <span class="s">&quot;  ret</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">;</span>
</span><span class='line'><span class="n">puts</span><span class="p">(</span><span class="n">epilogue</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>The compiler is a pain when modifying and running a Brainfuck
program; it takes a couple extra commands to compile the Brainfuck program to
assembly, assemble the assembly into an object file, link it into an
executable, and run it whereas with the interpreter we can just run it.  The
trade off is that the compiled version is quite a bit faster.  How much faster?
Let&rsquo;s save that for later.</p>

<p>Wouldn&rsquo;t it be nice if there was a translation &amp; execution technique that
didn&rsquo;t force us to compile our code every time we changed it and wanted to run
it, but also performed closer to that of compiled code?  That&rsquo;s where a JIT
compiler comes in!</p>

<p>For the basics of JITing code, make sure you read <a href="http://nickdesaulniers.github.io/blog/2013/04/03/basic-jit/">my previous article on the basics of JITing code in C</a>.  We&rsquo;re going to follow the same technique of
creating executable memory, copying bytes into that memory, casting it to a
function pointer, then calling it.  Just like the interpreter and the compiler,
we&rsquo;re going to do a unique action for each recognized token.  What&rsquo;s different is
that for each operator, we&rsquo;re going to push opcodes into a dynamic array, that
way it can grow based on our sequential reading of input and will simplify our calculation of relative offsets for branching operations.</p>

<p>The other special thing we&rsquo;re going to do it that we&rsquo;re going to pass
the address of our libc functions (memset, putchar, and getchar) into our
JIT&#8217;ed function at runtime.  This avoids those kooky stub functions you might
see in a disassembled executable.  That means we&rsquo;ll be invoking our JIT&#8217;ed
function like:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="k">typedef</span> <span class="kt">void</span><span class="o">*</span> <span class="nf">fn_memset</span> <span class="p">(</span><span class="kt">void</span><span class="o">*</span><span class="p">,</span> <span class="kt">int</span><span class="p">,</span> <span class="kt">size_t</span><span class="p">);</span>
</span><span class='line'><span class="k">typedef</span> <span class="kt">int</span> <span class="nf">fn_putchar</span> <span class="p">(</span><span class="kt">int</span><span class="p">);</span>
</span><span class='line'><span class="k">typedef</span> <span class="kt">int</span> <span class="nf">fn_getchar</span> <span class="p">();</span>
</span><span class='line'><span class="kt">void</span> <span class="p">(</span><span class="o">*</span><span class="n">jitted_func</span><span class="p">)</span> <span class="p">(</span><span class="n">fn_memset</span><span class="p">,</span> <span class="n">fn_putchar</span><span class="p">,</span> <span class="n">fn_getchar</span><span class="p">)</span> <span class="o">=</span> <span class="n">mem</span><span class="p">;</span>
</span><span class='line'><span class="n">jitted_func</span><span class="p">(</span><span class="n">memset</span><span class="p">,</span> <span class="n">putchar</span><span class="p">,</span> <span class="n">getchar</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>Where mem is our mmap&#8217;ed executable memory with our opcodes copied into it, and
the typedef&rsquo;s are for the respective function signatures for our function
pointers we&rsquo;ll be passing to our JIT&#8217;ed code.  We&rsquo;re kind of getting ahead of
ourselves, but knowing how we will invoke the dynamically created executable
code will give us an idea of how the code itself will work.</p>

<p>The prologue is quite a bit involved, so we&rsquo;ll take it step at a time.  First,
we have the usual prologue:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="kt">char</span> <span class="n">prologue</span> <span class="p">[]</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>  <span class="mh">0x55</span><span class="p">,</span> <span class="c1">// push rbp</span>
</span><span class='line'>  <span class="mh">0x48</span><span class="p">,</span> <span class="mh">0x89</span><span class="p">,</span> <span class="mh">0xE5</span><span class="p">,</span> <span class="c1">// mov rsp, rbp</span>
</span></code></pre></td></tr></table></div></figure>


<p>Then we want to back up our callee saved registers that we&rsquo;ll be using.  Expect horrific and difficult to debug bugs if you forget to do this.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'>  <span class="mh">0x41</span><span class="p">,</span> <span class="mh">0x54</span><span class="p">,</span> <span class="c1">// pushq %r12</span>
</span><span class='line'>  <span class="mh">0x41</span><span class="p">,</span> <span class="mh">0x55</span><span class="p">,</span> <span class="c1">// pushq %r13</span>
</span><span class='line'>  <span class="mh">0x41</span><span class="p">,</span> <span class="mh">0x56</span><span class="p">,</span> <span class="c1">// pushq %r14</span>
</span></code></pre></td></tr></table></div></figure>


<p>At this point, %rdi will contain the address of memset, %rsi will contain the
address of putchar, and %rdx will contain the address of getchar, see
<a href="http://nickdesaulniers.github.io/blog/2014/04/18/lets-write-some-x86-64/">x86-64 ABI point #2</a>.  We want to store these in callee saved registers before
calling any of them, else they may clobber %rdi, %rsi, or %rdx since they&rsquo;re
not &ldquo;callee saved,&rdquo; rather &ldquo;call clobbered.&rdquo;  See <a href="http://nickdesaulniers.github.io/blog/2014/04/18/lets-write-some-x86-64/">x86-64 ABI point #4</a>.</p>

<p><img class="center" src="http://nickdesaulniers.github.io/images/prologue1.png"></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'>  <span class="mh">0x49</span><span class="p">,</span> <span class="mh">0x89</span><span class="p">,</span> <span class="mh">0xFC</span><span class="p">,</span> <span class="c1">// movq %rdi, %r12</span>
</span><span class='line'>  <span class="mh">0x49</span><span class="p">,</span> <span class="mh">0x89</span><span class="p">,</span> <span class="mh">0xF5</span><span class="p">,</span> <span class="c1">// movq %rsi, %r13</span>
</span><span class='line'>  <span class="mh">0x49</span><span class="p">,</span> <span class="mh">0x89</span><span class="p">,</span> <span class="mh">0xD6</span><span class="p">,</span> <span class="c1">// movq %rdx, %r14</span>
</span></code></pre></td></tr></table></div></figure>


<p>At this point, %r12 will contain the address of memset, %r13 will contain the
address of putchar, and %r14 will contain the address of getchar.</p>

<p><img class="center" src="http://nickdesaulniers.github.io/images/prologue2.png"></p>

<p>Next up is allocating 30008 B on the stack:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'>  <span class="mh">0x48</span><span class="p">,</span> <span class="mh">0x81</span><span class="p">,</span> <span class="mh">0xEC</span><span class="p">,</span> <span class="mh">0x38</span><span class="p">,</span> <span class="mh">0x75</span><span class="p">,</span> <span class="mh">0x00</span><span class="p">,</span> <span class="mh">0x00</span><span class="p">,</span> <span class="c1">// subq $30008, %rsp</span>
</span></code></pre></td></tr></table></div></figure>


<p>This is our first hint at how numbers, whose value is larger than the maximum
representable value in a byte, are represented on x86-64.  Where in this
instruction is the value 30008?  The answer is the 4 byte sequence
<code>0x38, 0x75, 0x00, 0x00</code>.  The x86-64 architecture is &ldquo;Little Endian,&rdquo; which
means that the least significant bit (LSB) is first and the most significant
bit (MSB) is last.  When humans do math, they typically represent numbers the
other way, or “Big Endian.”  Thus we write decimal ten as &ldquo;10&rdquo; and not &ldquo;01.&rdquo;
So that means that <code>0x38, 0x75, 0x00, 0x00</code> in Little Endian is
<code>0x00, 0x00, 0x75, 0x38</code> in Big Endian, which then is
<code>7*16^3+5*16^2+3*16^1+8*16^0</code>
which is <code>30008</code> in decimal, the amount of bytes we want to subtract from the
stack. We&rsquo;re allocating an additional 8 B on the stack for alignment
requirements, similar to the compiler.  By pushing even numbers of 64 b
registers, we need to realign our stack pointer.</p>

<p><img class="center" src="http://nickdesaulniers.github.io/images/prologue3.png"></p>

<p>Next in the prologue, we set up and call memset:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'>  <span class="c1">// address of beginning of tape</span>
</span><span class='line'>  <span class="mh">0x48</span><span class="p">,</span> <span class="mh">0x8D</span><span class="p">,</span> <span class="mh">0x3C</span><span class="p">,</span> <span class="mh">0x24</span><span class="p">,</span> <span class="c1">// leaq (%rsp), %rdi</span>
</span><span class='line'>  <span class="c1">// fill with 0&#39;s</span>
</span><span class='line'>  <span class="mh">0xBE</span><span class="p">,</span> <span class="mh">0x00</span><span class="p">,</span> <span class="mh">0x00</span><span class="p">,</span> <span class="mh">0x00</span><span class="p">,</span> <span class="mh">0x00</span><span class="p">,</span> <span class="c1">// movl $0, %esi</span>
</span><span class='line'>  <span class="c1">// length 30,000 B</span>
</span><span class='line'>  <span class="mh">0x48</span><span class="p">,</span> <span class="mh">0xC7</span><span class="p">,</span> <span class="mh">0xC2</span><span class="p">,</span> <span class="mh">0x30</span><span class="p">,</span> <span class="mh">0x75</span><span class="p">,</span> <span class="mh">0x00</span><span class="p">,</span> <span class="mh">0x00</span><span class="p">,</span> <span class="c1">// movq $30000, %rdx</span>
</span><span class='line'>  <span class="c1">// memset</span>
</span><span class='line'>  <span class="mh">0x41</span><span class="p">,</span> <span class="mh">0xFF</span><span class="p">,</span> <span class="mh">0xD4</span><span class="p">,</span> <span class="c1">// callq *%r12</span>
</span></code></pre></td></tr></table></div></figure>


<p>After invoking memset, %rdi, %rsi, &amp; %rcx will contain garbage values since
they are &ldquo;call clobbered&rdquo; registers.  At this point we no longer need memset,
so we now use %r12 as our instruction pointer.  %rsp will point to the top
(technically the bottom) of the stack, which is the beginning of our memset&#8217;ed
tape.  That&rsquo;s the end of our prologue.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'>  <span class="mh">0x49</span><span class="p">,</span> <span class="mh">0x89</span><span class="p">,</span> <span class="mh">0xE4</span> <span class="c1">// movq %rsp, %r12</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p><img class="center" src="http://nickdesaulniers.github.io/images/prologue4.png"></p>

<p>We can then push our prologue into our dynamic array implementation:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">vector_push</span><span class="p">(</span><span class="o">&amp;</span><span class="n">instruction_stream</span><span class="p">,</span> <span class="n">prologue</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">prologue</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now we iterate over our Brainfuck program and switch on the operations again.
For pointer increment and decrement, we just nudge %r12.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="k">case</span> <span class="sc">&#39;&gt;&#39;</span>:
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>    <span class="kt">char</span> <span class="n">opcodes</span> <span class="p">[]</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>      <span class="mh">0x49</span><span class="p">,</span> <span class="mh">0xFF</span><span class="p">,</span> <span class="mh">0xC4</span> <span class="c1">// inc %r12</span>
</span><span class='line'>    <span class="p">};</span>
</span><span class='line'>    <span class="n">vector_push</span><span class="p">(</span><span class="o">&amp;</span><span class="n">instruction_stream</span><span class="p">,</span> <span class="n">opcodes</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">opcodes</span><span class="p">));</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">break</span><span class="p">;</span>
</span><span class='line'><span class="k">case</span> <span class="sc">&#39;&lt;&#39;</span>:
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>    <span class="kt">char</span> <span class="n">opcodes</span> <span class="p">[]</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>      <span class="mh">0x49</span><span class="p">,</span> <span class="mh">0xFF</span><span class="p">,</span> <span class="mh">0xCC</span> <span class="c1">// dec %r12</span>
</span><span class='line'>    <span class="p">};</span>
</span><span class='line'>    <span class="n">vector_push</span><span class="p">(</span><span class="o">&amp;</span><span class="n">instruction_stream</span><span class="p">,</span> <span class="n">opcodes</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">opcodes</span><span class="p">));</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">break</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>That extra fun block in the switch statement is because in C/C++, we <a href="http://stackoverflow.com/a/8550253/1027966">can&rsquo;t
define variables in the branches of switch statements</a>.</p>

<p>Pointer deref then increment/decrement are equally uninspiring:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="k">case</span> <span class="sc">&#39;+&#39;</span>:
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>    <span class="kt">char</span> <span class="n">opcodes</span> <span class="p">[]</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>      <span class="mh">0x41</span><span class="p">,</span> <span class="mh">0xFE</span><span class="p">,</span> <span class="mh">0x04</span><span class="p">,</span> <span class="mh">0x24</span> <span class="c1">// incb (%r12)</span>
</span><span class='line'>    <span class="p">};</span>
</span><span class='line'>    <span class="n">vector_push</span><span class="p">(</span><span class="o">&amp;</span><span class="n">instruction_stream</span><span class="p">,</span> <span class="n">opcodes</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">opcodes</span><span class="p">));</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">break</span><span class="p">;</span>
</span><span class='line'><span class="k">case</span> <span class="sc">&#39;-&#39;</span>:
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>    <span class="kt">char</span> <span class="n">opcodes</span> <span class="p">[]</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>      <span class="mh">0x41</span><span class="p">,</span> <span class="mh">0xFE</span><span class="p">,</span> <span class="mh">0x0C</span><span class="p">,</span> <span class="mh">0x24</span> <span class="c1">// decv (%r12)</span>
</span><span class='line'>    <span class="p">};</span>
</span><span class='line'>    <span class="n">vector_push</span><span class="p">(</span><span class="o">&amp;</span><span class="n">instruction_stream</span><span class="p">,</span> <span class="n">opcodes</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">opcodes</span><span class="p">));</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">break</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>I/O might be interesting, but in x86-64 we have an opcode for calling the
function at the end of a pointer.  %r13 contains the address of putchar while
%r14 contains the address of getchar.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="k">case</span> <span class="sc">&#39;.&#39;</span>:
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>    <span class="kt">char</span> <span class="n">opcodes</span> <span class="p">[]</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>      <span class="mh">0x41</span><span class="p">,</span> <span class="mh">0x0F</span><span class="p">,</span> <span class="mh">0xB6</span><span class="p">,</span> <span class="mh">0x3C</span><span class="p">,</span> <span class="mh">0x24</span><span class="p">,</span> <span class="c1">// movzbl (%r12), %edi</span>
</span><span class='line'>      <span class="mh">0x41</span><span class="p">,</span> <span class="mh">0xFF</span><span class="p">,</span> <span class="mh">0xD5</span> <span class="c1">// callq *%r13</span>
</span><span class='line'>    <span class="p">};</span>
</span><span class='line'>    <span class="n">vector_push</span><span class="p">(</span><span class="o">&amp;</span><span class="n">instruction_stream</span><span class="p">,</span> <span class="n">opcodes</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">opcodes</span><span class="p">));</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">break</span><span class="p">;</span>
</span><span class='line'><span class="k">case</span> <span class="sc">&#39;,&#39;</span>:
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>    <span class="kt">char</span> <span class="n">opcodes</span> <span class="p">[]</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>      <span class="mh">0x41</span><span class="p">,</span> <span class="mh">0xFF</span><span class="p">,</span> <span class="mh">0xD6</span><span class="p">,</span> <span class="c1">// callq *%r14</span>
</span><span class='line'>      <span class="mh">0x41</span><span class="p">,</span> <span class="mh">0x88</span><span class="p">,</span> <span class="mh">0x04</span><span class="p">,</span> <span class="mh">0x24</span> <span class="c1">// movb %al, (%r12)</span>
</span><span class='line'>    <span class="p">};</span>
</span><span class='line'>    <span class="n">vector_push</span><span class="p">(</span><span class="o">&amp;</span><span class="n">instruction_stream</span><span class="p">,</span> <span class="n">opcodes</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">opcodes</span><span class="p">));</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">break</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now with our looping constructs, we get to the fun part.  With the compiler, we
deferred the concept of &ldquo;relocation&rdquo; to the assembler.  We simply emitted
labels, that the assembler turned into relative offsets (jumps by values
relative to the last byte in the jump instruction).  We&rsquo;ve found ourselves in a
Catch-22 though: how many bytes forward do we jump to the matching close
bracket that we haven&rsquo;t seen yet?</p>

<p>Normally, an assembler might have a data structure known as a
&ldquo;relocation table.&rdquo;  It keeps track of the first byte after a label and jumps,
rewriting jumps-to-labels (which aren&rsquo;t kept around in the resulting binary
executable) to relative jumps.  Spidermonkey, Firefox&rsquo;s JavaScript Virtual
Machine has two classes for this, <a href="http://mxr.mozilla.org/mozilla-central/source/js/src/jit/MacroAssembler.cpp">MacroAssembler</a> and <a href="http://mxr.mozilla.org/mozilla-central/source/js/src/jit/Label.h">Label</a>.  Spidermonkey
embeds a linked list in the opcodes it generates for jumps with which it&rsquo;s yet
to see a label for.  Once it finds the label, it walks the linked list (which
itself is embedded in the emitted instruction stream) patching up these
locations as it goes.</p>

<p>For Brainfuck, we don&rsquo;t have to anything quite as fancy since each label only
ends up having one jump site.  Instead, we can use a stack of integers that are
offsets into our dynamic array, and do the relocation once we know where
exactly we&rsquo;re jumping to.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="k">case</span> <span class="sc">&#39;[&#39;</span>:
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>    <span class="kt">char</span> <span class="n">opcodes</span> <span class="p">[]</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>      <span class="mh">0x41</span><span class="p">,</span> <span class="mh">0x80</span><span class="p">,</span> <span class="mh">0x3C</span><span class="p">,</span> <span class="mh">0x24</span><span class="p">,</span> <span class="mh">0x00</span><span class="p">,</span> <span class="c1">// cmpb $0, (%r12)</span>
</span><span class='line'>      <span class="c1">// Needs to be patched up</span>
</span><span class='line'>      <span class="mh">0x0F</span><span class="p">,</span> <span class="mh">0x84</span><span class="p">,</span> <span class="mh">0x00</span><span class="p">,</span> <span class="mh">0x00</span><span class="p">,</span> <span class="mh">0x00</span><span class="p">,</span> <span class="mh">0x00</span> <span class="c1">// je &lt;32b relative offset, 2&#39;s compliment, LE&gt;</span>
</span><span class='line'>    <span class="p">};</span>
</span><span class='line'>    <span class="n">vector_push</span><span class="p">(</span><span class="o">&amp;</span><span class="n">instruction_stream</span><span class="p">,</span> <span class="n">opcodes</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">opcodes</span><span class="p">));</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="n">stack_push</span><span class="p">(</span><span class="o">&amp;</span><span class="n">relocation_table</span><span class="p">,</span> <span class="n">instruction_stream</span><span class="p">.</span><span class="n">size</span><span class="p">);</span> <span class="c1">// create a label after</span>
</span><span class='line'>  <span class="k">break</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>First we push the compare and jump opcodes, but for now we leave the relative
offset blank (four zero bytes).  We will come back and patch it up later.
Then, we push the current length of dynamic array, which just so happens to be
the offset into the instruction stream of the next instruction.</p>

<p>All of the relocation magic happens in the case for the closing bracket.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="k">case</span> <span class="sc">&#39;]&#39;</span>:
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>    <span class="kt">char</span> <span class="n">opcodes</span> <span class="p">[]</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>      <span class="mh">0x41</span><span class="p">,</span> <span class="mh">0x80</span><span class="p">,</span> <span class="mh">0x3C</span><span class="p">,</span> <span class="mh">0x24</span><span class="p">,</span> <span class="mh">0x00</span><span class="p">,</span> <span class="c1">// cmpb $0, (%r12)</span>
</span><span class='line'>      <span class="c1">// Needs to be patched up</span>
</span><span class='line'>      <span class="mh">0x0F</span><span class="p">,</span> <span class="mh">0x85</span><span class="p">,</span> <span class="mh">0x00</span><span class="p">,</span> <span class="mh">0x00</span><span class="p">,</span> <span class="mh">0x00</span><span class="p">,</span> <span class="mh">0x00</span> <span class="c1">// jne &lt;33b relative offset, 2&#39;s compliment, LE&gt;</span>
</span><span class='line'>    <span class="p">};</span>
</span><span class='line'>    <span class="n">vector_push</span><span class="p">(</span><span class="o">&amp;</span><span class="n">instruction_stream</span><span class="p">,</span> <span class="n">opcodes</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">opcodes</span><span class="p">));</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="c1">// ...</span>
</span></code></pre></td></tr></table></div></figure>


<p>First, we push our comparison and jump instructions into the dynamic array.
We should know the relative offset we need to jump back to at this point, and
thus don&rsquo;t need to push four empty bytes, but it makes the following math a
little simpler, as were not done yet with this case.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'>  <span class="c1">// ...</span>
</span><span class='line'>  <span class="n">stack_pop</span><span class="p">(</span><span class="o">&amp;</span><span class="n">relocation_table</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">relocation_site</span><span class="p">);</span>
</span><span class='line'>  <span class="n">relative_offset</span> <span class="o">=</span> <span class="n">instruction_stream</span><span class="p">.</span><span class="n">size</span> <span class="o">-</span> <span class="n">relocation_site</span><span class="p">;</span>
</span><span class='line'>  <span class="c1">// ...</span>
</span></code></pre></td></tr></table></div></figure>


<p><img class="center" src="http://nickdesaulniers.github.io/images/relative_jump_unknown.png"></p>

<p>We pop the matching offset into the dynamic array (from the matching open
bracket), and calculate the difference from the current size of the instruction
stream to the matching offset to get our relative offset.  What&rsquo;s interesting
is that this offset is equal in magnitude for the forward and backwards jumps
that we now need to patch up.  We simply go back in our instruction stream 4 B,
and write that relative offset negated as a 32 b LE number (patching our
backwards jump), then go back to the site of our forward jump minus 4 B and
write that relative offset as a 32 b LE number (patching our forwards jump).</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'>  <span class="c1">// ...</span>
</span><span class='line'>  <span class="n">vector_write32LE</span><span class="p">(</span><span class="o">&amp;</span><span class="n">instruction_stream</span><span class="p">,</span> <span class="n">instruction_stream</span><span class="p">.</span><span class="n">size</span> <span class="o">-</span> <span class="mi">4</span><span class="p">,</span> <span class="o">-</span><span class="n">relative_offset</span><span class="p">);</span>
</span><span class='line'>  <span class="n">vector_write32LE</span><span class="p">(</span><span class="o">&amp;</span><span class="n">instruction_stream</span><span class="p">,</span> <span class="n">relocation_site</span> <span class="o">-</span> <span class="mi">4</span><span class="p">,</span> <span class="n">relative_offset</span><span class="p">);</span>
</span><span class='line'>  <span class="k">break</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Thus, when writing a JIT, one must worry about manual relocation.  From the
<a href="http://www.intel.com/content/dam/www/public/us/en/documents/manuals/64-ia-32-architectures-software-developer-instruction-set-reference-manual-325383.pdf">Intel 64 and IA-32 Architectures Software Developer’s Manual Volume 2 (2A, 2B &amp; 2C): Instruction Set Reference, A-Z</a> &ldquo;A relative offset
(rel8, rel16, or rel32) is generally specified as a label in assembly code, but
at the machine code level, it is encoded as a signed, 8-bit or 32-bit immediate
value, which is added to the instruction pointer.&rdquo;</p>

<p>The last thing we push onto our instruction stream is clean up code in the
epilogue.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="kt">char</span> <span class="n">epilogue</span> <span class="p">[]</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>  <span class="mh">0x48</span><span class="p">,</span> <span class="mh">0x81</span><span class="p">,</span> <span class="mh">0xC4</span><span class="p">,</span> <span class="mh">0x38</span><span class="p">,</span> <span class="mh">0x75</span><span class="p">,</span> <span class="mh">0x00</span><span class="p">,</span> <span class="mh">0x00</span><span class="p">,</span> <span class="c1">// addq $30008, %rsp</span>
</span><span class='line'>  <span class="c1">// restore callee saved registers</span>
</span><span class='line'>  <span class="mh">0x41</span><span class="p">,</span> <span class="mh">0x5E</span><span class="p">,</span> <span class="c1">// popq %r14</span>
</span><span class='line'>  <span class="mh">0x41</span><span class="p">,</span> <span class="mh">0x5D</span><span class="p">,</span> <span class="c1">// popq %r13</span>
</span><span class='line'>  <span class="mh">0x41</span><span class="p">,</span> <span class="mh">0x5C</span><span class="p">,</span> <span class="c1">// popq %r12</span>
</span><span class='line'>  <span class="mh">0x5d</span><span class="p">,</span> <span class="c1">// pop rbp</span>
</span><span class='line'>  <span class="mh">0xC3</span> <span class="c1">// ret</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'><span class="n">vector_push</span><span class="p">(</span><span class="o">&amp;</span><span class="n">instruction_stream</span><span class="p">,</span> <span class="n">epilogue</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">epilogue</span><span class="p">));</span>
</span></code></pre></td></tr></table></div></figure>


<p>A dynamic array of bytes isn&rsquo;t really useful, so we need to create executable
memory the size of the current instruction stream and copy all of the machine
opcodes into it, cast it to a function pointer, call it, and finally clean up:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="kt">void</span><span class="o">*</span> <span class="n">mem</span> <span class="o">=</span> <span class="n">mmap</span><span class="p">(</span><span class="nb">NULL</span><span class="p">,</span> <span class="n">instruction_stream</span><span class="p">.</span><span class="n">size</span><span class="p">,</span> <span class="n">PROT_WRITE</span> <span class="o">|</span> <span class="n">PROT_EXEC</span><span class="p">,</span>
</span><span class='line'>  <span class="n">MAP_ANON</span> <span class="o">|</span> <span class="n">MAP_PRIVATE</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
</span><span class='line'><span class="n">memcpy</span><span class="p">(</span><span class="n">mem</span><span class="p">,</span> <span class="n">instruction_stream</span><span class="p">.</span><span class="n">data</span><span class="p">,</span> <span class="n">instruction_stream</span><span class="p">.</span><span class="n">size</span><span class="p">);</span>
</span><span class='line'><span class="kt">void</span> <span class="p">(</span><span class="o">*</span><span class="n">jitted_func</span><span class="p">)</span> <span class="p">(</span><span class="n">fn_memset</span><span class="p">,</span> <span class="n">fn_putchar</span><span class="p">,</span> <span class="n">fn_getchar</span><span class="p">)</span> <span class="o">=</span> <span class="n">mem</span><span class="p">;</span>
</span><span class='line'><span class="n">jitted_func</span><span class="p">(</span><span class="n">memcpy</span><span class="p">,</span> <span class="n">putchar</span><span class="p">,</span> <span class="n">getchar</span><span class="p">);</span>
</span><span class='line'><span class="n">munmap</span><span class="p">(</span><span class="n">mem</span><span class="p">,</span> <span class="n">instruction_stream</span><span class="p">.</span><span class="n">size</span><span class="p">);</span>
</span><span class='line'><span class="n">vector_destroy</span><span class="p">(</span><span class="o">&amp;</span><span class="n">instruction_stream</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>Note: we could have used the instruction stream rewinding technique to move the address of memset, putchar, and getchar as 64 b immediate values into %r12-%r14, which would have <a href="https://github.com/nickdesaulniers/bf_interpreter_jit_compiler/pull/6/files">simplified our JIT&rsquo;d function&rsquo;s type signature</a>.</p>

<p>Compile that, and we now have <a href="https://github.com/nickdesaulniers/bf_interpreter_jit_compiler/blob/master/jit.c">a function that will JIT compile and execute Brainfuck in roughly 141 SLOC</a>.  And, we can make changes to our Brainfuck program and not have to recompile it like we did with the Brainfuck compiler.</p>

<p>Hopefully it&rsquo;s becoming apparent how similar an interpreter, compiler, and JIT
behave.  In the interpreter, we immediately execute some operation.  In the
compiler, we emit the equivalent text based assembly instructions corresponding
to what the higher level language might get translated to in the interpreter.
In the JIT, we emit the binary opcodes into executable memory and manually
perform relocation, where the binary opcodes are equivalent to the text based
assembly we might emit in the compiler.  A production ready JIT would probably have macros for each operation in the JIT would perform, so the code would look more like the compiler rather than raw arrays of bytes (though the preprocessor would translate those macros into such).  The entire process is basically disassembling C code with <code>gobjdump -S -M suffix a.out</code>, and punching in hex like one would a Gameshark.</p>

<p>Compare pointer incrementing from the three:</p>

<p>Interpreter:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="k">case</span> <span class="sc">&#39;&gt;&#39;</span>: <span class="o">++</span><span class="n">ptr</span><span class="p">;</span> <span class="k">break</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Compiler:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="k">case</span> <span class="sc">&#39;&gt;&#39;</span>:
</span><span class='line'>  <span class="n">puts</span><span class="p">(</span><span class="s">&quot;  inc %r12&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="k">break</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>JIT:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="k">case</span> <span class="sc">&#39;&gt;&#39;</span>:
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>    <span class="kt">char</span> <span class="n">opcodes</span> <span class="p">[]</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>      <span class="mh">0x49</span><span class="p">,</span> <span class="mh">0xFF</span><span class="p">,</span> <span class="mh">0xC4</span> <span class="c1">// inc %r12</span>
</span><span class='line'>    <span class="p">};</span>
</span><span class='line'>    <span class="n">vector_push</span><span class="p">(</span><span class="o">&amp;</span><span class="n">instruction_stream</span><span class="p">,</span> <span class="n">opcodes</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">opcodes</span><span class="p">));</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">break</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Or compare the full sources of the <a href="https://github.com/nickdesaulniers/bf_interpreter_jit_compiler/blob/master/interpreter.c">the interpreter</a>, <a href="https://github.com/nickdesaulniers/bf_interpreter_jit_compiler/blob/master/compiler.c">the compiler</a>, and <a href="https://github.com/nickdesaulniers/bf_interpreter_jit_compiler/blob/master/jit.c">the JIT</a>. Each at ~100 lines of code should be fairly easy to digest.</p>

<p>Let&rsquo;s now examine the performance of these three.  One of the longer running
Brainfuck programs I can find is <a href="https://github.com/nickdesaulniers/bf_interpreter_jit_compiler/blob/master/samples/mandelbrot.b">one that prints the Mandelbrot set as ASCII art to stdout</a>.</p>

<p><video width='' height='' preload='none' controls poster=''><source src='http://nickdesaulniers.github.io/video/jit.mp4 ' ></video></p>

<p>Running the UNIX command <code>time</code> on the interpreter, compiled
result, and the JIT, we should expect numbers similar to:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="err">$</span> <span class="n">time</span> <span class="p">.</span><span class="o">/</span><span class="n">interpreter</span> <span class="p">..</span><span class="o">/</span><span class="n">samples</span><span class="o">/</span><span class="n">mandelbrot</span><span class="p">.</span><span class="n">b</span>
</span><span class='line'><span class="mf">43.54</span><span class="n">s</span> <span class="n">user</span> <span class="mf">0.03</span><span class="n">s</span> <span class="n">system</span> <span class="mi">99</span><span class="o">%</span> <span class="n">cpu</span> <span class="mf">43.581</span> <span class="n">total</span>
</span><span class='line'>
</span><span class='line'><span class="err">$</span> <span class="p">.</span><span class="o">/</span><span class="n">compiler</span> <span class="p">..</span><span class="o">/</span><span class="n">samples</span><span class="o">/</span><span class="n">mandelbrot</span><span class="p">.</span><span class="n">b</span> <span class="o">&gt;</span> <span class="n">temp</span><span class="p">.</span><span class="n">s</span><span class="p">;</span> <span class="p">..</span><span class="o">/</span><span class="n">assemble</span><span class="p">.</span><span class="n">sh</span> <span class="n">temp</span><span class="p">.</span><span class="n">s</span><span class="p">;</span> <span class="n">time</span> <span class="p">.</span><span class="o">/</span><span class="n">a</span><span class="p">.</span><span class="n">out</span>
</span><span class='line'><span class="mf">3.24</span><span class="n">s</span> <span class="n">user</span> <span class="mf">0.01</span><span class="n">s</span> <span class="n">system</span> <span class="mi">99</span><span class="o">%</span> <span class="n">cpu</span> <span class="mf">3.254</span> <span class="n">total</span>
</span><span class='line'>
</span><span class='line'><span class="err">$</span> <span class="n">time</span> <span class="p">.</span><span class="o">/</span><span class="n">jit</span> <span class="p">..</span><span class="o">/</span><span class="n">samples</span><span class="o">/</span><span class="n">mandelbrot</span><span class="p">.</span><span class="n">b</span>
</span><span class='line'><span class="mf">3.27</span><span class="n">s</span> <span class="n">user</span> <span class="mf">0.01</span><span class="n">s</span> <span class="n">system</span> <span class="mi">99</span><span class="o">%</span> <span class="n">cpu</span> <span class="mf">3.282</span> <span class="n">total</span>
</span></code></pre></td></tr></table></div></figure>


<p>The interpreter is an order of magnitude slower than the compiled result or run
of the JIT.  Then again, the interpreter isn&rsquo;t able to jump back and forth as
efficiently as the compiler or JIT, since it scans back and forth for matching
brackets O(N), while the other two can jump to where they need to go in a few instructions O(1).  A production interpreter would probably translate the higher level language to a byte code, and thus be able to calculate the offsets used for jumps directly, rather than scanning back and forth.</p>

<p>The interpreter bounces back and forth between looking up an operation, then
doing something based on the operation, then lookup, etc..  The compiler and JIT preform the translation first, then the execution, not interleaving the two.</p>

<p>The compiled result is the fastest, as expected, since it doesn&rsquo;t have the
overhead the JIT does of having to read the input file or build up the
instructions to execute at runtime.  The compiler has read
and translated the input file ahead of time.</p>

<p>What if we take into account the
time it takes to compile the source code, and run it?</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="err">$</span> <span class="n">time</span> <span class="p">(.</span><span class="o">/</span><span class="n">compiler</span> <span class="p">..</span><span class="o">/</span><span class="n">samples</span><span class="o">/</span><span class="n">mandelbrot</span><span class="p">.</span><span class="n">b</span> <span class="o">&gt;</span> <span class="n">temp</span><span class="p">.</span><span class="n">s</span><span class="p">;</span> <span class="p">..</span><span class="o">/</span><span class="n">assemble</span><span class="p">.</span><span class="n">sh</span> <span class="n">temp</span><span class="p">.</span><span class="n">s</span><span class="p">;</span> <span class="p">.</span><span class="o">/</span><span class="n">a</span><span class="p">.</span><span class="n">out</span><span class="p">)</span>
</span><span class='line'><span class="mf">3.27</span><span class="n">s</span> <span class="n">user</span> <span class="mf">0.08</span><span class="n">s</span> <span class="n">system</span> <span class="mi">99</span><span class="o">%</span> <span class="n">cpu</span> <span class="mf">3.353</span> <span class="n">total</span>
</span></code></pre></td></tr></table></div></figure>


<p>Including the time it takes to compile the code then run it, the compiled
results are now slightly slower than the JIT (though I bet the multiple processes we start up are suspect), but with the JIT we pay the price
to compile each and every time we run our code.  With the compiler, we pay that
tax once.  When compilation time is cheap, as is the case with our Brainfuck
compiler &amp; JIT, it makes sense to prefer the JIT; it allows us to quickly make
changes to our code and re-run it.  When compilation is expensive, we might
only want to pay the compilation tax once, especially if we plan on running the
program repeatedly.</p>

<p>JIT&rsquo;s are neat but compared to compilers can be more complex to
implement.  They also repeatedly re-parse input files and re-build instruction
streams at runtime. Where they can shine is bridging the gap for dynamically
typed languages where the runtime itself is much more dynamic, and thus harder
(if not, impossible) to optimize ahead of time.  Being able to jump into JIT&rsquo;d
native code from an
interpreter and back gives you the best of both (interpreted and compiled)
worlds.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hidden in Plain Sight - Public Key Crypto]]></title>
    <link href="http://nickdesaulniers.github.io/blog/2015/02/22/public-key-crypto-code-example/"/>
    <updated>2015-02-22T11:48:00-08:00</updated>
    <id>http://nickdesaulniers.github.io/blog/2015/02/22/public-key-crypto-code-example</id>
    <content type="html"><![CDATA[<p>How is it possible for us to communicate securely when there&rsquo;s the possibility
of a third party eavesdropping on us?  How can we communicate private secrets
through public channels?  How do such techniques enable us to bank online and
carry out other sensitive transactions on the Internet while trusting numerous
relays?  In this post, I hope
to explain public key cryptography, with actual code examples, so that the
concepts are a little more concrete.</p>

<p>First, please check out this excellent video on public key crypto:</p>

<div class="embed-video-container"><iframe src="http://nickdesaulniers.github.io//www.youtube.com/embed/YEBfamv-_do" allowfullscreen></iframe></div>


<p>Hopefully that explains the gist of the technique, but what might it actually
look like in code?  Let&rsquo;s take a look at example code in JavaScript using the
Node.js crypto module.  We&rsquo;ll later compare the upcoming WebCrypto API and
look at a TLS handshake.</p>

<p>Meet Alice.  Meet Bob. Meet Eve.  Alice would like to send Bob a secret
message.  Alice would not like Eve to view the message.  Assume Eve can
intercept, but not tamper with, everything Alice and Bob try to share with each
other.</p>

<p>Alice chooses a modular exponential key group, such as modp4, then creates a
public and private key.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">group</span> <span class="o">=</span> <span class="s2">&quot;modp4&quot;</span><span class="p">;</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">aliceDH</span> <span class="o">=</span> <span class="nx">crypto</span><span class="p">.</span><span class="nx">getDiffieHellman</span><span class="p">(</span><span class="nx">group</span><span class="p">);</span>
</span><span class='line'><span class="nx">aliceDH</span><span class="p">.</span><span class="nx">generateKeys</span><span class="p">();</span>
</span></code></pre></td></tr></table></div></figure>


<p>A modular exponential key group is simply a &ldquo;sufficiently large&rdquo; prime number,
paired with a generator (specific number), such as those defined in
<a href="http://tools.ietf.org/html/rfc2412">RFC2412</a> and
<a href="http://tools.ietf.org/html/rfc3526">RFC3526</a>.</p>

<p>The public key is meant to be shared; it is ok for Eve to know the public key.
The private key must not ever be shared, even with the person communicating to.</p>

<p>Alice then shares her public key and group with Bob.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">Public</span> <span class="nx">Key</span><span class="o">:</span>
</span><span class='line'> <span class="o">&lt;</span><span class="nx">Buffer</span> <span class="mi">96</span> <span class="mi">33</span> <span class="nx">c5</span> <span class="mi">9</span><span class="nx">e</span> <span class="nx">b9</span> <span class="mi">07</span> <span class="mi">3</span><span class="nx">e</span> <span class="nx">f2</span> <span class="nx">ec</span> <span class="mi">56</span> <span class="mi">6</span><span class="nx">d</span> <span class="nx">f4</span> <span class="mi">1</span><span class="nx">a</span> <span class="nx">b4</span> <span class="nx">f8</span> <span class="mi">4</span><span class="nx">c</span> <span class="mi">77</span> <span class="nx">e6</span> <span class="mi">5</span><span class="nx">f</span> <span class="nx">a0</span> <span class="mi">93</span> <span class="nx">cf</span> <span class="mi">32</span> <span class="nx">d3</span> <span class="mi">22</span> <span class="mi">42</span> <span class="nx">c8</span> <span class="nx">b4</span> <span class="mi">7</span><span class="nx">b</span> <span class="mi">2</span><span class="nx">b</span> <span class="mi">1</span><span class="nx">f</span> <span class="nx">a9</span> <span class="mi">55</span> <span class="mi">86</span> <span class="mi">05</span> <span class="nx">a4</span> <span class="mi">60</span> <span class="mi">17</span> <span class="nx">ae</span> <span class="nx">f9</span> <span class="nx">ee</span> <span class="nx">bf</span> <span class="nx">b3</span> <span class="nx">c9</span> <span class="mi">05</span> <span class="nx">a9</span> <span class="mi">31</span> <span class="mi">31</span> <span class="mi">94</span> <span class="mi">0</span><span class="nx">f</span> <span class="p">...</span> <span class="o">&gt;</span>
</span><span class='line'><span class="nx">Group</span><span class="o">:</span>
</span><span class='line'> <span class="nx">modp14</span>
</span></code></pre></td></tr></table></div></figure>


<p>Bob now creates a public and private key pair with the same group as Alice.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">bobDH</span> <span class="o">=</span> <span class="nx">crypto</span><span class="p">.</span><span class="nx">getDiffieHellman</span><span class="p">(</span><span class="nx">group</span><span class="p">);</span>
</span><span class='line'><span class="nx">bobDH</span><span class="p">.</span><span class="nx">generateKeys</span><span class="p">();</span>
</span></code></pre></td></tr></table></div></figure>


<p>Bob shares his public key with Alice.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">Public</span> <span class="nx">key</span><span class="o">:</span>
</span><span class='line'> <span class="o">&lt;</span><span class="nx">Buffer</span> <span class="nx">ee</span> <span class="nx">d7</span> <span class="nx">e2</span> <span class="mi">00</span> <span class="nx">e5</span> <span class="mi">82</span> <span class="mi">11</span> <span class="nx">eb</span> <span class="mi">67</span> <span class="nx">ab</span> <span class="mi">50</span> <span class="mi">20</span> <span class="mi">30</span> <span class="mi">81</span> <span class="nx">b1</span> <span class="mi">74</span> <span class="mi">7</span><span class="nx">a</span> <span class="mi">51</span> <span class="mi">0</span><span class="nx">d</span> <span class="mi">7</span><span class="nx">e</span> <span class="mi">2</span><span class="nx">a</span> <span class="nx">de</span> <span class="nx">b7</span> <span class="nx">df</span> <span class="nx">db</span> <span class="nx">cf</span> <span class="nx">ac</span> <span class="mi">57</span> <span class="nx">de</span> <span class="nx">a4</span> <span class="nx">f0</span> <span class="nx">bd</span> <span class="nx">bc</span> <span class="nx">b5</span> <span class="mi">7</span><span class="nx">e</span> <span class="nx">ea</span> <span class="nx">df</span> <span class="nx">b0</span> <span class="mi">3</span><span class="nx">b</span> <span class="nx">c3</span> <span class="mi">3</span><span class="nx">a</span> <span class="nx">e2</span> <span class="nx">fa</span> <span class="mi">0</span><span class="nx">e</span> <span class="nx">ed</span> <span class="mi">22</span> <span class="mi">90</span> <span class="mi">31</span> <span class="mi">01</span> <span class="mi">67</span> <span class="p">...</span> <span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Alice and Bob now compute a shared secret.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">aliceSecret</span> <span class="o">=</span> <span class="nx">aliceDH</span><span class="p">.</span><span class="nx">computeSecret</span><span class="p">(</span><span class="nx">bobDH</span><span class="p">.</span><span class="nx">getPublicKey</span><span class="p">(),</span> <span class="kc">null</span><span class="p">,</span> <span class="s2">&quot;hex&quot;</span><span class="p">);</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">bobSecret</span> <span class="o">=</span> <span class="nx">bobDH</span><span class="p">.</span><span class="nx">computeSecret</span><span class="p">(</span><span class="nx">aliceDH</span><span class="p">.</span><span class="nx">getPublicKey</span><span class="p">(),</span> <span class="kc">null</span><span class="p">,</span> <span class="s2">&quot;hex&quot;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>Alice and Bob have now derived a shared secret from each others&#8217; public keys.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">aliceSecret</span> <span class="o">===</span> <span class="nx">bobSecret</span><span class="p">;</span> <span class="c1">// =&gt; true</span>
</span></code></pre></td></tr></table></div></figure>


<p>Meanwhile, Eve has intercepted Alice and Bob&rsquo;s public keys and group.  Eve
tries to compute the same secret.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">eveDH</span> <span class="o">=</span> <span class="nx">crypto</span><span class="p">.</span><span class="nx">getDiffieHellman</span><span class="p">(</span><span class="nx">group</span><span class="p">);</span>
</span><span class='line'><span class="nx">eveDH</span><span class="p">.</span><span class="nx">generateKeys</span><span class="p">();</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">eveSecret</span> <span class="o">=</span> <span class="nx">eveDH</span><span class="p">.</span><span class="nx">computeSecret</span><span class="p">(</span><span class="nx">aliceDH</span><span class="p">.</span><span class="nx">getPublicKeys</span><span class="p">(),</span> <span class="kc">null</span><span class="p">,</span> <span class="s2">&quot;hex&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="nx">eveSecret</span> <span class="o">===</span> <span class="nx">aliceSecret</span><span class="p">;</span> <span class="c1">// =&gt; false</span>
</span></code></pre></td></tr></table></div></figure>


<p>This is because Alice&rsquo;s secret is derived from Alice and Bob&rsquo;s private keys,
which Eve does not have.  Eve may not realize her secret is not the same as
Alice and Bob&rsquo;s until later.</p>

<p>That was asymmetric encryption; using different keys.  The shared secret may
now be used in symmetric encryption; using the same keys.</p>

<p>Alice creates a symmetric block cypher using her favorite algorithm, a hash of
their secret as a key, and random bytes as an initialization vector.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">cypher</span> <span class="o">=</span> <span class="s2">&quot;aes-256-ctr&quot;</span><span class="p">;</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">hash</span> <span class="o">=</span> <span class="s2">&quot;sha256&quot;</span><span class="p">;</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">aliceIV</span> <span class="o">=</span> <span class="nx">crypto</span><span class="p">.</span><span class="nx">randomBytes</span><span class="p">(</span><span class="mi">128</span><span class="p">);</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">aliceHashedSecret</span> <span class="o">=</span> <span class="nx">crypto</span><span class="p">.</span><span class="nx">createHash</span><span class="p">(</span><span class="nx">hash</span><span class="p">).</span><span class="nx">update</span><span class="p">(</span><span class="nx">aliceSecret</span><span class="p">).</span><span class="nx">digest</span><span class="p">(</span><span class="s2">&quot;binary&quot;</span><span class="p">);</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">aliceCypher</span> <span class="o">=</span> <span class="nx">crypto</span><span class="p">.</span><span class="nx">createCypher</span><span class="p">(</span><span class="nx">cypher</span><span class="p">,</span> <span class="nx">aliceHashedSecret</span><span class="p">,</span> <span class="nx">aliceIV</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>Alice then uses her cypher to encrypt her message to Bob.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">cypherText</span> <span class="o">=</span> <span class="nx">aliceCypher</span><span class="p">.</span><span class="nx">update</span><span class="p">(</span><span class="s2">&quot;...&quot;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>Alice then sends the cypher text, cypher, and hash to Bob.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">cypherText</span><span class="o">:</span>
</span><span class='line'> <span class="o">&lt;</span><span class="nx">Buffer</span> <span class="nx">bd</span> <span class="mi">29</span> <span class="mi">96</span> <span class="mi">83</span> <span class="nx">fa</span> <span class="nx">a8</span> <span class="mi">7</span><span class="nx">d</span> <span class="mi">9</span><span class="nx">c</span> <span class="nx">ea</span> <span class="mi">90</span> <span class="nx">ab</span><span class="o">&gt;</span>
</span><span class='line'><span class="nx">cypher</span><span class="o">:</span>
</span><span class='line'> <span class="nx">aes</span><span class="o">-</span><span class="mi">256</span><span class="o">-</span><span class="nx">ctr</span>
</span><span class='line'><span class="nx">hash</span><span class="o">:</span>
</span><span class='line'> <span class="nx">sha256</span>
</span></code></pre></td></tr></table></div></figure>


<p>Bob now constructs a symmetric block cypher using the algorithm from Alice,
and a hash of their shared secret.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">bobHashedSecret</span> <span class="o">=</span> <span class="nx">crypto</span><span class="p">.</span><span class="nx">createHash</span><span class="p">(</span><span class="nx">hash</span><span class="p">).</span><span class="nx">update</span><span class="p">(</span><span class="nx">bobSecret</span><span class="p">).</span><span class="nx">digest</span><span class="p">(</span><span class="s2">&quot;binary&quot;</span><span class="p">);</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">bobCypher</span> <span class="o">=</span> <span class="nx">crypto</span><span class="p">.</span><span class="nx">createDecipher</span><span class="p">(</span><span class="nx">cypher</span><span class="p">,</span> <span class="nx">bobHashedSecret</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>Bob now decyphers the encrypted message (cypher text) from Alice.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">plainText</span> <span class="o">=</span> <span class="nx">bobCypher</span><span class="p">.</span><span class="nx">update</span><span class="p">(</span><span class="nx">cypherText</span><span class="p">);</span>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">plainText</span><span class="p">);</span> <span class="c1">// =&gt; &quot;I love you&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Eve has intercepted the cypher text, cypher, hash, and tries to decrypt it.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">eveHashedSecret</span> <span class="o">=</span> <span class="nx">crypto</span><span class="p">.</span><span class="nx">createHash</span><span class="p">(</span><span class="nx">hash</span><span class="p">).</span><span class="nx">update</span><span class="p">(</span><span class="nx">eveSecret</span><span class="p">).</span><span class="nx">digest</span><span class="p">(</span><span class="s2">&quot;binary&quot;</span><span class="p">);</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">eveCypher</span> <span class="o">=</span> <span class="nx">crypto</span><span class="p">.</span><span class="nx">createDecipher</span><span class="p">(</span><span class="nx">cypher</span><span class="p">,</span> <span class="nx">eveHashedSecret</span><span class="p">);</span>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">eveCypher</span><span class="p">.</span><span class="nx">update</span><span class="p">(</span><span class="nx">cypherText</span><span class="p">).</span><span class="nx">toString</span><span class="p">());</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// =&gt; ��_r](�i)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Here&rsquo;s where Eve realizes her secret is not correct.</p>

<p>This prevents passive eavesdropping, but not active man-in-the-middle (MITM)
attacks.  For example, how does Alice know that the messages she was supposedly
receiving from Bob actually came from Bob, not Eve posing as Bob?</p>

<p>Today, we use a system of certificates to provide authentication.  This system
certainly <a href="http://thenextweb.com/insider/2015/02/19/lenovo-caught-installing-adware-new-computers/">has</a> its
<a href="https://deadbeefsec.wordpress.com/2012/09/30/who-do-you-trust-why-certificate-authorities-are-a-cartel/">flaws</a>,
but it is what we use today.  This is more advanced topic that won&rsquo;t be covered
here.  Trust is a funny thing.</p>

<p>What&rsquo;s interesting to note is that the prime and generator used to generate
Diffie-Hellman public and private keys have strings that represent the
corresponding modular key exponential groups, ie &ldquo;modp14&rdquo;.  Web crypto&rsquo;s API
gives you
<a href="https://hg.mozilla.org/mozilla-central/file/d866ac7f8606/dom/crypto/test/test_WebCrypto_DH.html#l30">finer grain control</a>
to specify the generator and
<a href="https://hg.mozilla.org/mozilla-central/file/d866ac7f8606/dom/crypto/test/test-vectors.js#l662">large prime number</a>
in a Typed Array.  I&rsquo;m not sure why this is; if it allows you to have finer
grain control, or allows you to support newer groups before the implementation
does?  To me, it seems like a source for errors to be made; hopefully someone
will make a library to provide these prime/generator pairs.</p>

<p>One issue with my approach is that I assumed that Alice and Bob both had
support for the same hashing algorithms, modular exponential key group, and
symmetric block cypher.  In the real world, this is not always the case.
Instead, it is much more common for the client to broadcast publicly all of the
algorithms it supports, and the server to pick one.  This list of algorithms is
called a &ldquo;suite,&rdquo; ie &ldquo;cypher suit.&rdquo; I learned this the hard way recently trying
to
<a href="https://stribika.github.io/2015/01/04/secure-secure-shell.html">upgrade</a>
the <a href="https://wiki.mozilla.org/Security/Guidelines/OpenSSH">cypher suit</a>
on my ssh server and finding out that
<a href="https://mochtu.de/2015/01/07/updating-openssh-on-mac-os-x-10-10-yosemite/">my client did not support the lastest cyphers</a>. In this case, Alice and Bob might not have the same
versions of Node.js, which statically link their own versions of OpenSSL. Thus,
one should use <code>cryto.getCiphers()</code> and <code>crypto.getHashes()</code> before assuming
the party they&rsquo;re communicating to can do the math to decrypt. We&rsquo;ll see &ldquo;cypher
suites&rdquo; come up again in TLS handshakes. The NSA
<a href="http://en.wikipedia.org/wiki/NSA_Suite_B_Cryptography">publishes a list of endorsed cryptographic components</a>,
for what it&rsquo;s worth.  There are also neat tricks we can do to prevent the
message from being decrypted at a later time should the private key be
compromised and encrytped message recorded, called Perfect Forward Secrecy.</p>

<p>Let&rsquo;s take a look now at how a browser does a TLS handshake.  Here&rsquo;s a
capture from Wireshark of me navigating to <a href="https://google.com.">https://google.com.</a> First we have a
TLSv1.2 Client Hello to start the handshake.  Here we can see a list of the
cypher suites.</p>

<p><img class="center" src="http://nickdesaulniers.github.io/images/tls_1_client_hello.png"></p>

<p>Next is the response from the server, a TLSv1.2 Server Hello.  Here you can see
the server has picked a cypher to use.</p>

<p><img class="center" src="http://nickdesaulniers.github.io/images/tls_2_server_hello.png"></p>

<p>The server then sends its certificate, which contains a copy of its public key.</p>

<p><img class="center" src="http://nickdesaulniers.github.io/images/tls_3_server_cert.png"></p>

<p>Now that we&rsquo;ve agreed on a cypher suite, the client now sends its public key.
The server sets up a session, that way it may abbreviate the handshake in the
future. Finally, the client may now start making requests to the server with
encrypted application data.</p>

<p><img class="center" src="http://nickdesaulniers.github.io/images/tls_4_key_exchange.png"></p>

<p>For more information on TLS handshakes, you should read
<a href="https://www.igvita.com/">Ilya Grigorik&rsquo;s</a>
High Performance Browser Networking book chapter
<a href="http://chimera.labs.oreilly.com/books/1230000000545/ch04.html#TLS_HANDSHAKE">TLS Handshake</a>,
<a href="https://wiki.mozilla.org/Security/Server_Side_TLS#DHE_handshake_and_dhparam">Mozilla OpSec&rsquo;s fantastic wiki</a>,
and
<a href="http://security.stackexchange.com/questions/20803/how-does-ssl-tls-work/20833">this exellent Stack Exchange post</a>.
As you might imagine, all of these back and forth trips made during the TLS
handshake add latency overhead when compared to unencrypted HTTP requests.</p>

<p>I hope this post helped you understand how we can use cryptography to exchange
secret information through public channels.  This isn&rsquo;t enough information to
implement a perfectly secure system; end to end security means one single
mistake can compromise the entire system.  Peer review and open source,
<a href="https://danielmiessler.com/writing/cryptography_opensource/">battle tested</a>
implementations
<a href="http://dodcio.defense.gov/OpenSourceSoftwareFAQ.aspx#Q%3a_Doesn.27t_hiding_source_code_automatically_make_software_more_secure.3F">go a long way</a>.</p>

<blockquote><p>A cryptosystem should be secure even if everything about the system, except the key, is public knowledge.</p><footer><strong>Kerckhoffs&#8217;s principle</strong></footer></blockquote>


<p>I wanted to write this post because I believe abstinence-only crypto education
isn&rsquo;t working and I cant stand when anyone acts like part of a cabal from their
ivory tower to those trying to learn new things.
Someone will surely cite
<a href="http://matasano.com/articles/javascript-cryptography/">Javascript Cryptography Considered Harmful</a>,
which while valid, misses my point of simply trying to show people more concrete
basics with code examples.
The first crypto system you implement will have its holes, but you
can&rsquo;t go from ignorance of crypto to perfect knowledge without implementing a
few imperfect systems.  Don&rsquo;t be afraid to, just don&rsquo;t start with trying to protect
high value data.  Crypto is dangerous, because it can be difficult to
impossible to tell when your system fails.
<a href="https://nickdesaulniers.github.io/blog/2014/04/18/lets-write-some-x86-64/">Assembly</a>
is also akin to juggling knives, but at least
you&rsquo;ll usually segfault if you mess up and program execution will halt.</p>

<p>With upcoming APIs like
<a href="http://www.w3.org/TR/service-workers/#security-considerations">Service Workers requiring TLS</a>,
protocols like <a href="http://http2.github.io/faq/#does-http2-require-encryption">HTTP2</a>,
pushes for all <a href="http://blog.codinghorror.com/should-all-web-traffic-be-encrypted/">web traffic to be encrypted</a>,
and <a href="https://nickdesaulniers.github.io/blog/2013/07/03/why-ill-be-marching-this-4th/">shitty things governments</a>,
<a href="http://www.theguardian.com/technology/2015/jan/16/david-cameron-encryption-lavabit-ladar-levison">politicians</a>,
and <a href="https://www.youtube.com/watch?v=fpbOEoRrHyU">ISPs</a> do,
web developers are going to have to start boning up on their crypto knowledge.</p>

<p>What are your recommendations for correctly learning crypto?  Leave me some
thoughts in the comments below.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Writing my first technical book chapter]]></title>
    <link href="http://nickdesaulniers.github.io/blog/2015/01/25/writing-my-first-book-chapter/"/>
    <updated>2015-01-25T20:50:00-08:00</updated>
    <id>http://nickdesaulniers.github.io/blog/2015/01/25/writing-my-first-book-chapter</id>
    <content type="html"><![CDATA[<p>It&rsquo;s a feeling of immense satisfaction when we complete a major achievement.
Being able to say &ldquo;it&rsquo;s done&rdquo; is such a great stress relief.  Recently, I
completed work on my first publication, a chapter about Emscripten for the
upcoming book
<a href="http://www.crcpress.com/product/isbn/9781498716079">WebGL Insights</a>
to be published by CRC Press in time for
<a href="http://s2015.siggraph.org/">SIGGRAPH 2015</a>.</p>

<p>One of the life goals I&rsquo;ve had for a while is writing a book.  A romantic idea
it seems to have your ideas transcribed to a medium that will outlast your
bones.  It&rsquo;s enamoring to hold books from long dead authors, and see that their
ideas are still valid and powerful.  Being able to write a book, in my eyes,
provides some form of life after death.  Though, one could imagine ancestors
reading blog posts from long dead relatives via utilities like the
<a href="https://web.archive.org/web/20141218200253/http://nickdesaulniers.github.io/">Internet Archive&rsquo;s WayBack Machine</a>.</p>

<p>Writing about highly technical content places an upper limit on the usefulness
of the content, and shows as &ldquo;dated&rdquo; quickly.  A book I recently ordered was
<a href="http://shop.oreilly.com/product/0636920033707.do">Scott Meyers&#8217; Effective Modern C++</a>.
This title strikes me, because what
exactly do we consider <em>modern</em> or <em>contemporary</em>?  Those adjectives only make
sense in a time limited context.  When C++ undergoes another revolution,
Scott&rsquo;s book may become irrelevant, at which point the adjective <em>modern</em>
becomes incorrect.  Not that I think Scott&rsquo;s book or my own is time-limited in
usefulness; more that technical books&#8217; duration of usefulness is significantly
less than philosophical works like <em>1984</em> or <em>Brave New World</em>.  Almost like having
a record in a sport is a feather in one&rsquo;s cap, until the next best thing comes
along and you&rsquo;re forgotten to time.</p>

<p>Somewhat short of my goal of writing an entire book, I only wrote a single
chapter for a book.  It&rsquo;s interesting to see that a lot of graphics programming
books seem to follow the format of one author per chapter or at least multiple
authors.  Such book series as <em>GPU Gems</em>, <em>Shader X</em>, and <em>GPU Pro</em> follow this
pattern, which is interesting.  After seeing how much work goes into one
chapter, I think I&rsquo;m content with not writing an entire book, though I may
revisit that decision later in life.</p>

<p>How did this all get started?  I had followed Graham Sellers on Twitter and saw
<a href="http://octopress.org/2015/01/15/octopress-3.0-is-coming/">a tweet from him</a>
about a call to authors for WebGL Insights.  Explicitly in the linked to page
under the call for authors was interest in proposals about Emscripten and
asm.js.</p>

<p><a href="https://twitter.com/grahamsellers/status/504974663848456193">Tweet</a></p>

<p>At the time, I was headlong into a project helping Disney port Where&rsquo;s My Water
from C++ to JavaScript using Emscripten.  I was intimately familiar with
Emscripten, having been trained by one of its most prolific contributors,
<a href="http://clb.demon.fi/">Jukka Jylänki</a>.
Also, Emscripten&rsquo;s creator,
<a href="http://mozakai.blogspot.com/">Alon Zakai</a>, sat on the other side
of the office from me, so I was constantly pestering him about how to do
different things with Emscripten.  The #emscripten irc channel on
irc.mozilla.org is very active, but there&rsquo;s no substitute for being able to
have a second pair of eyes look over your shoulder when something is going
wrong.</p>

<p>Knowing Emscripten&rsquo;s strengths and limitations, seeing interest in the subject
I knew a bit about (but wouldn&rsquo;t consider myself an expert in), and having the
goal of writing something to be published in book form, this was my opportunity
to seize.</p>

<p>I wrote up a quick proposal with a few figures about why Emscripten was
important and how it worked, and sent it off with fingers crossed.  Initially,
I was overjoyed to learn when my proposal was accepted, but then there was a
slow realization that I had a lot of work to do.  The editor,
<a href="http://www.seas.upenn.edu/~pcozzi/">Patrick Cozzi</a>, set up
<a href="https://github.com/WebGLInsights/WebGLInsights-1">a GitHub repo</a>
for our additional code and figures, a mailing
list, and sent us a chapter template document detailing the process.  We had 6
weeks to write the rough draft, then 6 weeks to work with reviewers to get the
chapter done.  The chapter was written as a Google Doc, so that we could have
explicit control over who we shared the document with, and what kinds of
editing power they had over the document.  I think this approach worked well.</p>

<p>I had most of the content written by week 2.  This was surprising to me,
because I&rsquo;m a heavy procrastinator.  The only issue was that the number of
pages I wrote was double the allowed amount; way over page count.  I was
worried about the amount of content, but told myself to try not to be attached
to the content, just as you shouldn&rsquo;t stay attached with your code.</p>

<p>I took the additional 4 weeks I had left to finish the rough draft to invite
some of my friends and coworkers to provide feedback.  It&rsquo;s useful to have a
short list of people who have ever offered to help in this regard or owe you
one.  You&rsquo;ll also want a diverse team of reviewers that are either close to the
subject matter, or approaching it as new information.  This allows you to stay
technically correct, while not presuming your readers know everything that you
do.</p>

<p>The strategy worked out well; some of the content I had initially written about
how JavaScript VMs and JITs speculate types was straight up wrong.  While it
played nicely into the narrative I was weaving, someone more well versed in
JavaScript virtual machines would be able to call BS on my work.  The reviewers
who weren&rsquo;t as close to subject matter were able to point out when logical
progressions did not follow.</p>

<p>Fear of being publicly corrected prevents a lot of people from blogging or
contributing to open source.  It&rsquo;s important to not stay attached to your work,
especially when you need to make cuts.  When push came to shove, I did have
difficulty removing sections.</p>

<p>Lets say you have three sequential sections: A, B, &amp; C.  If section A and
section B both set up section C, and someone tells you section B has to go, it
can be difficult to cut section B because as the author you may think it&rsquo;s
really important to include B for the lead into C.  My recommendation is sum up
the most important idea from section B and add it to the end of section A.</p>

<p>For the last six weeks, the editor, some invited third parties, and other
authors reviewed my chapter.  It was great that others even followed along and
pointed out when I was making assumptions based on specific compiler or
browser.
<a href="http://erich.realtimerendering.com/">Eric Haines</a> even reviewed my chapter!
That was definitely a highlight for me.</p>

<p>We used a Google Sheet to keep track of the state of reviews.  Reviewers were
able to comment on sections of the chapter.  What was nice was that you were
able to keep using the comment as a thread, responding directly to a
criticism.  What didn&rsquo;t work so well was then once you edited that line, the
comment and thus the thread was lost.</p>

<p>Once everything was done, we zipped up the assets to be used as figures,
submitted bios, and wrote a tips and tricks section.  Now, it&rsquo;s just a long
waiting game until the book is published.</p>

<p>As far as dealing with the publisher, I didn&rsquo;t have much interaction.  Since
the book was assembled by a dedicated editor, Patrick did most of the leg work.
I only asked that what royalties I would receive be donated to Mozilla, which
the publisher said would be too small (est $250) to be worth the paperwork.  It
would be against my advice if you were thinking of writing a technical book for
the sole reason of monetary benefit.  I&rsquo;m excited to be receiving a hard cover
copy of the book when it&rsquo;s published.  I&rsquo;ll also have to see if I can find my
way to SIGGRAPH this year; I&rsquo;d love to meet my fellow authors in person and
potential readers.  Just seeing the list of authors was really a who&rsquo;s-who of
folks doing cool WebGL stuff.</p>

<p>If you&rsquo;re interested in learning more about working with Emscripten, asm.js,
and WebGL, I sugguest you pick up a copy of WebGL Insights in August when it&rsquo;s
published.  A big thank you to my reviewers: Eric Haines, Havi Hoffman,
Jukka Jylänki, Chris Mills, Traian Stanev, Luke Wagner, and Alon Zakai.</p>

<p>So that was a little bit about my first experience with authorship.  I&rsquo;d be
happy to follow up with any further questions you might have for me.  Let me
know in the comments below, on Twitter, HN, or wherever and I&rsquo;ll probably find
it!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Let's Write Some x86-64]]></title>
    <link href="http://nickdesaulniers.github.io/blog/2014/04/18/lets-write-some-x86-64/"/>
    <updated>2014-04-18T16:16:00-07:00</updated>
    <id>http://nickdesaulniers.github.io/blog/2014/04/18/lets-write-some-x86-64</id>
    <content type="html"><![CDATA[<blockquote><p>&#8230;&#8220;&#8216;Our speech interposes itself between apprehension and truth like a dusty pane or warped mirror.  The tongue of Eden was like a flawless glass; a light of total understanding streamed through it.  Thus Babel was a second Fall.&#8217; And Isaac the Blind, an early Kabbalist, said that, to quote Gershom Scholem&#8217;s translation, &#8216;The speech of men is connected with divine speech and all language whether heavenly or human derives from one source: the Divine Name.&#8217; The practical kabbalists, the sorcerers, bore the title Ba&#8217;al Shem, meaning &#8216;master of the divine name.&#8217;&#8221;</p><p>&#8220;The machine language of the world,&#8221; Hiro says.</p><p>&#8220;Is this another analogy?&#8221;</p><p>&#8220;Computers speak machine language,&#8221; Hiro says.  &#8220;It&#8217;s written in ones and zeroes - binary code.  At the lowest level, all computers are programmed with strings of ones and zeroes.  When you program in machine language, you are controlling the computer at its brainstem, the root of its existence.  It&#8217;s the tongue of Eden.  But it&#8217;s very difficult to work in machine language because you go crazy after a while, working at such a minute level.  So a whole Babel of computer languages has been created for programmers: FORTRAN, BASIC, COBOL, LISP, Pascal, C, PROLOG, FORTH.  You talk to the computer in one of these languages, and a piece of software called a compiler converts it into machine language.  But you never can tell exactly what the compiler is doing.  It doesn&#8217;t always come out the way you want.  Like a dusty pane or warped mirror. A really advanced hacker comes to understand the true inner workings of the machine – he sees through the language he&#8217;s working in and glimpses the secret functioning of the binary code – becomes a Ba&#8217;al Shem of sorts.&#8221;</p><footer><strong>Hiro Protagonist and The Librarian</strong> <cite>Snow Crash by Neal Stephenson</cite></footer></blockquote>


<p>This a beautiful quote, one that I think truly captures the relationship between
higher level languages and the Instruction Set Architecture (ISA)&rsquo;s machine
code, though this is from the angle of controlling the machine with its
implementation specific quirks which can detract from what you&rsquo;re actually
trying to do.</p>

<p>This blog is meant for those who don&rsquo;t know x86-64 assembly, but maybe know a
little C, and are curious about code generation.  Or maybe if you&rsquo;ve ever tried
to hand write x86-64 assembly, and got stuck trying to understand the tooling or
seemingly random segfaults from what appears to be valid instructions.</p>

<p>I really enjoy writing code in CoffeeScript
and C, so I have a quick anecdote about CoffeeScript though you don&rsquo;t need to
know the language.  When writing CoffeeScript, I find myself frequently using a
<a href="https://github.com/kchmck/vim-coffee-script">vim plugin</a>
to view the emitted JavaScript.  I
<strong>know</strong> when CoffeeScript emits less than optimal JavaScript.  For example in
the code:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="nv">nick = </span><span class="nf">-&gt;</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span> <span class="nx">x</span> <span class="k">for</span> <span class="nx">x</span> <span class="k">in</span> <span class="p">[</span><span class="mi">0</span><span class="p">..</span><span class="mi">100</span><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>I know that CoffeeScript is going to push the results of the call to
<code>console.log</code> into an array
and return that, because of the implicit return of the final expression in a
function body, which in this case happens to be a for loop (array comprehension
being treated itself as an expression).  The emitted JavaScript looks like:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">nick</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="nx">nick</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">x</span><span class="p">,</span> <span class="nx">_i</span><span class="p">,</span> <span class="nx">_results</span><span class="p">;</span>
</span><span class='line'>  <span class="nx">_results</span> <span class="o">=</span> <span class="p">[];</span>
</span><span class='line'>  <span class="k">for</span> <span class="p">(</span><span class="nx">x</span> <span class="o">=</span> <span class="nx">_i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">_i</span> <span class="o">&lt;=</span> <span class="mi">100</span><span class="p">;</span> <span class="nx">x</span> <span class="o">=</span> <span class="o">++</span><span class="nx">_i</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">_results</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">x</span><span class="p">));</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">return</span> <span class="nx">_results</span><span class="p">;</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>By putting a seemingly meaningless undefined statement as the final statement in
the function body, we can significantly reduce what the function is doing and
decrease the number of allocations:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="nv">nick = </span><span class="nf">-&gt;</span>
</span><span class='line'>  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span> <span class="nx">x</span> <span class="k">for</span> <span class="nx">x</span> <span class="k">in</span> <span class="p">[</span><span class="mi">0</span><span class="p">..</span><span class="mi">100</span><span class="p">]</span>
</span><span class='line'>  <span class="kc">undefined</span>
</span></code></pre></td></tr></table></div></figure>


<p>emits:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">nick</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">x</span><span class="p">,</span> <span class="nx">_i</span><span class="p">;</span>
</span><span class='line'>  <span class="k">for</span> <span class="p">(</span><span class="nx">x</span> <span class="o">=</span> <span class="nx">_i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">_i</span> <span class="o">&lt;=</span> <span class="mi">100</span><span class="p">;</span> <span class="nx">x</span> <span class="o">=</span> <span class="o">++</span><span class="nx">_i</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">x</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">return</span> <span class="k">void</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>That <code>return void 0</code> may seem odd, but functions in JavaScript without an
explicit return value return <code>undefined</code>, but since the <code>undefined</code> identifier
can be reassigned to, the expression <code>void 0</code>
<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/void">evaluates to the value</a>
<code>undefined</code>.</p>

<p>You can see that making the CoffeeScript function body slightly longer and
adding a seemingly meaningless lone undefined statement at the end of the
function body, the emitted JavaScript does not allocate an array or waste time
pushing the results of <code>console.log</code>, which would be <code>undefined</code>, into that
array a hundred times.  This reminds me of how seemingly meaningless noop
instructions can keep a processor&rsquo;s pipeline full by preventing stalls, though
a pipeline stall doesn&rsquo;t change the correctness of a program, so it&rsquo;s an
imperfect analogy.</p>

<p>Now I&rsquo;m not saying that you should be thinking about these kinds of
optimizations when programming at such a high level, as they might be premature.
I shared with you this example because while writing C code, and reading
<a href="http://www.drdobbs.com/parallel/graphics-programming-black-book/184404919">Michael Abrash&rsquo;s Graphics Programming Black Book</a>,
<em>I wondered to myself if hardcore C
programmers also would know the equivalent assembly instructions that would be
emitted from their higher level C code</em> (before optimizing compilers even
existed).</p>

<p>In college, I was taught 68k and MIPS ISAs.
To understand x86-64 we need to be able to write and run it.
Unfortunately, I did not have the training to know how to do so.  My 68k code
was run on a MCU from a FreeScale IDE in Windows, so the process might as well
have been indistinguishable from magic to me.  I understood that you&rsquo;d start
with low level source, in (somewhat) human readable instructions that would be
converted to binary representing op codes.  The assembler would then translate
the assembly into non-executable object files that contained binary code that
had placeholders for sections of code defined in other object files.  The linker
would then be used to replace the placeholders with the now combined binary
code&rsquo;s relative positions and then converted into an executable.  But how do I
do this from my x86-64 machine itself?  The goto book I&rsquo;ve been recommended many
times is
<a href="http://www.wrox.com/WileyCDA/WroxTitle/productCd-0764579010.html">Professional Assembly Language by Richard Blum</a>,
but this book only
covers x86, not x86-64.  There&rsquo;s been some very big changes to the ABI between
x86 and x86-64.  You may be familiar with Application Programmer Interfaces
(<a href="http://en.wikipedia.org/wiki/Api">APIs</a>),
but what is an
<a href="http://en.wikipedia.org/wiki/Application_binary_interface">Application Binary Interface</a>?
I think of an ABI as how
two pieces of native code interact with one another, such as calling convention
(how arguments are passed to functions at the ISA level).</p>

<p>I&rsquo;m very lucky to have the privilege to work with a compiler engineer, Dan Gohman,
who has worked on a variety of compilers.  I was citing a
<a href="http://lists.cs.uiuc.edu/pipermail/llvmdev/2011-October/043719.html">particular email of Dan</a>&rsquo;s
for some time before he came to work with us, when I
would talk about how the naming of LLVM gives the imagery of a virtual machine,
though it&rsquo;s more so a compiler intermediate representation.  Dan is an amazing
and patient resource who has helped me learn more about the
subtleties of the x86-64 ABI.  Throughout this blog, I&rsquo;ll copy some responses to
questions I&rsquo;ve had answered by Dan.</p>

<p>Our first goal is to write an x86-64 program that does nothing, but that we can
build.  Assembly files typically have the .s file extension, so let&rsquo;s fire up
our text editor and get started.  I&rsquo;ll be doing my coding from OSX 10.8.5, but
most examples will work from Linux.  All of my symbol names, like _main, _exit,
and _printf, are prefixed with
underscores, as Darwin requires. Most Linux systems don&rsquo;t require this, so
Linux users should omit the leading underscores from all such names.  Unfortunately,
I cannot figure out how to link with ld in Linux, so I recommend trying to
understand what <code>gcc -v your_obj_file.o</code> is doing, and
<a href="http://www.lisha.ufsc.br/teaching/os/exercise/hello.html">this might help</a>.
Let me know in the comments if there&rsquo;s an easy way to use ld when linking your
object files from linux and I&rsquo;ll be happy to post an edit.</p>

<p>Let&rsquo;s start with this fragment and get it building, then I&rsquo;ll cover what it&rsquo;s
doing.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='gas'><span class='line'><span class="na">.text</span>
</span><span class='line'><span class="na">.globl</span> <span class="no">_main</span>
</span><span class='line'><span class="nl">_main:</span>
</span><span class='line'>  <span class="nf">subq</span> <span class="no">$8</span><span class="p">,</span> <span class="nv">%rsp</span>
</span><span class='line'>  <span class="nf">movq</span> <span class="no">$0</span><span class="p">,</span> <span class="nv">%rdi</span>
</span><span class='line'>  <span class="nf">call</span> <span class="no">_exit</span>
</span></code></pre></td></tr></table></div></figure>


<p>Let&rsquo;s use OSX&rsquo;s built in assembler (as) and linker (ld).</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='gas'><span class='line'><span class="nf">as</span> <span class="no">nothing.s</span> <span class="p">-</span><span class="no">o</span> <span class="no">nothing.o</span>
</span><span class='line'><span class="nf">ld</span> <span class="p">-</span><span class="no">lc</span> <span class="p">-</span><span class="no">macosx_version_min</span> <span class="mi">10</span><span class="no">.8.5</span> <span class="no">nothing.o</span> <span class="p">-</span><span class="no">o</span> <span class="no">nothing</span>
</span></code></pre></td></tr></table></div></figure>


<p>We should now be able to run <code>./nothing</code> without any segfaults.  Without
<code>-macosx_version_min 10.8.5</code> I get a warning and my executable segfaults.</p>

<p>Now let&rsquo;s create a basic generic Makefile to help us automate these steps.
Watch your step; archaic syntax ahead.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='make'><span class='line'><span class="nv">SOURCES</span> <span class="o">=</span> <span class="k">$(</span>wildcard *.s<span class="k">)</span>
</span><span class='line'><span class="nv">OBJECTS</span> <span class="o">=</span> <span class="k">$(</span>SOURCES:.s<span class="o">=</span>.o<span class="k">)</span>
</span><span class='line'><span class="nv">EXECUTABLES</span> <span class="o">=</span> <span class="k">$(</span>OBJECTS:.o<span class="o">=</span><span class="k">)</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Generic rule</span>
</span><span class='line'><span class="c"># $&lt; is the first dependency name</span>
</span><span class='line'><span class="c"># $@ is the target filename</span>
</span><span class='line'><span class="nf">%.o</span><span class="o">:</span> <span class="m">%.s</span>
</span><span class='line'>  as <span class="nv">$&lt;</span> -o <span class="nv">$@</span>
</span><span class='line'>
</span><span class='line'><span class="nf">default</span><span class="o">:</span> <span class="m">$(OBJECTS)</span>
</span><span class='line'>  <span class="k">for </span>exe in <span class="k">$(</span>EXECUTABLES<span class="k">)</span> ; <span class="k">do</span> <span class="se">\</span>
</span><span class='line'>    ld -lc -macosx_version_min 10.8.5 <span class="nv">$$</span>exe.o -o <span class="nv">$$</span>exe ; <span class="se">\</span>
</span><span class='line'>  <span class="k">done</span>
</span><span class='line'>
</span><span class='line'><span class="nf">.PHONY</span><span class="o">:</span> <span class="m">clean</span>
</span><span class='line'><span class="nf">clean</span><span class="o">:</span>
</span><span class='line'>  rm *.o
</span><span class='line'>  <span class="k">for </span>exe in <span class="k">$(</span>EXECUTABLES<span class="k">)</span> ; <span class="k">do</span> <span class="se">\</span>
</span><span class='line'>    rm <span class="nv">$$</span>exe ; <span class="se">\</span>
</span><span class='line'>  <span class="k">done</span>
</span></code></pre></td></tr></table></div></figure>


<p>By the time you read this, I&rsquo;ve already forgotten how half of that code works.
But, this will allow us to run <code>make</code> to assemble and link all of our .s files
individually, and <code>make clean</code> to remove our object and executable files.
Surely you can whip up a better build script?  Let me know in the comments
below.</p>

<p>So now let&rsquo;s go back to our assembly file and go over it line by line.  Again,
it looks like:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='gas'><span class='line'><span class="na">.text</span>
</span><span class='line'><span class="na">.globl</span> <span class="no">_main</span>
</span><span class='line'><span class="nl">_main:</span>
</span><span class='line'>  <span class="nf">subq</span> <span class="no">$8</span><span class="p">,</span> <span class="nv">%rsp</span>
</span><span class='line'>  <span class="nf">movq</span> <span class="no">$0</span><span class="p">,</span> <span class="nv">%rdi</span>
</span><span class='line'>  <span class="nf">call</span> <span class="no">_exit</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>.text</code> is the text section.  This section defines the instructions that the
processor will execute.  There can be other sections as well.  We&rsquo;ll see more
later, but the &ldquo;data&rdquo; section
typically has static variables that have been initialized with non null (and non
zero) values, where as &ldquo;bss&rdquo; will have static but non initialized values.  Also,
there will be a heap and a stack although you don&rsquo;t declare them as you would
for text or data.</p>

<p>Next up is the global directive.  The global directive tells the linker that
there will be a section named _main that it may call into, making the _main
section visible to other sections.  You may be
<a href="http://stackoverflow.com/a/5908708/1027966">wondering</a>
why directives and sections both begin with a dot.</p>

<blockquote><p>&#8217;.&#8221; isn&#8217;t a valid identifier character in C, so way back when it became common to use &#8216;.&#8221; as a prefix in the assembler and linker in order to avoid clashing with C symbol names. This unfortunately was used for both section names and directives, because both can appear in contexts where a simple parser wouldn&#8217;t be able to disambiguate otherwise.</p><p>I don&#8217;t know why they used the same convention for directives and section names, but they did, and it&#8217;s not practical to change it now.</p><footer><strong>Dan Gohman</strong></footer></blockquote>


<p>Ok now the subtraction instruction.  We&rsquo;ve got a bit to go over with just this
one line.  The first is the instruction itself.  The sub instruction has
numerous suffixes that specify how many bytes to operate on.  The typical
convention for numerous instructions is to have a suffix of b for 1 byte
(8 bits), w for a word (2 bytes, 16 bits), l for a long or
double word (4 bytes, 32 bits), and q for a quad word (8 bytes, 64 bits).
Leaving off the suffix, the assembler will try and guess based off of the
operands, which can lead to obscure bugs.  So subq operates on 64 bits.
Extending this we should be able to recognize that subb operates on 8 bits, subw
operates on 16 bits, subl operates on 32 bits, and subq operates on 64 bits.
What&rsquo;s important to understand is that instruction suffix is dictated by the
inputs and destination size.  See Figure 3-3 of the
<a href="http://amd-dev.wpengine.netdna-cdn.com/wordpress/media/2012/10/24592_APM_v11.pdf">AMD64 ABI</a>.</p>

<p>Ok now let&rsquo;s look at the full instruction <code>subq $8, %rsp</code>.  The current order of
the operands is known as the AT&amp;T syntax, where the destination is specified
last
(<a href="http://stackoverflow.com/q/972602/1027966">as opposed to the Intel syntax</a>,
where the destination follows the instruction name ex. <code>subq rsp, 8</code>).</p>

<blockquote><p>I&#8217;m biased towards AT&T-syntax because GCC, LLVM, and icc (at least on Unix-like platforms) all use it, so it&#8217;s what I&#8217;m used to by necessity. People familiar with assembly languages on other platforms sometimes find it feels backwards from what they&#8217;re used to, but it is learnable.</p><footer><strong>Dan Gohman</strong></footer></blockquote>


<p>I&rsquo;m writing my examples in AT&amp;T syntax simply because when I compile my C code
from clang with the -S flag, or run my object files through gobjdump, I get AT&amp;T
syntax by default (though I&rsquo;m sure there are flags for either AT&amp;T or Intel
syntaxes).  Also, the ABI
docs are in AT&amp;T.  What are your thoughts on the two different syntaxes?  Let me
know in the comments below.</p>

<p>So when we say <code>subq $8, %rsp</code>, we&rsquo;re subtracting the immediate value of 8 from
the stack pointer (the register %rsp contains our stack pointer).  But
why are we doing this?  This is something that is left out from some of the
basic hello world assembly programs I&rsquo;ve seen.  This is the first ABI point I
want to make:</p>

<h2>x86-64 ABI point 1: function calls need the stack pointer to be aligned by a multiple of 16 bytes.</h2>

<p>By default, they are off by 8 on function entry.  See
Section 3.2.2 page 16 of the
<a href="http://www.x86-64.org/documentation_folder/abi-0.99.pdf">ABI</a>.</p>

<p>Why is the stack pointer misaligned by 8 bytes on function entry?  I&rsquo;m going to
punt on the answer to that for a bit, but I promise I&rsquo;ll come back to it.  The
most important thing is that that call instruction later on will fail unless we
align our stack pointer, which started out misaligned.  If we comment it out
(pound signs, #, comment out the rest of the line) and make our executable,
we&rsquo;ll get a segfault.  You could even add 8 bytes to the stack pointer and our
basic example would work (we just need a multiple of 16 remember), but when we
learn later (I promise) about how the stack works in x86-64, we&rsquo;ll see we can
mess things up by adding rather than subtracting.</p>

<p>Next up we&rsquo;re moving the immediate value 0x0 into %rdi.  You may have heard that
arguments to functions are pushed on the stack in reverse order, but that&rsquo;s an
old x86 convention.  With the addition of 8 more general purpose registers, we
now pass up to the first 6 arguments in registers (then push the rest, if any,
on the stack in reverse order).  The convention (in OSX and Linux) is our second
ABI point:</p>

<h2>x86-64 ABI point 2: The calling conventions for function invocations require passing integer arguments in the following sequence of registers: %rdi, %rsi, %rdx, %rcx, %r8, %r9, then pushing the rest on the stack in reverse order.</h2>

<p>See <a href="http://www.x86-64.org/documentation_folder/abi-0.99.pdf">section 3.2.3</a>
under &ldquo;Passing&rdquo;.  Warning:
<a href="http://msdn.microsoft.com/en-us/library/ms235286.aspx">Microsoft has a different calling convention</a>.
This is quite troubling to me, because I assumed that Instruction Set
Architectures were created so that the same code could run on two different
machines with the same microarchitecture, but because the ISA does not define
how arguments would be passed, this ambiguity is left up to the OS implementor
to decide.  Thus the same code may not run on two different machines with the
same microarchitecture if their operating systems are incompatible at the ABI
layer.</p>

<p><em>UPDATE</em>: Further, I just learned that <a href="http://nelhagedebugsshit.tumblr.com/post/84342207533/things-i-learned-writing-a-jit-in-go">Go, and C code compiled by 6c don’t use
the &ldquo;normal&rdquo; SysV ABI and calling convention, but have their own.</a></p>

<p>What our goal is is to call <code>exit(0);</code> where exit is defined in libc, which we
link against during the linking phase with with flag <code>-lc</code>.  This is another
punt on system calls.  So to invoke exit with the first integer argument of 0,
we first need to move the immediate value of 0x0 into %rdi.  Now if you run your
executable from your shell, then <code>echo $?</code>, you should see that the previous
command&rsquo;s exit code was 0.  Try changing the exit code to 42 and verify that it
works successfully.</p>

<p>Ok, well a program that does nothing is more boring than hello world.  Now that
we have our build setup out of the way, let&rsquo;s make a hello world program.  If
you&rsquo;re familiar with ASCII tables, we can use putchar from libc since we&rsquo;re
already linking to it.  Use <code>man putchar</code> to look at its signature and
<a href="http://www.asciitable.com/">this ASCII table</a> to move immediate values into a
certain register (remember the
calling convention, point #2) and make sure you setup the stack pointer before
any calls and exit after all other calls.</p>

<p>I&rsquo;ll leave that up to an exercise for the reader.  Let&rsquo;s use a string and
printf.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='gas'><span class='line'><span class="na">.data</span>
</span><span class='line'><span class="nl">_hello:</span>
</span><span class='line'>  <span class="na">.asciz</span> <span class="s">&quot;hello world\n&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="na">.text</span>
</span><span class='line'><span class="na">.globl</span> <span class="no">_main</span>
</span><span class='line'><span class="nl">_main:</span>
</span><span class='line'>  <span class="nf">subq</span> <span class="no">$8</span><span class="p">,</span> <span class="nv">%rsp</span>
</span><span class='line'>
</span><span class='line'>  <span class="nf">movb</span> <span class="no">$0</span><span class="p">,</span> <span class="nv">%al</span>
</span><span class='line'>  <span class="nf">leaq</span> <span class="no">_hello</span><span class="p">(</span><span class="nv">%rip</span><span class="p">),</span> <span class="nv">%rdi</span>
</span><span class='line'>  <span class="nf">call</span> <span class="no">_printf</span>
</span><span class='line'>
</span><span class='line'>  <span class="nf">movq</span> <span class="no">$0</span><span class="p">,</span> <span class="nv">%rdi</span>
</span><span class='line'>  <span class="nf">call</span> <span class="no">_exit</span>
</span></code></pre></td></tr></table></div></figure>


<p>First up is our data section <code>.data</code>.  I previously mentioned the data section
contains global non null and non 0 variables.  You can see here that the string
itself becomes part of the binary by using the unix command <code>strings</code> and
passing your executable as the first argument.  Further, if you pass your
executable to hexdump you can even see the ASCII codes in hex:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='gas'><span class='line'><span class="err">0001020</span> <span class="err">68</span> <span class="err">65</span> <span class="err">6</span><span class="nf">c</span> <span class="mi">6</span><span class="no">c</span> <span class="mi">6</span><span class="no">f</span> <span class="mi">20</span> <span class="mi">77</span> <span class="mi">6</span><span class="no">f</span> <span class="mi">72</span> <span class="mi">6</span><span class="no">c</span> <span class="mi">64</span> <span class="mi">0</span><span class="no">a</span> <span class="mi">00</span> <span class="mi">00</span> <span class="mi">00</span> <span class="mi">00</span>
</span></code></pre></td></tr></table></div></figure>


<p>Also, we can run our binary through objdump as well and see the string:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='gas'><span class='line'><span class="nf">gobjdump</span> <span class="p">-</span><span class="no">j</span> <span class="no">.data</span> <span class="p">-</span><span class="no">s</span> <span class="no">hello_world</span>
</span><span class='line'><span class="na">...</span>
</span><span class='line'><span class="nf">Contents</span> <span class="no">of</span> <span class="no">section</span> <span class="no">.data</span><span class="p">:</span>
</span><span class='line'> <span class="err">2020</span> <span class="err">68656</span><span class="nf">c6c</span> <span class="mi">6</span><span class="no">f20776f</span> <span class="mi">726</span><span class="no">c640a</span> <span class="mi">00</span>        <span class="no">hello</span> <span class="no">world..</span>
</span></code></pre></td></tr></table></div></figure>


<p>Ok so now we&rsquo;re moving an immediate value of 0x0 to %al.  %al is 1 byte wide, so
we use the b suffix on the mov instruction.  The next important point of the ABI
has to do with functions that use a variable number of arguments (varargs), like
printf does:</p>

<h2>x86-64 ABI point 3: Variadic functions need to have the number of vector arguments specified in %al.</h2>

<p>This will make printf debugging hard without.  Also in
<a href="http://www.x86-64.org/documentation_folder/abi-0.99.pdf">section 3.2.3 under passing</a>.</p>

<p>If you don&rsquo;t know what vector arguments are, no worries!  I&rsquo;m not going to cover
them.  Just know that without this, the contents of %al may work in a basic
example, where we haven&rsquo;t touched %al, %ax, %eax, or %rax yet, but we shouldn&rsquo;t
bank on it being 0x0.  In fact we shouldn&rsquo;t bank on most registers being
preserved after a function call.  Now&rsquo;s a good time to talk about volatility:</p>

<h2>x86-64 ABI point 4: Most registers are not preserved across function calls.</h2>

<p>Only %rbx, %rsp, %rbp, and %r12-%r15 (and some others) are.  These are called
&ldquo;call saved&rdquo; or &ldquo;non volatile&rdquo; registers.  The rest should be considered &ldquo;call
clobbered&rdquo; or &ldquo;volatile.&rdquo;  That means every time we invoke a call like printf,
we need to reset %al, since it is the lower 8 bits of %rax which is the 1st
return register, so it is always clobbered.</p>

<p>The next instruction loads the effective address of the string relative to the
current instruction pointer into %rdi, the first argument for printf.
<a href="https://developer.apple.com/library/mac/documentation/DeveloperTools/Reference/Assembler/040-Assembler_Directives/asm_directives.html">The .asciz directive</a> appends the null byte for us, since C strings are null
terminated.</p>

<p>With this knowledge, can you modify hello world to print &ldquo;hello world 42&rdquo;,
without putting 42 into the string in the data section?  Hint: you&rsquo;ll need a
placeholder in your string and need to know the x86-64 calling convention to
pass an additional argument to printf.</p>

<p>Finally, let&rsquo;s talk about the stack.  When we create automatic variables in C,
they are created in the segment called the stack.  On x86-64 the stack starts
at some arbitrary address (virtual memory backed by physical memory) and &ldquo;grows&rdquo;
downwards.  That is why we subtracted 8 bytes, rather than add 8 bytes to the
stack for alignment earlier.
<a href="http://eli.thegreenplace.net/2011/02/04/where-the-top-of-the-stack-is-on-x86/">The metaphor of a stack of plates is kinda upside-down</a>
as additional plates (variables) are going underneath the current
bottom plate if you can imagine, in this case.  The stack grows towards the
heap, and it is possible for them to collide if you don&rsquo;t ask the OS to expand
your data segment (sbrk).</p>

<p><img class="center" src="http://nickdesaulniers.github.io/images/stack.png"> <a href="http://mcfunley.com/the-debugger-extension-part-6-scanning-threads">credit</a></p>

<p>Let&rsquo;s say we want to call something like memset, which from <code>man memset</code> we can
see takes an address, a value to fill, and a number of bytes to fill.  The
equivalent of say this C code:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cp">#include &lt;stdio.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;string.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;inttypes.h&gt;</span>
</span><span class='line'><span class="kt">int</span> <span class="nf">main</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="kt">int8_t</span> <span class="n">array</span> <span class="p">[</span><span class="mi">16</span><span class="p">];</span>
</span><span class='line'>  <span class="n">memset</span><span class="p">(</span><span class="o">&amp;</span><span class="n">array</span><span class="p">,</span> <span class="mi">42</span><span class="p">,</span> <span class="mi">16</span><span class="p">);</span>
</span><span class='line'>  <span class="kt">int8_t</span><span class="o">*</span> <span class="n">ptr</span> <span class="o">=</span> <span class="n">array</span><span class="p">;</span>
</span><span class='line'>  <span class="n">printf</span><span class="p">(</span><span class="s">&quot;Current byte: %&quot;</span> <span class="n">PRId8</span> <span class="s">&quot;</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="o">*</span><span class="n">ptr</span><span class="p">);</span>
</span><span class='line'>  <span class="o">++</span><span class="p">(</span><span class="o">*</span><span class="n">ptr</span><span class="p">);</span>
</span><span class='line'>  <span class="n">printf</span><span class="p">(</span><span class="s">&quot;Current byte: %&quot;</span> <span class="n">PRId8</span> <span class="s">&quot;</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="o">*</span><span class="n">ptr</span><span class="p">);</span>
</span><span class='line'>  <span class="o">++</span><span class="n">ptr</span><span class="p">;</span>
</span><span class='line'>  <span class="n">printf</span><span class="p">(</span><span class="s">&quot;Current byte: %&quot;</span> <span class="n">PRId8</span> <span class="s">&quot;</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="o">*</span><span class="n">ptr</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Well, that might look like:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
</pre></td><td class='code'><pre><code class='gas'><span class='line'><span class="na">.data</span>
</span><span class='line'><span class="nl">_answer:</span>
</span><span class='line'>  <span class="na">.asciz</span> <span class="s">&quot;Current byte: %d\n&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="na">.text</span>
</span><span class='line'><span class="na">.globl</span> <span class="no">_main</span>
</span><span class='line'><span class="nl">_main:</span>
</span><span class='line'>  <span class="nf">subq</span> <span class="no">$8</span><span class="p">,</span> <span class="nv">%rsp</span>
</span><span class='line'>
</span><span class='line'>  <span class="nf">subq</span> <span class="no">$16</span><span class="p">,</span> <span class="nv">%rsp</span> <span class="c"># allocate 16B</span>
</span><span class='line'>  <span class="nf">leaq</span> <span class="p">(</span><span class="nv">%rsp</span><span class="p">),</span> <span class="nv">%rdi</span> <span class="c"># first arg, &amp;array</span>
</span><span class='line'>  <span class="nf">movq</span> <span class="no">$42</span><span class="p">,</span> <span class="nv">%rsi</span> <span class="c"># second arg, 42</span>
</span><span class='line'>  <span class="nf">movq</span> <span class="no">$16</span><span class="p">,</span> <span class="nv">%rdx</span><span class="p">,</span> <span class="c"># third arg, 16B</span>
</span><span class='line'>  <span class="nf">call</span> <span class="no">_memset</span>
</span><span class='line'>
</span><span class='line'>  <span class="nf">leaq</span> <span class="no">_answer</span><span class="p">(</span><span class="nv">%rip</span><span class="p">),</span> <span class="nv">%rdi</span>
</span><span class='line'>  <span class="nf">movq</span> <span class="no">$0</span><span class="p">,</span> <span class="nv">%rsi</span>
</span><span class='line'>  <span class="nf">movb</span> <span class="p">(</span><span class="nv">%rsp</span><span class="p">),</span> <span class="nv">%sil</span> <span class="c"># these two are equavlent to movzql (%rsp), %esi</span>
</span><span class='line'>  <span class="nf">movb</span> <span class="no">$0</span><span class="p">,</span> <span class="nv">%al</span>
</span><span class='line'>  <span class="nf">call</span> <span class="no">_printf</span>
</span><span class='line'>
</span><span class='line'>  <span class="nf">incq</span> <span class="p">(</span><span class="nv">%rsp</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="nf">leaq</span> <span class="no">_answer</span><span class="p">(</span><span class="nv">%rip</span><span class="p">),</span> <span class="nv">%rdi</span>
</span><span class='line'>  <span class="nf">movq</span> <span class="no">$0</span><span class="p">,</span> <span class="nv">%rsi</span>
</span><span class='line'>  <span class="nf">movb</span> <span class="p">(</span><span class="nv">%rsp</span><span class="p">),</span> <span class="nv">%sil</span>
</span><span class='line'>  <span class="nf">movb</span> <span class="no">$0</span><span class="p">,</span> <span class="nv">%al</span>
</span><span class='line'>  <span class="nf">call</span> <span class="no">_printf</span>
</span><span class='line'>
</span><span class='line'>  <span class="nf">leaq</span> <span class="no">_answer</span><span class="p">(</span><span class="nv">%rip</span><span class="p">),</span> <span class="nv">%rdi</span>
</span><span class='line'>  <span class="nf">movq</span> <span class="no">$0</span><span class="p">,</span> <span class="nv">%rsi</span>
</span><span class='line'>  <span class="nf">movb</span> <span class="mi">1</span><span class="p">(</span><span class="nv">%rsp</span><span class="p">),</span> <span class="nv">%sil</span>
</span><span class='line'>  <span class="nf">movb</span> <span class="no">$0</span><span class="p">,</span> <span class="nv">%al</span>
</span><span class='line'>  <span class="nf">call</span> <span class="no">_printf</span>
</span><span class='line'>
</span><span class='line'>  <span class="nf">addq</span> <span class="no">$16</span><span class="p">,</span> <span class="nv">%rsp</span> <span class="c"># clean up stack</span>
</span><span class='line'>
</span><span class='line'>  <span class="nf">movq</span> <span class="no">$0</span><span class="p">,</span> <span class="nv">%rdi</span>
</span><span class='line'>  <span class="nf">call</span> <span class="no">_exit</span>
</span></code></pre></td></tr></table></div></figure>


<p>This isn&rsquo;t a perfect example because I&rsquo;m not allocating space for the ptr on the
stack.  Instead, I&rsquo;m using the %rsp register to keep track of the address I&rsquo;m
working with.</p>

<p>What we&rsquo;re doing is allocating 16B on the stack.  Remember we need to keep %rsp
aligned on 16B boundaries, making it a multiple of 16B.  If we needed a non 16B
multiple, we could allocate more than needed on the stack, and then do some
arithmetic later when access our automatic variables.</p>

<p>For memset, we need to pass the address of our first argument.  In x86-64, the
stack grows downwards, but our variables &ldquo;point&rdquo; upwards, so %rsp and the higher
16B is the memory addresses of our array, with %rsp currently pointing to the
front.  The rest you should recognize by now as part of the calling convention.</p>

<p>In the next grouping of instructions, we want to verify that memset set every
byte to 42 (0x2A).  So what we&rsquo;ll do is copy the first byte from our array,
currently pointed to by %rsp, to the lower 8b of %rsi which is named %sil.  It&rsquo;s
important to zero out the 64b contents of %rsi first, since it may have been
clobbered by our previous call to memset.</p>

<p>Then we dereference and increment the value pointed to by our array pointer,
<code>++(*ptr)</code> or <code>++array[0]</code>.  Now <code>array[0]</code> is <code>43</code>, not <code>42</code>.</p>

<p>In the next grouping of instructions, we print the second byte of our array,
<code>array[1]</code>, and get <code>42</code> from memset.  Now we could try to increment the stack
pointer itself by one, but then the call to printf will fail, so instead when we
load the value of <code>array[1]</code>, we do some pointer arithmetic
<code>movb 1(%rsp), %sil</code>.
This is relative addressing, though you&rsquo;ve already seen this with loading the
strings.  You might wonder why I&rsquo;m not loading the byte in the other
&ldquo;direction,&rdquo; say <code>movb -1(%rsp), %sil</code>.  Well, that goes back to my point that
while the stack pointer moves down as we allocate automatic variables, their
address and memory they take up &ldquo;points up.&rdquo;</p>

<p>Finally, we clean up our automatic variable&rsquo;s allocated space on the stack.
Note that we do not zero out that memory.  A preceding function call might
overwrite that data on the stack, but until it does or unless we explicitly zero
it out, a buffer overrun could accidentally read that data a la Heartbleed.</p>

<p>Now I did promise I would talk about why the stack pointer is misaligned by 8
bytes on function entry.  That is because unoptimized functions typically have a
function prolog and epilog.  Typically, besides creating
room on the stack for automatic variables at the beginning of a function, we
typically want to save the frame AKA base pointer, %rbp, on the stack.  Since
%rbp is 64b or 8B and the push instruction will decrement the stack pointer by
8b, this will align the misaligned stack to a 16B multiple.  So
in function bodies, you&rsquo;ll typically see:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='gas'><span class='line'><span class="nl">my_func:</span>
</span><span class='line'>  <span class="nf">push</span> <span class="nv">%rbp</span>
</span><span class='line'>  <span class="nf">movq</span> <span class="nv">%rsp</span><span class="p">,</span> <span class="nv">%rbp</span>
</span><span class='line'>  <span class="c"># your code here...</span>
</span><span class='line'>  <span class="nf">popq</span> <span class="nv">%rbp</span>
</span><span class='line'>  <span class="nf">ret</span>
</span></code></pre></td></tr></table></div></figure>


<p><a href="http://www.yosefk.com/blog/getting-the-call-stack-without-a-frame-pointer.html">This great article</a>
explains that you may want to profile your running
application, or look at the call stack in a debugger, and by having a linked
list of stack frames of the function that invoked yours and it&rsquo;s caller and so
on in a dedicated register makes it trivial to know the call stack at any given
point in runtime.  Since we&rsquo;re always pushing %rbp immediately thereby saving it
on the stack and putting our stack pointer (%rsp) in the base pointer (%rbp)
(later restoring it, %rbp is call saved), we can
keep popping %rbp then moving our stack pointer to that value
to see that quux was called by bar was called by foo
(<code>foo(bar(quux()));</code>).  Now you saw that I was able to write code that clearly
worked without the three additonal instructions in the prolog and epilog, and
indeed that&rsquo;s what happens with <em>optimized</em> code emitted from your compiler.
And since GDB uses something called DWARF (adds symbols to your objects)
anyways, it isn&rsquo;t a huge issue to remove the prolog and epilog.</p>

<p>So, I think I&rsquo;ve shown you enough to get started hand writing assembly.  To
learn more, you should write the higher level C code for what you&rsquo;re trying to
do and then
<a href="http://www.expobrain.net/2013/06/16/disassembly-c-code-for-fun-part-1/">study the emitted assembly</a>
by compiling with the -S flag.  With
clang, you&rsquo;ll probably see a bunch of stack check guards for each frame, but
those just prevent stack buffer overflows.  Try compiling simple conditionals
(jump forwards), then simple loops (jump backwards) without optimizations.
Jumping to sections and calling your own functions should be pretty
easy to figure out.  Hint: don&rsquo;t duplicate section names, but the assembler will
catch this and warn you pretty explicitly.</p>

<p>Don&rsquo;t let people discourage from learning assembly because &ldquo;compilers will
always beat you.&rdquo;  &ldquo;Just use LLVM or libjit or whatever for codegen.&rdquo;  Well,
existing solutions aren&rsquo;t perfect solutions in every scenario.  Someday you
might be tasked with doing codegen because LLVM is not optimal under certain
constraints.  You&rsquo;ll never know if
you can beat them unless you try; those most comfortable are those most
vulnerable.
I&rsquo;m afraid that if enough people are turned away from
learning the lower levels of programming because the higher level is
unquestionably
better, then assembly will ultimately be forgotten and the computer becomes a
black box again.  This is something that troubles me and that I see occurring
around me frequently; a lot of devs new to web
development conflate jquery with JavaScript, and Three.js with WebGL.  If you&rsquo;re
around the Bay Area, I&rsquo;ll be giving a talk at
<a href="http://html5devconf.com/">HTML5DevConf</a>
on May 22 demystifying Raw WebGL.  You should come and check it out.</p>

<p>In summary, remember:</p>

<ul>
<li>The stack pointer needs to be aligned by 16B multiples when calling another function.</li>
<li>Calling convention dictates passing arguments in %rdi, %rsi, %rdx, %rcx, %r8, %r9, then stack.</li>
<li>%al needs the number of vector arguments for variadic functions.</li>
<li>Know which registers are call saved (%rbx, %rsp, %rbp, and %r12-%r15 (and some others)) and call clobbered.</li>
</ul>


<p>Closing thoughts by Dan:</p>

<blockquote><p>To me, machine code doesn&#8217;t feel analogous to this concept of the divine name. I certainly wouldn&#8217;t describe it as &#8220;like a flawless glass; a light of total understanding streamed through it&#8221;. Even if you strip away all the accidental complexity, machine code is still permeated by mundane implementation-oriented concerns. Also, the abstractions which we use to organize and &#8220;understand&#8221; the program are gone; information is lost.</p><p>My imagination of a divine language looks a lot more like an idealized and cleaned-up LISP. It&#8217;d be capable of representing all known means of abstraction and combination (in the SICP sense), it might be thought of as a kind of super-language of which all of our real-world languages are just messy subsets.</p><footer><strong>Dan Gohman</strong></footer></blockquote>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Write a Test Case]]></title>
    <link href="http://nickdesaulniers.github.io/blog/2014/03/01/write-a-test-case/"/>
    <updated>2014-03-01T13:22:00-08:00</updated>
    <id>http://nickdesaulniers.github.io/blog/2014/03/01/write-a-test-case</id>
    <content type="html"><![CDATA[<p>Your application just broke, oh no!  It couldn&rsquo;t have been <em>your</em> code, right?</p>

<p>I&rsquo;ve always had trouble spotting mistakes in my own work such as spelling,
grammar, mathematical, or even in programming.  With spelling or grammar,
office applications quickly pick up on my mistakes and underline them for me,
but most of my mistakes come from my own hubris.  I&rsquo;m confident in what I do,
and that gets me in trouble when I make little mistakes.  I&rsquo;m confident that I
solved this problem correctly and didn&rsquo;t make any small mistakes.  As a kid
competing in timed math competitions, I quickly learned that reviewing your
work cost time, so it was important to recognize where common mistakes would
crop up on certain problems and spend slightly extra time the first time
through those problem areas, rather than double checking the work in its
entirety, unless I had the time to spare.  Measure twice, cut once.</p>

<p>The same is true for programming.  Writing test cases is time consuming, and if
time is money, then it could be said that writing tests is costly.  There&rsquo;s
probably a logical fallacy in there.  In general, we hope that the time-cost of
writing test
cases will be recuperated by the time-cost of bugs caught, though it&rsquo;s not easy
to measure the time-cost of averted bugs.  I&rsquo;m all for test cases.  I think
that
<a href="http://sqlite.org/testing.html#coverage">SQLite having 100% branch coverage</a>
is incredible, truly an lofty
achievement.  People get bogged down in arguments over type systems where
testing is more of a must for languages without a compiler to catch certain
bugs.</p>

<p>Ok, so going back to your code, something is wrong.  But we&rsquo;re confident it
couldn&rsquo;t be <em>our</em> code.  Maybe it&rsquo;s one of those open source modules I&rsquo;m using
not being tested enough, or that pesky browser implementation, or this damned
OS.  It couldn&rsquo;t be <em>my</em> code.</p>

<p><strong>Prove it.</strong></p>

<p>I see bug reports all the time where people say your X breaks my Y, but when
asked to provide Y they can&rsquo;t for whatever software licensing reason.  The bug
resolver (person who is enabled to fix said bug in X), doesn&rsquo;t know at this
point whether the bug reporter (developer of Y) did their homework; the bug is
unconfirmed.  Both reporter and resolver are suspicious of each others&#8217; code.
<em>I</em> don&rsquo;t make silly mistakes, right?</p>

<p><img class="center" src="http://nickdesaulniers.github.io/images/dude.jpg"></p>

<p>So it&rsquo;s up to the resolver to work out a test case.  Being able to reproduce
said issue is the first goal to resolving a bug.  Just like scientific
statements aren&rsquo;t taken as fact until reproducible, so too will this bug be
merely conjecture at this point.  It kills me when the bug resolver closes an
issue because it <em>works for me</em>.  Nothing boils my blood more; I took the time
to try and help you and wasn&rsquo;t rewarded on some level so I feel that I wasted
my time.  But from where you stand the resolver is not correct, so again I
say&hellip;</p>

<p><strong>Prove it.</strong></p>

<p>I think that it&rsquo;s super hard to get meaningful feedback from users.  It&rsquo;s hard
for them to express why they&rsquo;re frustrated.  We as software developers don&rsquo;t
always point them in the right direction.  As users can have wide ranges of
technical capabilities, sometimes we as more technical oriented people have to
do a little hand holding.  For instance, from Firefox, how many hops does it
take to get from the application&rsquo;s menus to their open bug tracker,
<a href="https://bugzilla.mozilla.org/">bugzilla</a>?
Where can I report an issue?  How do I report an issue?
Do I annoy the hell out of the user until they rate my app?
Users might be complaining on Twitter, but that&rsquo;s sure as hell not where
devlopers are looking for bug reports.
Enabling the user to provide feedback could be
viewed as a double edged sword.  Can I make meaningful conclusions from the
torrent of feedback I&rsquo;m now getting?  Did I structure my form in such a way to
ask the right questions?  Should we make our issue tracker public?  Should we
make security issues that could harm users, if more widely understood, public?
Public to fellow employees, even?  What did you expect to happen, and is that
what actually happened?  This rabbit hole goes deep.</p>

<p>The other day, I was writing a patch for a large application that was developed
by someone else and that I still don&rsquo;t fully comprehend in its entirety. My
patch should have worked, why wasn&rsquo;t it working?  Probably something in this
person&rsquo;s code right?  Sure enough, I wrote a simple test case to eliminate
everything but the control variables, and it turns out <em>I was wrong</em>.</p>

<p>It&rsquo;s hard to get users to
do more than the bare minimum to report an issue, even at all, but to prevent
the issue from being ignored or closed because it works for the developer in
their environment, take the time to report it correctly the first time.
As someone who understands technology more than the average person, take the
time to write a cut down test case that
exposes the issue. The developer who looks at the issue will be grateful;
instead of wasting their time with something that may not even be a bug, you&rsquo;ve
just done something that would have to be done anyways if it is indeed a bug.
You might find that a reduced code size shows that it&rsquo;s in
fact not an issue with someone else&rsquo;s code, but in fact a simple mistake you
made somewhere in your monolithic application.  Or it might be exactly the
evidence you need to get someone&rsquo;s attention to fix said problem.  That test
case might even be included in the latest test suite.  Either way, you have now
proved beyond a reasonable doubt that the issue does not lie in your fault.</p>

<p><strong>Write a Test Case for Your Next Bug Report or Issue.</strong></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Function.prototype.bind Edge Cases]]></title>
    <link href="http://nickdesaulniers.github.io/blog/2013/09/26/function-dot-prototype-dot-bind-edge-cases/"/>
    <updated>2013-09-26T21:00:00-07:00</updated>
    <id>http://nickdesaulniers.github.io/blog/2013/09/26/function-dot-prototype-dot-bind-edge-cases</id>
    <content type="html"><![CDATA[<p>ECMAScript 5&rsquo;s
<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/bind">Function.prototype.bind</a>
is a great tool that&rsquo;s implemented in all
<a href="http://kangax.github.io/es5-compat-table/#Function.prototype.bind">modern browser JavaScript engines</a>.
It allows you to modify the context,
<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/this">this</a>,
of a function when it is evaluated in the future.  Knowing what <code>this</code> refers to
in various contexts is key to being a professional JavaScript developer; don&rsquo;t
show up to an interview without knowing all about it.</p>

<p>Here&rsquo;s a common use case that developers need to watch for.  Can you spot the
mistake?</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">person</span> <span class="o">=</span> <span class="s2">&quot;Bill&quot;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">obj</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">person</span><span class="o">:</span> <span class="s2">&quot;Nick&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">hi</span><span class="o">:</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&quot;Hi &quot;</span> <span class="o">+</span> <span class="k">this</span><span class="p">.</span><span class="nx">person</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="nb">window</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="s2">&quot;DOMContentLoaded&quot;</span><span class="p">,</span> <span class="nx">obj</span><span class="p">.</span><span class="nx">hi</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>Ooops!!! Turns out that since we added the event listener to the window object,
<code>this</code> in the event handler or callback refers to <code>window</code>.  So this code prints
<code>"Hi Bill"</code> instead of <code>"Hi Nick"</code>.  We could wrap <code>obj.hi</code> in an anonymous function:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nb">window</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="s2">&quot;DOMContentLoaded&quot;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">obj</span><span class="p">.</span><span class="nx">hi</span><span class="p">();</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>But that is so needlessly verbose and what we were trying to avoid in the first
place.  The three functions you should know for modifying <code>this</code> (a question I
ask all
my interview candidates) are
<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/call">Function.prototype.call</a>,
<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/apply">Function.prototype.apply</a>,
and
<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/bind">Function.prototype.bind</a>.
<code>call</code> is variadic, while <code>apply</code> takes an array of
arguments, but the two both immediately invoke the function.  We don&rsquo;t want to
do that just yet.  The fix we need is <code>Function.prototype.bind</code>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nb">window</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="s2">&quot;DOMContentLoaded&quot;</span><span class="p">,</span> <span class="nx">obj</span><span class="p">.</span><span class="nx">hi</span><span class="p">.</span><span class="nx">bind</span><span class="p">(</span><span class="nx">obj</span><span class="p">));</span>
</span></code></pre></td></tr></table></div></figure>


<p>There, now isn&rsquo;t that nice and short?  Instead of saving <code>this</code> as another
variable then closing over it, you can instead use <code>bind</code>!</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">obj</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">person</span><span class="o">:</span> <span class="s2">&quot;Nick&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">wait</span><span class="o">:</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">self</span> <span class="o">=</span> <span class="k">this</span><span class="p">;</span>
</span><span class='line'>    <span class="nx">someButton</span><span class="p">.</span><span class="nx">onclick</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">self</span><span class="p">.</span><span class="nx">person</span> <span class="o">+</span> <span class="s2">&quot; clicked!&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="p">};</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>becomes</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">obj</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">person</span><span class="o">:</span> <span class="s2">&quot;Nick&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">wait</span><span class="o">:</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">someButton</span><span class="p">.</span><span class="nx">onclick</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">person</span> <span class="o">+</span> <span class="s2">&quot; clicked!&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}.</span><span class="nx">bind</span><span class="p">(</span><span class="k">this</span><span class="p">);</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>No need to store <code>this</code> into <code>self</code>, then close over it.  One great shortcut I
use all the time is creating an alias for <code>document.getElementById</code>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">$</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">.</span><span class="nx">bind</span><span class="p">(</span><span class="nb">document</span><span class="p">);</span>
</span><span class='line'><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;someElementsId&#39;</span><span class="p">).</span><span class="nx">doSomething</span><span class="p">();</span>
</span><span class='line'><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;anotherElement&#39;</span><span class="p">).</span><span class="nx">doSomethingElse</span><span class="p">();</span>
</span><span class='line'><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;aThirdElement&#39;</span><span class="p">).</span><span class="nx">doSomethingDifferent</span><span class="p">();</span>
</span><span class='line'><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;theFifthElementOops&#39;</span><span class="p">).</span><span class="nx">doSomethingFun</span><span class="p">();</span>
</span></code></pre></td></tr></table></div></figure>


<p>Why did I bind <code>getElementById</code> back to <code>document</code>?  Try it without the call to
bind.  Any luck?</p>

<p><code>bind</code> can also be great for partially applying functions, too.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">function</span> <span class="nx">add</span> <span class="p">(</span><span class="nx">a</span><span class="p">,</span> <span class="nx">b</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&quot;a: &quot;</span> <span class="o">+</span> <span class="nx">a</span><span class="p">);</span>
</span><span class='line'>  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&quot;b: &quot;</span> <span class="o">+</span> <span class="nx">b</span><span class="p">);</span>
</span><span class='line'>  <span class="k">return</span> <span class="nx">a</span> <span class="o">+</span> <span class="nx">b</span><span class="p">;</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">todo</span> <span class="o">=</span> <span class="nx">add</span><span class="p">.</span><span class="nx">bind</span><span class="p">(</span><span class="kc">null</span><span class="p">,</span> <span class="mi">4</span><span class="p">);</span>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">todo</span><span class="p">(</span><span class="mi">7</span><span class="p">));</span>
</span></code></pre></td></tr></table></div></figure>


<p>will print</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">a</span><span class="o">:</span> <span class="mi">4</span>
</span><span class='line'><span class="nx">b</span><span class="o">:</span> <span class="mi">7</span>
</span><span class='line'><span class="mi">11</span>
</span></code></pre></td></tr></table></div></figure>


<p>What <code>Function.prototype.bind</code> is essentially doing is wrapping <code>add</code> in a
function that essentially looks like:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">todo</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">add</span><span class="p">.</span><span class="nx">apply</span><span class="p">(</span><span class="kc">null</span><span class="p">,</span> <span class="p">[</span><span class="mi">4</span><span class="p">].</span><span class="nx">concat</span><span class="p">(</span><span class="nb">Array</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">slice</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="nx">arguments</span><span class="p">)));</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>The array has the captured arguments (just <code>4</code>), and is converting <code>todo</code>&rsquo;s
<code>arguments</code> into an array (a common idiom for converting &ldquo;Array-like&rdquo; objects
into
Arrays), then joining (<code>concat</code>) them and invoking the bound function (<code>apply</code>)
with
the value for <code>this</code> (in this case, <code>null</code>).</p>

<p>In fact, if you look at
<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/bind#Compatibility">the compatibility section of the MDN page for bind</a>,
you&rsquo;ll see a function that returns a function that is essentially the above.
One caveat is that this approach only allows you to partially apply variables in
order.</p>

<p>So <code>bind</code> is a great addition to the language.  Now to the point I wanted to
make;
there are edge cases when <code>bind</code> doesn&rsquo;t work or might trip you up.  The first
is that <code>bind</code>
evaluates
its <code>arguments</code> when bound, not when invoked.  The other is that <code>bind</code> returns
a new
function, always.  And the final is to be careful binding to variadic functions
when you don&rsquo;t intend to use all of the passed in variables.  Um, duh right?
Well, let me show you three examples that have bitten me (recently).  The first
is with ajax calls.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">function</span> <span class="nx">crunch</span> <span class="p">(</span><span class="nx">data</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1">// operate on data</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">xhr</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">XMLHttpRequest</span><span class="p">;</span>
</span><span class='line'><span class="nx">xhr</span><span class="p">.</span><span class="nx">open</span><span class="p">(</span><span class="s2">&quot;GET&quot;</span><span class="p">,</span> <span class="s2">&quot;data.json&quot;</span><span class="p">);</span>
</span><span class='line'><span class="nx">xhr</span><span class="p">.</span><span class="nx">onload</span> <span class="o">=</span> <span class="nx">crunch</span><span class="p">.</span><span class="nx">bind</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">response</span><span class="p">);</span>
</span><span class='line'><span class="nx">xhr</span><span class="p">.</span><span class="nx">send</span><span class="p">();</span>
</span></code></pre></td></tr></table></div></figure>


<p>Oops, while I do want to operate on <code>this.result</code> within <code>crunch</code> with <code>this</code>
referring to <code>xhr</code>, <code>this</code> at the time of binding was referring to <code>window</code>!
Let&rsquo;s
hope <code>window.results</code> is <code>undefined</code>!  What if we changed <code>this.result</code> with
<code>xhr.result</code>?  Well, we&rsquo;re no longer referring to the <code>window</code> object, but
<code>xhr.result</code> is evaluated at bind time (and for an unsent <code>XMLHttpRequest</code>
object,
is <code>null</code>), so we&rsquo;ve bound <code>null</code> as the first argument.  We must delay the
handling
of <code>xhr.onload</code>; either use an anonymous function inline or named function to
control nesting depth.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">xhr</span><span class="p">.</span><span class="nx">onload</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">crunch</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">result</span><span class="p">);</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>The next is that <code>bind</code> always returns a new function.  Dude, it says that in
the docs,
<a href="http://xkcd.com/293/">RTFM</a>.
Yeah I know, but this case still caught me.  When removing an event
listener, you need to supply the <strong>same</strong> handler function.  Example, a <code>once</code>
function:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">function</span> <span class="nx">todo</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nb">document</span><span class="p">.</span><span class="nx">removeEventListener</span><span class="p">(</span><span class="s2">&quot;myCustomEvent&quot;</span><span class="p">,</span> <span class="nx">todo</span><span class="p">);</span>
</span><span class='line'>  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">person</span><span class="p">);</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="nb">document</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="s2">&quot;myCustomEvent&quot;</span><span class="p">,</span> <span class="nx">todo</span><span class="p">.</span><span class="nx">bind</span><span class="p">({</span> <span class="nx">person</span><span class="o">:</span> <span class="s2">&quot;Nick&quot;</span> <span class="p">}));</span>
</span></code></pre></td></tr></table></div></figure>


<p>Try firing <code>myCustomEvent</code> twice, see what happens!  <code>"Nick"</code> is logged twice.
A <code>once</code> function that handles two separate events is not very good.  In fact,
it will continue
to handle events, since <code>document</code> does not have <code>todo</code> as an event handler for
<code>myCustomEvent</code>
events.  The event listener you bound was a new function; <code>bind</code> always returns
a new function.  The solution:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">todo</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">person</span><span class="p">);</span>
</span><span class='line'>  <span class="nb">document</span><span class="p">.</span><span class="nx">removeEventListener</span><span class="p">(</span><span class="s2">&quot;myCustomEvent&quot;</span><span class="p">,</span> <span class="nx">todo</span><span class="p">);</span>
</span><span class='line'><span class="p">}.</span><span class="nx">bind</span><span class="p">({</span> <span class="nx">person</span><span class="o">:</span> <span class="s2">&quot;Nick&quot;</span> <span class="p">});</span>
</span><span class='line'><span class="nb">document</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="s2">&quot;myCustomEvent&quot;</span><span class="p">,</span> <span class="nx">todo</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>That would be a good interview question.  The final gotcha is with functions
that are variadic.  Extending one of my earlier examples:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">obj</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">person</span><span class="o">:</span> <span class="s2">&quot;Nick&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">wait</span><span class="o">:</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">someButton</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">createElement</span><span class="p">(</span><span class="s2">&quot;button&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="nx">someButton</span><span class="p">.</span><span class="nx">onclick</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">person</span> <span class="o">+</span> <span class="s2">&quot; clicked!&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}.</span><span class="nx">bind</span><span class="p">(</span><span class="k">this</span><span class="p">);</span>
</span><span class='line'>    <span class="nx">someButton</span><span class="p">.</span><span class="nx">click</span><span class="p">();</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'><span class="nx">obj</span><span class="p">.</span><span class="nx">wait</span><span class="p">();</span>
</span></code></pre></td></tr></table></div></figure>


<p>Let&rsquo;s say I thought I could use bind to simplify the <code>onclick</code> using the trick I
did with <code>document.getElementById</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">obj</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">person</span><span class="o">:</span> <span class="s2">&quot;Nick&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">wait</span><span class="o">:</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">someButton</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">createElement</span><span class="p">(</span><span class="s2">&quot;button&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="nx">someButton</span><span class="p">.</span><span class="nx">onclick</span> <span class="o">=</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">.</span><span class="nx">bind</span><span class="p">(</span><span class="nx">console</span><span class="p">,</span> <span class="k">this</span><span class="p">.</span><span class="nx">person</span> <span class="o">+</span> <span class="s2">&quot; clicked!&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="nx">someButton</span><span class="p">.</span><span class="nx">click</span><span class="p">();</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'><span class="nx">obj</span><span class="p">.</span><span class="nx">wait</span><span class="p">();</span>
</span></code></pre></td></tr></table></div></figure>


<p>Can you guess what this prints?  It does prints the expected, but with an
unexpected addition.  Think about what I said about variadic functions.  What
might be wrong here?</p>

<p>Turns out this prints
<code>"Nick clicked! [object MouseEvent]"</code>  This one took me a while to think
through, but luckily I had other experiences with <code>bind</code> that helped me understand
why this occurred.</p>

<p><code>console.log</code> is variadic, so it prints all of its arguments.  When we called
<code>bind</code>
on <code>console.log</code>, we set the <code>onclick</code> handler to be a new function that applied
that expected output with any additional arguments.  Well, <code>onclick</code> handlers are
passed a <code>MouseEvent</code> object (think <code>e.target</code>), which winds up being passed as
the second
argument to <code>console.log</code>.  If this was the example with <code>add</code> from earlier,
<code>this.person + " clicked!"</code> would be the <code>4</code> and the <code>MouseEvent</code> would be the
<code>7</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">someButton</span><span class="p">.</span><span class="nx">onclick</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">.</span><span class="nx">apply</span><span class="p">(</span><span class="nx">console</span><span class="p">,</span> <span class="p">[</span><span class="s2">&quot;Nick clicked!&quot;</span><span class="p">].</span><span class="nx">concat</span><span class="p">([</span><span class="nx">e</span><span class="p">]));</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>I love <code>bind</code>, but sometimes, it will get you.  What are some examples of times
when you&rsquo;ve been bitten by <code>bind</code>?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Making great Node.js modules with CoffeeScript]]></title>
    <link href="http://nickdesaulniers.github.io/blog/2013/08/28/making-great-node-dot-js-modules-with-coffeescript/"/>
    <updated>2013-08-28T10:51:00-07:00</updated>
    <id>http://nickdesaulniers.github.io/blog/2013/08/28/making-great-node-dot-js-modules-with-coffeescript</id>
    <content type="html"><![CDATA[<p><a href="http://nodejs.org/">Node.js</a>
is a great runtime for writing applications in JavaScript, the language
I primarily develop in.
<a href="http://coffeescript.org/">CoffeeScript</a>
is a programming language that compiles
to JavaScript.  Why would we write a reusable piece of code, a
<a href="http://nodejs.org/api/modules.html">module</a>
, in
CoffeeScript?  CoffeeScript is a very high level language and
<a href="http://railscasts.com/episodes/267-coffeescript-basics">beautifully brings together</a>
my favorite aspects of JavaScript,
Ruby, and Python.  In this tutorial, I&rsquo;ll show you how I create reusable open
source modules for Node.js from CoffeeScript, which is something I recently
discovered while creating a
<a href="https://github.com/nickdesaulniers/javascript-playlist-parser">playlist parser module</a>.
The point is to focus on how to turn a quick hack into a nicely laid
out Node.js module.</p>

<p>The steps are as follows:</p>

<ol>
<li>Turn an idea into a git repo.</li>
<li>Add directory structure.</li>
<li>Split library functions from testing.</li>
<li>Add a Build script.</li>
<li>Create node module.</li>
<li>Add LICENSE and README.</li>
<li>Publish.</li>
</ol>


<p>First thing&rsquo;s first, we have to have an idea.  It doesn&rsquo;t have to be
revolutionary, just do one thing and do it well.  That is the first rule of
<a href="http://www.faqs.org/docs/artu/ch01s06.html">UNIX <del>fightclub</del> philosophy</a>,
which resonates well within
<a href="http://blog.izs.me/post/48281998870/unix-philosophy-and-node-js">the Node.js community</a>.
When I&rsquo;m hacking on
something, I start out with a single file to test something out.  Then I
progressively refine the example until it&rsquo;s something reusable.  That way, I
can reuse it, others can reuse it, others can learn from it, and the world can
be a better place.</p>

<p>For this tutorial, I&rsquo;ll show you my process for creating a binding for
<a href="http://nanomsg.org/index.html">nanomsg</a>,
the latest scalability protocol library from the creator of
<a href="http://zeromq.org/">ZeroMQ</a>,
<a href="http://250bpm.com/">Martin Sústrik</a>.
I had played with ZeroMQ in the past and thought that it was really
awesome, and I was excited to see a new library from it&rsquo;s creator, based on C,
since I also really enjoyed his post on why he
<a href="http://250bpm.com/blog:4">shouldn&rsquo;t have written it in C++</a>.</p>

<p>So messing around real quick, let&rsquo;s make sure we have node up to date.  I like
to use
<a href="https://github.com/creationix/nvm">nvm</a>
and the latest stable minor version of node (stable versions have
even minor patch numbers where versions are in the format <code>major.minor.patch</code>,
so v0.11.0 is unstable).  <code>node -v</code> &ndash;> v0.10.17</p>

<p>Then I need to download and install the library that I&rsquo;ll be dynamically
linking to, build, and install it.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>curl -O http://download.nanomsg.org/nanomsg-0.1-alpha.zip &amp;&amp; \
</span><span class='line'>unzip nanomsg-0.1-alpha.zip &amp;&amp; \
</span><span class='line'>cd nanomsg-0.1-alpha &amp;&amp; \
</span><span class='line'>mkdir build &amp;&amp; \
</span><span class='line'>cd build &amp;&amp; \
</span><span class='line'>../configure &amp;&amp; \
</span><span class='line'>make &amp;&amp; \
</span><span class='line'>make install
</span></code></pre></td></tr></table></div></figure>


<p>We&rsquo;ll use
<a href="https://github.com/rbranson/node-ffi">node&rsquo;s FFI module</a>
to interface with the dynamically linked library,
because it&rsquo;s easier to write bindings than using
<a href="http://nodejs.org/api/addons.html">native addons</a>,
and
<a href="https://github.com/rvagg/node-addon-examples/blob/master/README.md#compatibility-notes">v8&rsquo;s API has recently changed causing some headaches for native extensions</a>.</p>

<p><code>npm install ffi</code></p>

<p>We&rsquo;ll be writing the example in CoffeeScript.</p>

<p><code>npm install -g coffee-script</code></p>

<p>Now to mess around we can create main.coffee based on
<a href="https://github.com/250bpm/cppnanomsg/blob/9becc3d5116ab33a7d2c5f06d68a8fea1b781194/binding.cpp#L29">the C++ binding&rsquo;s example</a>:</p>

<figure class='code'><figcaption><span>main.coffee</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="nv">ffi = </span><span class="nx">require</span> <span class="s">&#39;ffi&#39;</span>
</span><span class='line'><span class="nv">assert = </span><span class="nx">require</span> <span class="s">&#39;assert&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">AF_SP = </span><span class="mi">1</span>
</span><span class='line'><span class="nv">NN_PAIR = </span><span class="mi">16</span>
</span><span class='line'>
</span><span class='line'><span class="nv">nanomsg = </span><span class="nx">ffi</span><span class="p">.</span><span class="nx">Library</span> <span class="s">&#39;libnanomsg&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="nv">nn_socket: </span><span class="p">[</span> <span class="s">&#39;int&#39;</span><span class="p">,</span> <span class="p">[</span> <span class="s">&#39;int&#39;</span><span class="p">,</span> <span class="s">&#39;int&#39;</span> <span class="p">]]</span>
</span><span class='line'>  <span class="nv">nn_bind: </span><span class="p">[</span> <span class="s">&#39;int&#39;</span><span class="p">,</span> <span class="p">[</span> <span class="s">&#39;int&#39;</span><span class="p">,</span> <span class="s">&#39;string&#39;</span> <span class="p">]]</span>
</span><span class='line'>  <span class="nv">nn_connect: </span><span class="p">[</span> <span class="s">&#39;int&#39;</span><span class="p">,</span> <span class="p">[</span><span class="s">&#39;int&#39;</span><span class="p">,</span> <span class="s">&#39;string&#39;</span> <span class="p">]]</span>
</span><span class='line'>  <span class="nv">nn_send: </span><span class="p">[</span> <span class="s">&#39;int&#39;</span><span class="p">,</span> <span class="p">[</span><span class="s">&#39;int&#39;</span><span class="p">,</span> <span class="s">&#39;pointer&#39;</span><span class="p">,</span> <span class="s">&#39;int&#39;</span><span class="p">,</span> <span class="s">&#39;int&#39;</span><span class="p">]]</span>
</span><span class='line'>  <span class="nv">nn_recv: </span><span class="p">[</span> <span class="s">&#39;int&#39;</span><span class="p">,</span> <span class="p">[</span><span class="s">&#39;int&#39;</span><span class="p">,</span> <span class="s">&#39;pointer&#39;</span><span class="p">,</span> <span class="s">&#39;int&#39;</span><span class="p">,</span> <span class="s">&#39;int&#39;</span><span class="p">]]</span>
</span><span class='line'>  <span class="nv">nn_errno: </span><span class="p">[</span> <span class="s">&#39;int&#39;</span><span class="p">,</span> <span class="p">[]]</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># test</span>
</span><span class='line'><span class="nv">s1 = </span><span class="nx">nanomsg</span><span class="p">.</span><span class="nx">nn_socket</span> <span class="nx">AF_SP</span><span class="p">,</span> <span class="nx">NN_PAIR</span>
</span><span class='line'><span class="nx">assert</span> <span class="nx">s1</span> <span class="o">&gt;=</span> <span class="mi">0</span><span class="p">,</span> <span class="s">&#39;s1: &#39;</span> <span class="o">+</span> <span class="nx">nanomsg</span><span class="p">.</span><span class="nx">nn_errno</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'><span class="nv">ret = </span><span class="nx">nanomsg</span><span class="p">.</span><span class="nx">nn_bind</span> <span class="nx">s1</span><span class="p">,</span> <span class="s">&#39;inproc://a&#39;</span>
</span><span class='line'><span class="nx">assert</span> <span class="nx">ret</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">,</span> <span class="s">&#39;bind&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">s2 = </span><span class="nx">nanomsg</span><span class="p">.</span><span class="nx">nn_socket</span> <span class="nx">AF_SP</span><span class="p">,</span> <span class="nx">NN_PAIR</span>
</span><span class='line'><span class="nx">assert</span> <span class="nx">s2</span> <span class="o">&gt;=</span> <span class="mi">0</span><span class="p">,</span> <span class="s">&#39;s2: &#39;</span> <span class="o">+</span> <span class="nx">nanomsg</span><span class="p">.</span><span class="nx">nn_errno</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'><span class="nv">ret = </span><span class="nx">nanomsg</span><span class="p">.</span><span class="nx">nn_connect</span> <span class="nx">s2</span><span class="p">,</span> <span class="s">&#39;inproc://a&#39;</span>
</span><span class='line'><span class="nx">assert</span> <span class="nx">ret</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">,</span> <span class="s">&#39;connect&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">msg = </span><span class="k">new</span> <span class="nx">Buffer</span> <span class="s">&#39;hello&#39;</span>
</span><span class='line'><span class="nv">ret = </span><span class="nx">nanomsg</span><span class="p">.</span><span class="nx">nn_send</span> <span class="nx">s2</span><span class="p">,</span> <span class="nx">msg</span><span class="p">,</span> <span class="nx">msg</span><span class="p">.</span><span class="nx">length</span><span class="p">,</span> <span class="mi">0</span>
</span><span class='line'><span class="nx">assert</span> <span class="nx">ret</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">,</span> <span class="s">&#39;send&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">recv = </span><span class="k">new</span> <span class="nx">Buffer</span> <span class="nx">msg</span><span class="p">.</span><span class="nx">length</span>
</span><span class='line'><span class="nv">ret = </span><span class="nx">nanomsg</span><span class="p">.</span><span class="nx">nn_recv</span> <span class="nx">s1</span><span class="p">,</span> <span class="nx">recv</span><span class="p">,</span> <span class="nx">recv</span><span class="p">.</span><span class="nx">length</span><span class="p">,</span> <span class="mi">0</span>
</span><span class='line'><span class="nx">assert</span> <span class="nx">ret</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">,</span> <span class="s">&#39;recv&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span> <span class="nx">recv</span><span class="p">.</span><span class="nx">toString</span><span class="p">()</span>
</span><span class='line'><span class="nx">assert</span> <span class="nx">msg</span><span class="p">.</span><span class="nx">toString</span><span class="p">()</span> <span class="o">is</span> <span class="nx">recv</span><span class="p">.</span><span class="nx">toString</span><span class="p">(),</span> <span class="s">&#39;received message did not match sent&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>coffee main.coffee</code> &ndash;> hello</p>

<p>This quick example shows that we have something working.  Currently our working
directory should look like:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>tree -L 2
</span><span class='line'>.
</span><span class='line'>├── main.coffee
</span><span class='line'>└── node_modules
</span><span class='line'>    └── ffi
</span><span class='line'>
</span><span class='line'>2 directories, 1 file
</span></code></pre></td></tr></table></div></figure>


<h2>Turn an idea into a git repo</h2>

<p>Next up is to create a repository using a version control system like
<a href="http://git-scm.com/">git</a> and
start saving our work.
<a href="http://www.codinghorror.com/blog/2008/08/check-in-early-check-in-often.html">Check in early, check in often</a>.</p>

<p>Let&rsquo;s add a .gitignore so that were not adding files that really don&rsquo;t need to
be committed.  The node_modules folder is unnecessary because when this node
module is installed, its dependencies will be recursively installed, so
there&rsquo;s no need to commit them to source control.  The swap files are because I
use
<a href="http://www.vim.org/">vim</a>
and I accidentally commit the swap files from open buffers all the time
like a noob.</p>

<figure class='code'><figcaption><span>.gitignore</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>node_modules/
</span><span class='line'>*.swp
</span></code></pre></td></tr></table></div></figure>


<p>Let&rsquo;s turn this into a git repo:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>git init &amp;&amp; \
</span><span class='line'>git add . &amp;&amp; \
</span><span class='line'>git commit -am “initial commit”
</span></code></pre></td></tr></table></div></figure>


<p>Up on github, let&rsquo;s <a href="https://github.com/new">create an uninitialized repo</a>
and push to it:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>git remote add origin git@github.com:nickdesaulniers/node-nanomsg.git &amp;&amp; \
</span><span class='line'>git push -u origin master
</span></code></pre></td></tr></table></div></figure>


<p>So we
<a href="https://github.com/nickdesaulniers/node-nanomsg/commit/19211e7520de9384a0d5b0ce4c08a623c4f2e0b9">have</a>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>tree -L 2 -a
</span><span class='line'>.
</span><span class='line'>├── .gitignore
</span><span class='line'>├── main.coffee
</span><span class='line'>└── node_modules
</span><span class='line'>    └── ffi
</span><span class='line'>
</span><span class='line'>2 directories, 2 files
</span></code></pre></td></tr></table></div></figure>


<h2>Add directory structure</h2>

<p>Now that we have our repo under version control, let&rsquo;s start adding some
structure. Let&rsquo;s create
<code>src/</code>, <code>lib/</code>, and <code>test/</code> directories.  Our CoffeeScript will live in
<code>src/</code>, compiled JavaScript will be in <code>lib/</code>, and our test code will be in
<code>test/</code>.</p>

<p><code>mkdir src lib test</code></p>

<h2>Split library functions from testing</h2>

<p>Now let&rsquo;s move a copy of <code>main.coffee</code> into <code>src/</code> and one into <code>test/</code>.  We
are going to split the library definition away from the testing logic.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>cp main.coffee test/test.coffee &amp;&amp; \
</span><span class='line'>git add test/test.coffee &amp;&amp; \
</span><span class='line'>git mv main.coffee src/nanomsg.coffee
</span></code></pre></td></tr></table></div></figure>


<p>This way <code>git status</code> tells us:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'># On branch master
</span><span class='line'># Changes to be committed:
</span><span class='line'>#   (use &quot;git reset HEAD &lt;file&gt;...&quot; to unstage)
</span><span class='line'>#
</span><span class='line'># renamed:    main.coffee -&gt; src/nanomsg.coffee
</span><span class='line'># new file:   test/test.coffee
</span><span class='line'>#
</span></code></pre></td></tr></table></div></figure>


<p>Let&rsquo;s edit src/main.coffee to look like:</p>

<figure class='code'><figcaption><span>src/main.coffee</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="nv">ffi = </span><span class="nx">require</span> <span class="s">&#39;ffi&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">exports = module.exports = </span><span class="nx">ffi</span><span class="p">.</span><span class="nx">Library</span> <span class="s">&#39;libnanomsg&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="nv">nn_socket: </span><span class="p">[</span> <span class="s">&#39;int&#39;</span><span class="p">,</span> <span class="p">[</span> <span class="s">&#39;int&#39;</span><span class="p">,</span> <span class="s">&#39;int&#39;</span> <span class="p">]]</span>
</span><span class='line'>  <span class="nv">nn_bind: </span><span class="p">[</span> <span class="s">&#39;int&#39;</span><span class="p">,</span> <span class="p">[</span> <span class="s">&#39;int&#39;</span><span class="p">,</span> <span class="s">&#39;string&#39;</span> <span class="p">]]</span>
</span><span class='line'>  <span class="nv">nn_connect: </span><span class="p">[</span> <span class="s">&#39;int&#39;</span><span class="p">,</span> <span class="p">[</span><span class="s">&#39;int&#39;</span><span class="p">,</span> <span class="s">&#39;string&#39;</span> <span class="p">]]</span>
</span><span class='line'>  <span class="nv">nn_send: </span><span class="p">[</span> <span class="s">&#39;int&#39;</span><span class="p">,</span> <span class="p">[</span><span class="s">&#39;int&#39;</span><span class="p">,</span> <span class="s">&#39;pointer&#39;</span><span class="p">,</span> <span class="s">&#39;int&#39;</span><span class="p">,</span> <span class="s">&#39;int&#39;</span><span class="p">]]</span>
</span><span class='line'>  <span class="nv">nn_recv: </span><span class="p">[</span> <span class="s">&#39;int&#39;</span><span class="p">,</span> <span class="p">[</span><span class="s">&#39;int&#39;</span><span class="p">,</span> <span class="s">&#39;pointer&#39;</span><span class="p">,</span> <span class="s">&#39;int&#39;</span><span class="p">,</span> <span class="s">&#39;int&#39;</span><span class="p">]]</span>
</span><span class='line'>  <span class="nv">nn_errno: </span><span class="p">[</span> <span class="s">&#39;int&#39;</span><span class="p">,</span> <span class="p">[]]</span>
</span><span class='line'>
</span><span class='line'><span class="nv">exports.AF_SP = </span><span class="mi">1</span>
</span><span class='line'><span class="nv">exports.NN_PAIR = </span><span class="mi">16</span>
</span></code></pre></td></tr></table></div></figure>


<p>and edit the tests to:</p>

<figure class='code'><figcaption><span>test/test.coffee</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="nv">assert = </span><span class="nx">require</span> <span class="s">&#39;assert&#39;</span>
</span><span class='line'><span class="nv">nanomsg = </span><span class="nx">require</span> <span class="s">&#39;../lib/nanomsg.js&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="p">{</span> <span class="nx">AF_SP</span><span class="p">,</span> <span class="nx">NN_PAIR</span> <span class="p">}</span> <span class="o">=</span> <span class="nx">nanomsg</span>
</span><span class='line'>
</span><span class='line'><span class="nv">s1 = </span><span class="nx">nanomsg</span><span class="p">.</span><span class="nx">nn_socket</span> <span class="nx">AF_SP</span><span class="p">,</span> <span class="nx">NN_PAIR</span>
</span><span class='line'><span class="nx">assert</span> <span class="nx">s1</span> <span class="o">&gt;=</span> <span class="mi">0</span><span class="p">,</span> <span class="s">&#39;s1: &#39;</span> <span class="o">+</span> <span class="nx">nanomsg</span><span class="p">.</span><span class="nx">nn_errno</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'><span class="nv">ret = </span><span class="nx">nanomsg</span><span class="p">.</span><span class="nx">nn_bind</span> <span class="nx">s1</span><span class="p">,</span> <span class="s">&#39;inproc://a&#39;</span>
</span><span class='line'><span class="nx">assert</span> <span class="nx">ret</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">,</span> <span class="s">&#39;bind&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">s2 = </span><span class="nx">nanomsg</span><span class="p">.</span><span class="nx">nn_socket</span> <span class="nx">AF_SP</span><span class="p">,</span> <span class="nx">NN_PAIR</span>
</span><span class='line'><span class="nx">assert</span> <span class="nx">s2</span> <span class="o">&gt;=</span> <span class="mi">0</span><span class="p">,</span> <span class="s">&#39;s2: &#39;</span> <span class="o">+</span> <span class="nx">nanomsg</span><span class="p">.</span><span class="nx">nn_errno</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'><span class="nv">ret = </span><span class="nx">nanomsg</span><span class="p">.</span><span class="nx">nn_connect</span> <span class="nx">s2</span><span class="p">,</span> <span class="s">&#39;inproc://a&#39;</span>
</span><span class='line'><span class="nx">assert</span> <span class="nx">ret</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">,</span> <span class="s">&#39;connect&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">msg = </span><span class="k">new</span> <span class="nx">Buffer</span> <span class="s">&#39;hello&#39;</span>
</span><span class='line'><span class="nv">ret = </span><span class="nx">nanomsg</span><span class="p">.</span><span class="nx">nn_send</span> <span class="nx">s2</span><span class="p">,</span> <span class="nx">msg</span><span class="p">,</span> <span class="nx">msg</span><span class="p">.</span><span class="nx">length</span><span class="p">,</span> <span class="mi">0</span>
</span><span class='line'><span class="nx">assert</span> <span class="nx">ret</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">,</span> <span class="s">&#39;send&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">recv = </span><span class="k">new</span> <span class="nx">Buffer</span> <span class="nx">msg</span><span class="p">.</span><span class="nx">length</span>
</span><span class='line'><span class="nv">ret = </span><span class="nx">nanomsg</span><span class="p">.</span><span class="nx">nn_recv</span> <span class="nx">s1</span><span class="p">,</span> <span class="nx">recv</span><span class="p">,</span> <span class="nx">recv</span><span class="p">.</span><span class="nx">length</span><span class="p">,</span> <span class="mi">0</span>
</span><span class='line'><span class="nx">assert</span> <span class="nx">ret</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">,</span> <span class="s">&#39;recv&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="nx">assert</span> <span class="nx">msg</span><span class="p">.</span><span class="nx">toString</span><span class="p">()</span> <span class="o">is</span> <span class="nx">recv</span><span class="p">.</span><span class="nx">toString</span><span class="p">(),</span> <span class="s">&#39;received message did not match sent&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Notice how in the test we&rsquo;re including the compiled javascript from <code>lib/</code>
which doesn&rsquo;t exist yet?  If you try running <code>coffee test/test.coffee</code> it
should crash.  Let&rsquo;s make the compiled version.
<code>coffee -o lib -c src/nanomsg.coffee</code></p>

<p>Once the compiled lib exists, we can run our tests with
<code>coffee test/test.coffee</code> and shouldn&rsquo;t see any errors.</p>

<p>Now we should have a little more order, let&rsquo;s
<a href="https://github.com/nickdesaulniers/node-nanomsg/commit/3e3e3918971e2eddbe95e91e0c3cf32e7f8becba">commit</a>.
Hold off on adding
<code>lib/</code> to version control, I&rsquo;ll explain why in a bit.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>tree -L 2 -C -a -I &#39;.git&#39;
</span><span class='line'>.
</span><span class='line'>├── .gitignore
</span><span class='line'>├── lib
</span><span class='line'>│   └── nanomsg.js
</span><span class='line'>├── node_modules
</span><span class='line'>│   └── ffi
</span><span class='line'>├── src
</span><span class='line'>│   └── nanomsg.coffee
</span><span class='line'>└── test
</span><span class='line'>    └── test.coffee
</span><span class='line'>
</span><span class='line'>5 directories, 4 files
</span></code></pre></td></tr></table></div></figure>


<p>At this point, if we add features and want to rerun our tests, we need to
execute:</p>

<p><code>coffee -o lib -c src/nanomsg.coffee &amp;&amp; coffee test/test.coffee</code></p>

<p>While this command is simple now and easy to reverse search, anyone else
contributing to you project is going to have to know the commands to run the
tests.  Let&rsquo;s use
<a href="http://gruntjs.com/">Grunt</a>,
the JavaScript task runner, to automate our build and test process.</p>

<h2>Add a Build script</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>npm install -g grunt-cli &amp;&amp; \
</span><span class='line'>npm install grunt-contrib-coffee
</span></code></pre></td></tr></table></div></figure>


<p>Create a simple Gruntfile which can also be written in CoffeeScript:</p>

<figure class='code'><figcaption><span>Gruntfile.coffee</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="nv">module.exports = </span><span class="nf">(grunt) -&gt;</span>
</span><span class='line'>  <span class="nx">grunt</span><span class="p">.</span><span class="nx">initConfig</span>
</span><span class='line'>    <span class="nv">coffee:</span>
</span><span class='line'>      <span class="nv">compile:</span>
</span><span class='line'>        <span class="nv">files:</span>
</span><span class='line'>          <span class="s">&#39;lib/nanomsg.js&#39;</span><span class="o">:</span> <span class="p">[</span><span class="s">&#39;src/*.coffee&#39;</span><span class="p">]</span>
</span><span class='line'>  <span class="nx">grunt</span><span class="p">.</span><span class="nx">loadNpmTasks</span> <span class="s">&#39;grunt-contrib-coffee&#39;</span>
</span><span class='line'>  <span class="nx">grunt</span><span class="p">.</span><span class="nx">registerTask</span> <span class="s">&#39;default&#39;</span><span class="p">,</span> <span class="p">[</span><span class="s">&#39;coffee&#39;</span><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>Running <code>grunt</code> builds our lib which is a start, so let&rsquo;s
<a href="https://github.com/nickdesaulniers/node-nanomsg/commit/293e7378225c761ec496d9dcd09e1f2d331628a2">commit</a>
that.</p>

<p>But <code>grunt</code> is not running our tests.  And our tests don&rsquo;t have nice output.
Let&rsquo;s change that:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>npm install -g mocha &amp;&amp; \
</span><span class='line'>npm install chai grunt-mocha-test
</span></code></pre></td></tr></table></div></figure>


<p>edit test/test.coffee to:</p>

<figure class='code'><figcaption><span>test/test.coffee</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="nv">assert = </span><span class="nx">require</span> <span class="s">&#39;assert&#39;</span>
</span><span class='line'><span class="nv">should = </span><span class="nx">require</span><span class="p">(</span><span class="s">&#39;chai&#39;</span><span class="p">).</span><span class="nx">should</span><span class="p">()</span>
</span><span class='line'><span class="nv">nanomsg = </span><span class="nx">require</span> <span class="s">&#39;../lib/nanomsg.js&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="nx">describe</span> <span class="s">&#39;nanomsg&#39;</span><span class="p">,</span> <span class="nf">-&gt;</span>
</span><span class='line'>  <span class="nx">it</span> <span class="s">&#39;should at least work&#39;</span><span class="p">,</span> <span class="nf">-&gt;</span>
</span><span class='line'>    <span class="p">{</span> <span class="nx">AF_SP</span><span class="p">,</span> <span class="nx">NN_PAIR</span> <span class="p">}</span> <span class="o">=</span> <span class="nx">nanomsg</span>
</span><span class='line'>
</span><span class='line'>    <span class="nv">s1 = </span><span class="nx">nanomsg</span><span class="p">.</span><span class="nx">nn_socket</span> <span class="nx">AF_SP</span><span class="p">,</span> <span class="nx">NN_PAIR</span>
</span><span class='line'>    <span class="nx">s1</span><span class="p">.</span><span class="nx">should</span><span class="p">.</span><span class="nx">be</span><span class="p">.</span><span class="nx">at</span><span class="p">.</span><span class="nx">least</span> <span class="mi">0</span>
</span><span class='line'>
</span><span class='line'>    <span class="nv">ret = </span><span class="nx">nanomsg</span><span class="p">.</span><span class="nx">nn_bind</span> <span class="nx">s1</span><span class="p">,</span> <span class="s">&#39;inproc://a&#39;</span>
</span><span class='line'>    <span class="nx">ret</span><span class="p">.</span><span class="nx">should</span><span class="p">.</span><span class="nx">be</span><span class="p">.</span><span class="nx">above</span> <span class="mi">0</span>
</span><span class='line'>
</span><span class='line'>    <span class="nv">s2 = </span><span class="nx">nanomsg</span><span class="p">.</span><span class="nx">nn_socket</span> <span class="nx">AF_SP</span><span class="p">,</span> <span class="nx">NN_PAIR</span>
</span><span class='line'>    <span class="nx">s2</span><span class="p">.</span><span class="nx">should</span><span class="p">.</span><span class="nx">be</span><span class="p">.</span><span class="nx">at</span><span class="p">.</span><span class="nx">least</span> <span class="mi">0</span>
</span><span class='line'>
</span><span class='line'>    <span class="nv">ret = </span><span class="nx">nanomsg</span><span class="p">.</span><span class="nx">nn_connect</span> <span class="nx">s2</span><span class="p">,</span> <span class="s">&#39;inproc://a&#39;</span>
</span><span class='line'>    <span class="nx">ret</span><span class="p">.</span><span class="nx">should</span><span class="p">.</span><span class="nx">be</span><span class="p">.</span><span class="nx">above</span> <span class="mi">0</span>
</span><span class='line'>
</span><span class='line'>    <span class="nv">msg = </span><span class="k">new</span> <span class="nx">Buffer</span> <span class="s">&#39;hello&#39;</span>
</span><span class='line'>    <span class="nv">ret = </span><span class="nx">nanomsg</span><span class="p">.</span><span class="nx">nn_send</span> <span class="nx">s2</span><span class="p">,</span> <span class="nx">msg</span><span class="p">,</span> <span class="nx">msg</span><span class="p">.</span><span class="nx">length</span><span class="p">,</span> <span class="mi">0</span>
</span><span class='line'>    <span class="nx">ret</span><span class="p">.</span><span class="nx">should</span><span class="p">.</span><span class="nx">be</span><span class="p">.</span><span class="nx">above</span> <span class="mi">0</span>
</span><span class='line'>
</span><span class='line'>    <span class="nv">recv = </span><span class="k">new</span> <span class="nx">Buffer</span> <span class="nx">msg</span><span class="p">.</span><span class="nx">length</span>
</span><span class='line'>    <span class="nv">ret = </span><span class="nx">nanomsg</span><span class="p">.</span><span class="nx">nn_recv</span> <span class="nx">s1</span><span class="p">,</span> <span class="nx">recv</span><span class="p">,</span> <span class="nx">recv</span><span class="p">.</span><span class="nx">length</span><span class="p">,</span> <span class="mi">0</span>
</span><span class='line'>    <span class="nx">ret</span><span class="p">.</span><span class="nx">should</span><span class="p">.</span><span class="nx">be</span><span class="p">.</span><span class="nx">above</span> <span class="mi">0</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">msg</span><span class="p">.</span><span class="nx">toString</span><span class="p">().</span><span class="nx">should</span><span class="p">.</span><span class="nx">equal</span> <span class="nx">recv</span><span class="p">.</span><span class="nx">toString</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>and modify your gruntfile to add a testing step:</p>

<figure class='code'><figcaption><span>Gruntfile.coffee</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="nv">module.exports = </span><span class="nf">(grunt) -&gt;</span>
</span><span class='line'>  <span class="nx">grunt</span><span class="p">.</span><span class="nx">initConfig</span>
</span><span class='line'>    <span class="nv">coffee:</span>
</span><span class='line'>      <span class="nv">compile:</span>
</span><span class='line'>        <span class="nv">files:</span>
</span><span class='line'>          <span class="s">&#39;lib/nanomsg.js&#39;</span><span class="o">:</span> <span class="p">[</span><span class="s">&#39;src/*.coffee&#39;</span><span class="p">]</span>
</span><span class='line'>    <span class="nv">mochaTest:</span>
</span><span class='line'>      <span class="nv">options:</span>
</span><span class='line'>        <span class="nv">reporter: </span><span class="s">&#39;nyan&#39;</span>
</span><span class='line'>      <span class="nv">src: </span><span class="p">[</span><span class="s">&#39;test/test.coffee&#39;</span><span class="p">]</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">grunt</span><span class="p">.</span><span class="nx">loadNpmTasks</span> <span class="s">&#39;grunt-contrib-coffee&#39;</span>
</span><span class='line'>  <span class="nx">grunt</span><span class="p">.</span><span class="nx">loadNpmTasks</span> <span class="s">&#39;grunt-mocha-test&#39;</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">grunt</span><span class="p">.</span><span class="nx">registerTask</span> <span class="s">&#39;default&#39;</span><span class="p">,</span> <span class="p">[</span><span class="s">&#39;coffee&#39;</span><span class="p">,</span> <span class="s">&#39;mochaTest&#39;</span><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now when we run <code>grunt</code>, our build process will run, then our test process,
then we should see one incredibly happy
<a href="http://www.nyan.cat/">nyan cat</a>.
The
<a href="http://visionmedia.github.io/mocha/#reporters">nyan cat mocha test reporter</a>
is basically the pinnacle of human intellectual achievement.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>grunt
</span><span class='line'>Running &quot;coffee:compile&quot; (coffee) task
</span><span class='line'>File lib/nanomsg.js created.
</span><span class='line'>
</span><span class='line'>Running &quot;mochaTest:src&quot; (mochaTest) task
</span><span class='line'> 1   -__,------,
</span><span class='line'> 0   -__|  /\_/\
</span><span class='line'> 0   -_~|_( ^ .^)
</span><span class='line'>     -_ &quot;&quot;  &quot;&quot;
</span><span class='line'>
</span><span class='line'>  1 passing (5 ms)
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>Done, without errors.
</span></code></pre></td></tr></table></div></figure>


<p><a href="https://github.com/nickdesaulniers/node-nanomsg/commit/a43bcb3f69ca20bb1902472ecc954317e5fe0fe3">Commit time</a>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>tree -L 2 -C -a -I &#39;.git&#39;
</span><span class='line'>.
</span><span class='line'>├── .gitignore
</span><span class='line'>├── Gruntfile.coffee
</span><span class='line'>├── lib
</span><span class='line'>│   └── nanomsg.js
</span><span class='line'>├── node_modules
</span><span class='line'>│   ├── ffi
</span><span class='line'>│   ├── grunt
</span><span class='line'>│   └── grunt-contrib-coffee
</span><span class='line'>├── src
</span><span class='line'>│   └── nanomsg.coffee
</span><span class='line'>└── test
</span><span class='line'>    └── test.coffee
</span><span class='line'>
</span><span class='line'>7 directories, 5 files
</span></code></pre></td></tr></table></div></figure>


<h2>Create node module</h2>

<p>Now that we have a more modular design with build and test logic built in,
let&rsquo;s make this module redistributable.  First, let&rsquo;s talk about ignoring
files.  Create a <code>.npmignore</code> file that will specify what not to include in the
module that is downloaded.  Node Package Manager,
<a href="https://npmjs.org/">npm</a>,
will
<a href="https://npmjs.org/doc/developers.html#Keeping-files-out-of-your-package">ignore a bunch of files by default</a>
for us.</p>

<figure class='code'><figcaption><span>.npmignore</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>Gruntfile.coffee
</span><span class='line'>src/
</span><span class='line'>test/
</span></code></pre></td></tr></table></div></figure>


<p>Here we&rsquo;re ignoring the <code>src/</code> dir, where in our <code>.gitignore</code> we are going to
ignore <code>lib/</code>.</p>

<figure class='code'><figcaption><span>.gitignore</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>node_modules/
</span><span class='line'>lib/
</span><span class='line'>*.swp
</span></code></pre></td></tr></table></div></figure>


<p>Why are we doing this?  Admittedly, none of this is strictly necessary, but
here&rsquo;s why I think it is useful.  When someone is checking out the source, they
don&rsquo;t need the results of the compilation step, as they can make modifications
and would need to recompile anyways.  Adding <code>lib/nanomsg.js</code> would just be
another thing to download (though its size is relatively insignificant).
Likewise, when someone downloads the module, they most likely just want the
results of the compilation step, not the source, build script, or test suite.
If I was planned on making the compiled JavaScript accessible to a web browser,
I would not add <code>lib/</code> to <code>.gitignore</code>, that way it could be referenced from the
github raw URL.
Again, these are generalizations that are not always true.  To make up for not
having the entire source when installed as a module, we&rsquo;ll make up for it by
adding a link to the repo from of manifest, but first let&rsquo;s
<a href="https://github.com/nickdesaulniers/node-nanomsg/commit/61458d964eaaee2ae6501bfbd186a1fe0d03d827">commit</a>!</p>

<p>Time to create a manifest file that has some basic info about our app.  It&rsquo;s a
pretty good idea to run <code>npm search &lt;packagename&gt;</code> before hand to make sure
your planned package name is not taken.  Since we have all of our dependencies
in a row, let&rsquo;s run
<code>npm init</code>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>This utility will walk you through creating a package.json file.
</span><span class='line'>It only covers the most common items, and tries to guess sane defaults.
</span><span class='line'>
</span><span class='line'>See `npm help json` for definitive documentation on these fields
</span><span class='line'>and exactly what they do.
</span><span class='line'>
</span><span class='line'>Use `npm install &lt;pkg&gt; --save` afterwards to install a package and
</span><span class='line'>save it as a dependency in the package.json file.
</span><span class='line'>
</span><span class='line'>Press ^C at any time to quit.
</span><span class='line'>name: (nanomsg)
</span><span class='line'>version: (0.0.0)
</span><span class='line'>description: nanomsg bindings
</span><span class='line'>entry point: (index.js) lib/nanomsg.js
</span><span class='line'>test command: grunt
</span><span class='line'>git repository: (git://github.com/nickdesaulniers/node-nanomsg.git)
</span><span class='line'>keywords: nanomsg
</span><span class='line'>author: Nick Desaulniers
</span><span class='line'>license: (BSD-2-Clause) Beerware
</span><span class='line'>About to write to /Users/Nicholas/code/c/nanomsg/package.json:
</span><span class='line'>
</span><span class='line'>{
</span><span class='line'>  &quot;name&quot;: &quot;nanomsg&quot;,
</span><span class='line'>  &quot;version&quot;: &quot;0.0.0&quot;,
</span><span class='line'>  &quot;description&quot;: &quot;nanomsg bindings&quot;,
</span><span class='line'>  &quot;main&quot;: &quot;lib/nanomsg.js&quot;,
</span><span class='line'>  &quot;directories&quot;: {
</span><span class='line'>    &quot;test&quot;: &quot;test&quot;
</span><span class='line'>  },
</span><span class='line'>  &quot;dependencies&quot;: {
</span><span class='line'>    &quot;chai&quot;: &quot;~1.7.2&quot;,
</span><span class='line'>    &quot;ffi&quot;: &quot;~1.2.5&quot;,
</span><span class='line'>    &quot;grunt&quot;: &quot;~0.4.1&quot;,
</span><span class='line'>    &quot;grunt-mocha-test&quot;: &quot;~0.6.3&quot;,
</span><span class='line'>    &quot;grunt-contrib-coffee&quot;: &quot;~0.7.0&quot;
</span><span class='line'>  },
</span><span class='line'>  &quot;devDependencies&quot;: {},
</span><span class='line'>  &quot;scripts&quot;: {
</span><span class='line'>    &quot;test&quot;: &quot;grunt&quot;
</span><span class='line'>  },
</span><span class='line'>  &quot;repository&quot;: {
</span><span class='line'>    &quot;type&quot;: &quot;git&quot;,
</span><span class='line'>    &quot;url&quot;: &quot;git://github.com/nickdesaulniers/node-nanomsg.git&quot;
</span><span class='line'>  },
</span><span class='line'>  &quot;keywords&quot;: [
</span><span class='line'>    &quot;nanomsg&quot;
</span><span class='line'>  ],
</span><span class='line'>  &quot;author&quot;: &quot;Nick Desaulniers&quot;,
</span><span class='line'>  &quot;license&quot;: &quot;Beerware&quot;,
</span><span class='line'>  &quot;bugs&quot;: {
</span><span class='line'>    &quot;url&quot;: &quot;https://github.com/nickdesaulniers/node-nanomsg/issues&quot;
</span><span class='line'>  }
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>Is this ok? (yes)
</span></code></pre></td></tr></table></div></figure>


<p>That should create for us a nice package.json manifest file for npm.</p>

<p>We can now run our tests with the command <code>npm test</code> in addition to <code>grunt</code>.
Let&rsquo;s hold off on publishing just yet,
<a href="https://github.com/nickdesaulniers/node-nanomsg/commit/6ac3425005c69683df85f75c49e27c9cb634ada6">committing</a>
instead.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>tree -L 2 -C -a -I &#39;.git&#39;
</span><span class='line'>.
</span><span class='line'>├── .gitignore
</span><span class='line'>├── .npmignore
</span><span class='line'>├── Gruntfile.coffee
</span><span class='line'>├── lib
</span><span class='line'>│   └── nanomsg.js
</span><span class='line'>├── node_modules
</span><span class='line'>│   ├── .bin
</span><span class='line'>│   ├── chai
</span><span class='line'>│   ├── ffi
</span><span class='line'>│   ├── grunt
</span><span class='line'>│   ├── grunt-contrib-coffee
</span><span class='line'>│   └── grunt-mocha-test
</span><span class='line'>├── package.json
</span><span class='line'>├── src
</span><span class='line'>│   └── nanomsg.coffee
</span><span class='line'>└── test
</span><span class='line'>    └── test.coffee
</span><span class='line'>
</span><span class='line'>10 directories, 7 files
</span></code></pre></td></tr></table></div></figure>


<h2>Add LICENSE and README</h2>

<p>So we have a module that&rsquo;s almost ready to go.  But how will developers know
how to reuse this code?  As much as I like to
<em><a href="http://bartaz.github.io/impress.js/#/source">view the source, Luke</a></em>,
npm will complain without a readme.  The
<a href="https://github.com/nickdesaulniers/node-nanomsg/commit/95e5a7203740f8ab31758f54491d095567accf70">readme</a>
also looks nice on the github repo.</p>

<pre><code># Node-NanoMSG
Node.js binding for [nanomsg](http://nanomsg.org/index.html).

## Usage

`npm install nanomsg`

```javascript
var nanomsg = require('nanomsg');
var assert = require('assert');
var AF_SP = nanomsg.AF_SP;
var NN_PAIR = nanomsg.NN_PAIR;
var msg = new Buffer('hello');
var recv = new Buffer(msg.length);
var s1, s2, ret;

s1 = nanomsg.nn_socket(AF_SP, NN_PAIR);
assert(s1 &gt;= 0, 's1: ' + nanomsg.errno());

ret = nanomsg.nn_bind(s1, 'inproc://a');
assert(ret &gt; 0, 'bind');

s2 = nanomsg.nn_socket(AF_SP, NN_PAIR);
assert(s2 &gt;= 0, 's2: ' + nanomsg.errno());

ret = nanomsg.nn_connect(s2, 'inproc://a');
assert(ret &gt; 0, 'connect');

ret = nanomsg.nn_send(s2, msg, msg.length, 0);
assert(ret &gt; 0, 'send');

ret = nanomsg.recv(s1, recv, recv.length, 0);
assert(ret &gt; 0, 'recv');

assert(msg.toString() === recv.toString(), "didn't receive sent message");
console.log(recv.toString());
</code></pre>

<p>Before we publish, let&rsquo;s create a
<a href="https://github.com/nickdesaulniers/node-nanomsg/commit/48a55d0c51099f6b90cae5f190a8eb2b94140eae">license</a>
file, because though we are making
our code publicly viewable,
<a href="https://help.github.com/articles/open-source-licensing#what-happens-if-i-dont-choose-a-license">public source code without an explicit license is still under copyright and cannot be reused</a>.</p>

<figure class='code'><figcaption><span>LICENSE</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>/*
</span><span class='line'> * ----------------------------------------------------------------------------
</span><span class='line'> * &quot;THE BEER-WARE LICENSE&quot; (Revision 42):
</span><span class='line'> * &lt;nick@mozilla.com&gt; wrote this file. As long as you retain this notice you
</span><span class='line'> * can do whatever you want with this stuff. If we meet some day, and you think
</span><span class='line'> * this stuff is worth it, you can buy me a beer in return. Nick Desaulniers
</span><span class='line'> * ----------------------------------------------------------------------------
</span><span class='line'> */
</span></code></pre></td></tr></table></div></figure>


<p>If you want to be more serious, maybe instead shoot for an MIT or BSD style
license if you don&rsquo;t care what your repo gets used for or GPL style if you do.
<a href="http://www.tldrlegal.com/">TLDRLegal</a> has a great breakdown on common licenses.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>tree -L 2 -C -a -I &#39;.git&#39;
</span><span class='line'>.
</span><span class='line'>├── .gitignore
</span><span class='line'>├── .npmignore
</span><span class='line'>├── Gruntfile.coffee
</span><span class='line'>├── LICENSE
</span><span class='line'>├── README.md
</span><span class='line'>├── lib
</span><span class='line'>│   └── nanomsg.js
</span><span class='line'>├── node_modules
</span><span class='line'>│   ├── .bin
</span><span class='line'>│   ├── chai
</span><span class='line'>│   ├── ffi
</span><span class='line'>│   ├── grunt
</span><span class='line'>│   ├── grunt-contrib-coffee
</span><span class='line'>│   └── grunt-mocha-test
</span><span class='line'>├── package.json
</span><span class='line'>├── src
</span><span class='line'>│   └── nanomsg.coffee
</span><span class='line'>└── test
</span><span class='line'>    └── test.coffee
</span><span class='line'>
</span><span class='line'>10 directories, 9 files
</span></code></pre></td></tr></table></div></figure>


<h2>Publish</h2>

<p><code>npm publish</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>npm http PUT https://registry.npmjs.org/nanomsg
</span><span class='line'>npm http 201 https://registry.npmjs.org/nanomsg
</span><span class='line'>npm http GET https://registry.npmjs.org/nanomsg
</span><span class='line'>npm http 200 https://registry.npmjs.org/nanomsg
</span><span class='line'>npm http PUT https://registry.npmjs.org/nanomsg/-/nanomsg-0.0.0.tgz/-rev/1-20f1ec5ca2eed51e840feff22479bb5d
</span><span class='line'>npm http 201 https://registry.npmjs.org/nanomsg/-/nanomsg-0.0.0.tgz/-rev/1-20f1ec5ca2eed51e840feff22479bb5d
</span><span class='line'>npm http PUT https://registry.npmjs.org/nanomsg/0.0.0/-tag/latest
</span><span class='line'>npm http 201 https://registry.npmjs.org/nanomsg/0.0.0/-tag/latest
</span><span class='line'>+ nanomsg@0.0.0
</span></code></pre></td></tr></table></div></figure>


<p>Finally as a sanity check, I like to make a new folder elsewhere, and run
through the steps in the readme manually to make sure the package is reuseable.
Which is good, since in the readme I
<a href="https://github.com/nickdesaulniers/node-nanomsg/commit/c145d3b3a8e85354f1bfb61d8342531ec6bbaa0a">accidentally forgot</a>
the <code>nn_</code> prefix in
front of errno and recv!</p>

<p>After updating the example in the readme, let&rsquo;s
<a href="https://github.com/nickdesaulniers/node-nanomsg/commit/a6280ca85c4b9cbaac36f5b427bc052961d7e972">bump the version number</a>
and
republish.  Use <code>npm version</code> without arguments to find the current version,
then <code>npm version patch</code> to bump it.  You have to commit the readme changes
before bumping the version.  Finally don&rsquo;t forget to rerun <code>npm publish</code>.</p>

<p>Our
<a href="https://github.com/nickdesaulniers/node-nanomsg/tree/a6280ca85c4b9cbaac36f5b427bc052961d7e972">final directory structure</a>
ends up looking like:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>tree -L 2 -C -a -I &#39;.git&#39;
</span><span class='line'>.
</span><span class='line'>├── .gitignore
</span><span class='line'>├── .npmignore
</span><span class='line'>├── Gruntfile.coffee
</span><span class='line'>├── LICENSE
</span><span class='line'>├── README.md
</span><span class='line'>├── lib
</span><span class='line'>│   └── nanomsg.js
</span><span class='line'>├── node_modules
</span><span class='line'>│   ├── .bin
</span><span class='line'>│   ├── chai
</span><span class='line'>│   ├── ffi
</span><span class='line'>│   ├── grunt
</span><span class='line'>│   ├── grunt-contrib-coffee
</span><span class='line'>│   └── grunt-mocha-test
</span><span class='line'>├── package.json
</span><span class='line'>├── src
</span><span class='line'>│   └── nanomsg.coffee
</span><span class='line'>└── test
</span><span class='line'>    └── test.coffee
</span><span class='line'>
</span><span class='line'>10 directories, 9 files
</span></code></pre></td></tr></table></div></figure>


<p>Lastly, I&rsquo;ll
<a href="https://github.com/250bpm/nanomsg/pull/122">reach out to</a>
Martin Sústrik and let him know that nanomsg has a new binding.</p>

<p>The bindings are far from complete, the test coverage could be better, and the
API is very C like and could use some OO syntactic sugar, but we&rsquo;re at a great
starting point and ready to rock and roll.  If you&rsquo;d like to help out, fork
<a href="https://github.com/nickdesaulniers/node-nanomsg.git">https://github.com/nickdesaulniers/node-nanomsg.git</a>.</p>

<p>What are some of your thoughts on build steps, testing, and directory layout of
node module?  This
tutorial was definitely not meant to be an authoritarian guide.  I look forward
to your comments on your experiences!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Designated initialization with compound literals in C]]></title>
    <link href="http://nickdesaulniers.github.io/blog/2013/07/25/designated-initialization-with-pointers-in-c/"/>
    <updated>2013-07-25T16:48:00-07:00</updated>
    <id>http://nickdesaulniers.github.io/blog/2013/07/25/designated-initialization-with-pointers-in-c</id>
    <content type="html"><![CDATA[<p>Just a quick post on something I just discovered and found neat (I always find
obscure C syntax interesting).  I was trying to figure out how to use a C
designated initializer, where a member was a pointer to another designated
initializer.  At this point, you need a compound literal.  Just a quick
background on C initialization:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="c1">// verbosely create an array with a known size</span>
</span><span class='line'><span class="kt">int</span> <span class="n">arr</span> <span class="p">[</span><span class="mi">3</span><span class="p">];</span>
</span><span class='line'><span class="n">arr</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'><span class="n">arr</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="mi">2</span><span class="p">;</span>
</span><span class='line'><span class="n">arr</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span> <span class="o">=</span> <span class="mi">3</span><span class="p">;</span>
</span><span class='line'><span class="c1">// =&gt; [1, 2, 3]</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// concisely create an array with a known size</span>
</span><span class='line'><span class="kt">int</span> <span class="n">arr</span> <span class="p">[</span><span class="mi">3</span><span class="p">]</span> <span class="o">=</span> <span class="p">{</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span> <span class="p">};</span> <span class="c1">// =&gt; [1, 2, 3]</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// creates an array with unspecified values initialized to 0</span>
</span><span class='line'><span class="kt">int</span> <span class="n">arr</span> <span class="p">[</span><span class="mi">4</span><span class="p">]</span> <span class="o">=</span> <span class="p">{</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span> <span class="p">};</span> <span class="c1">// =&gt; [1, 2, 3, 0]</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// truncates declaration</span>
</span><span class='line'><span class="kt">int</span> <span class="n">arr</span> <span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="p">{</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span> <span class="p">};</span> <span class="c1">// =&gt; [1]</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// based on number of initializers</span>
</span><span class='line'><span class="kt">int</span> <span class="n">arr</span> <span class="p">[]</span> <span class="o">=</span> <span class="p">{</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span> <span class="p">};</span> <span class="c1">// =&gt; [1, 2, 3]</span>
</span></code></pre></td></tr></table></div></figure>


<p>Let&rsquo;s look at how we might have initialized a struct in C89.  In C89, you are
required to declare local variables at the top of a block.  A previous
initialization of a point struct might have looked like:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="k">struct</span> <span class="n">point</span> <span class="p">{</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">;</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="k">struct</span> <span class="n">point</span> <span class="n">a</span><span class="p">;</span>
</span><span class='line'>  <span class="n">a</span><span class="p">.</span><span class="n">x</span> <span class="o">=</span> <span class="mi">2</span><span class="p">;</span>
</span><span class='line'>  <span class="n">a</span><span class="p">.</span><span class="n">y</span> <span class="o">=</span> <span class="mi">3</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Just as we can define array literals in C using the initializer list syntax, we
can use the same concise syntax for initializing structs!</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="c1">// point a is located at (2, 3)</span>
</span><span class='line'><span class="k">struct</span> <span class="n">point</span> <span class="n">a</span> <span class="o">=</span> <span class="p">{</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span> <span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>Well, this can be bad.  Where would point a be located if say a fellow team
mate came along and modified the definition of the point struct to:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="k">struct</span> <span class="n">point</span> <span class="p">{</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">y</span><span class="p">,</span> <span class="n">x</span><span class="p">;</span> <span class="c1">// used to be `int x, y;`</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>Suddenly point a points to (3, 2), not (2, 3).  It&rsquo;s better if you use
designated initializers to declare the values for members of your struct.  It&rsquo;s
up to the compiler to decide on the order of initialization, but it wont mess
up where the data is intended to go.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="c1">// point b is located at (2, 3)</span>
</span><span class='line'><span class="k">struct</span> <span class="n">point</span> <span class="n">b</span> <span class="o">=</span> <span class="p">{</span> <span class="p">.</span><span class="n">y</span> <span class="o">=</span> <span class="mi">3</span><span class="p">,</span> <span class="p">.</span><span class="n">x</span> <span class="o">=</span> <span class="mi">2</span> <span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>So now we have designated initializers, cool.  What about if we want to use the
same syntax to reassign point b?</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">b</span> <span class="o">=</span> <span class="p">{</span> <span class="p">.</span><span class="n">x</span> <span class="o">=</span> <span class="mi">5</span><span class="p">,</span> <span class="p">.</span><span class="n">y</span> <span class="o">=</span> <span class="mi">6</span> <span class="p">};</span>
</span><span class='line'><span class="c1">//    ^</span>
</span><span class='line'><span class="c1">// error: expected expression</span>
</span></code></pre></td></tr></table></div></figure>


<p>While you are being explicit about the shape of the struct that you are trying
to assign to b, the compiler cannot figure out that you&rsquo;re trying to assign a
point struct to another point struct.  A C cast would probably help here and
that&rsquo;s what the concept of compound literals are.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">b</span> <span class="o">=</span> <span class="p">(</span><span class="k">struct</span> <span class="n">point</span><span class="p">)</span> <span class="p">{</span> <span class="p">.</span><span class="n">x</span> <span class="o">=</span> <span class="mi">5</span><span class="p">,</span> <span class="p">.</span><span class="n">y</span> <span class="o">=</span> <span class="mi">6</span> <span class="p">};</span> <span class="c1">// works!</span>
</span></code></pre></td></tr></table></div></figure>


<p>Notice: I just combined a compound literal with a designated initializer.  A
compound literal on its own would look like:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">b</span> <span class="o">=</span> <span class="p">(</span><span class="k">struct</span> <span class="n">point</span><span class="p">)</span> <span class="p">{</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">6</span> <span class="p">};</span> <span class="c1">// works!</span>
</span></code></pre></td></tr></table></div></figure>


<p>To recap we can define points like so:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="k">struct</span> <span class="n">point</span> <span class="n">a</span><span class="p">;</span>
</span><span class='line'><span class="n">a</span><span class="p">.</span><span class="n">x</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'><span class="n">a</span><span class="p">.</span><span class="n">y</span> <span class="o">=</span> <span class="mi">2</span><span class="p">;</span> <span class="c1">// C89 (too verbose)</span>
</span><span class='line'><span class="k">struct</span> <span class="n">point</span> <span class="n">b</span> <span class="o">=</span> <span class="p">{</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span> <span class="p">};</span> <span class="c1">// initializer list (struct member order specific)</span>
</span><span class='line'><span class="k">struct</span> <span class="n">point</span> <span class="n">c</span> <span class="o">=</span> <span class="p">{</span> <span class="p">.</span><span class="n">x</span> <span class="o">=</span> <span class="mi">5</span><span class="p">,</span> <span class="p">.</span><span class="n">y</span> <span class="o">=</span> <span class="mi">6</span> <span class="p">};</span> <span class="c1">// designated initializer (non struct member order specific)</span>
</span><span class='line'><span class="k">struct</span> <span class="n">point</span> <span class="n">d</span> <span class="o">=</span> <span class="p">(</span><span class="k">struct</span> <span class="n">point</span><span class="p">)</span> <span class="p">{</span> <span class="p">.</span><span class="n">x</span> <span class="o">=</span> <span class="mi">7</span><span class="p">,</span> <span class="p">.</span><span class="n">y</span> <span class="o">=</span> <span class="mi">8</span> <span class="p">};</span> <span class="c1">// compound literal (cast + designated initialization)</span>
</span></code></pre></td></tr></table></div></figure>


<p>My favorite part of compound literals is that you can define values inline of
an argument list.  Say you have a function prototype like:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="kt">int</span> <span class="nf">distance</span> <span class="p">(</span><span class="k">struct</span> <span class="n">point</span><span class="p">,</span> <span class="k">struct</span> <span class="n">point</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// instead of calling it like this</span>
</span><span class='line'><span class="c1">// (creating temp objects just to pass in)</span>
</span><span class='line'><span class="k">struct</span> <span class="n">point</span> <span class="n">a</span> <span class="o">=</span> <span class="p">{</span> <span class="p">.</span><span class="n">x</span> <span class="o">=</span> <span class="mi">1</span><span class="p">,</span> <span class="p">.</span><span class="n">y</span> <span class="o">=</span> <span class="mi">2</span> <span class="p">};</span>
</span><span class='line'><span class="k">struct</span> <span class="n">point</span> <span class="n">b</span> <span class="o">=</span> <span class="p">{</span> <span class="p">.</span><span class="n">x</span> <span class="o">=</span> <span class="mi">5</span><span class="p">,</span> <span class="p">.</span><span class="n">y</span> <span class="o">=</span> <span class="mi">6</span> <span class="p">};</span>
</span><span class='line'><span class="n">distance</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// we can use compound literals</span>
</span><span class='line'><span class="n">distance</span><span class="p">((</span><span class="k">struct</span> <span class="n">point</span><span class="p">)</span> <span class="p">{</span> <span class="p">.</span><span class="n">x</span> <span class="o">=</span> <span class="mi">1</span><span class="p">,</span> <span class="p">.</span><span class="n">y</span> <span class="o">=</span> <span class="mi">2</span> <span class="p">},</span> <span class="p">(</span><span class="k">struct</span> <span class="n">point</span><span class="p">)</span> <span class="p">{</span> <span class="p">.</span><span class="n">x</span> <span class="o">=</span> <span class="mi">5</span><span class="p">,</span> <span class="p">.</span><span class="n">y</span> <span class="o">=</span> <span class="mi">6</span> <span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>So compound literals help with reassignment of structs, and not storing
temporary variables just to pass as function arguments.  What happens though
when one of your members is a pointer?  C strings are easy because they already
have a literal value:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="k">struct</span> <span class="n">node</span> <span class="p">{</span>
</span><span class='line'>  <span class="kt">char</span> <span class="o">*</span><span class="n">value</span><span class="p">;</span>
</span><span class='line'>  <span class="k">struct</span> <span class="n">node</span> <span class="o">*</span><span class="n">next</span><span class="p">;</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// just using designated initialization</span>
</span><span class='line'><span class="k">struct</span> <span class="n">node</span> <span class="n">a</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>  <span class="p">.</span><span class="n">value</span> <span class="o">=</span> <span class="err">“</span><span class="n">hello</span> <span class="n">world</span><span class="err">”</span><span class="p">,</span>
</span><span class='line'>  <span class="p">.</span><span class="n">next</span> <span class="o">=</span> <span class="nb">NULL</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>But what happens if we want to initialize node.next?  We could do:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="k">struct</span> <span class="n">node</span> <span class="n">b</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>  <span class="p">.</span><span class="n">value</span> <span class="o">=</span> <span class="err">“</span><span class="n">foo</span><span class="err">”</span><span class="p">,</span>
</span><span class='line'>  <span class="p">.</span><span class="n">next</span> <span class="o">=</span> <span class="nb">NULL</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'><span class="n">a</span><span class="p">.</span><span class="n">next</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">b</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Again, we have to define b before assigning it to a.next.  That&rsquo;s worthwhile if
you need to reference b later in that scope, but sometimes you don&rsquo;t (just like
how compound literals can help with function arguments)!  But that&rsquo;s where I
was stumped.  How do you nest designated initializers when the a member is a
pointer to another designated initializer?  A first naïve attempt was:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="k">struct</span> <span class="n">node</span> <span class="n">c</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>  <span class="p">.</span><span class="n">value</span> <span class="o">=</span> <span class="err">“</span><span class="n">bar</span><span class="err">”</span><span class="p">,</span>
</span><span class='line'>  <span class="p">.</span><span class="n">next</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>    <span class="p">.</span><span class="n">value</span> <span class="o">=</span> <span class="err">“</span><span class="n">baz</span><span class="err">”</span><span class="p">,</span>
</span><span class='line'><span class="c1">//  ^</span>
</span><span class='line'><span class="c1">// error: designator in initializer for scalar type &#39;struct node *&#39;</span>
</span><span class='line'>    <span class="p">.</span><span class="n">next</span> <span class="o">=</span> <span class="nb">NULL</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>WTF?  Well, if you go back to the example with nodes a and b, we don&rsquo;t assign
the value of b to a.next, we assign it a pointer to b.  So how can we use
designated initializers to define, say, the first two nodes of a linked list?
Compound literals.  Remember, a compound literal is essentially a designated
initialization + cast.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="k">struct</span> <span class="n">node</span> <span class="n">d</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>  <span class="p">.</span><span class="n">value</span> <span class="o">=</span> <span class="err">“</span><span class="n">qux</span><span class="err">”</span><span class="p">,</span>
</span><span class='line'>  <span class="p">.</span><span class="n">next</span> <span class="o">=</span> <span class="o">&amp;</span><span class="p">((</span><span class="k">struct</span> <span class="n">node</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="p">.</span><span class="n">value</span> <span class="o">=</span> <span class="err">“</span><span class="n">fred</span><span class="err">”</span><span class="p">,</span>
</span><span class='line'>    <span class="p">.</span><span class="n">next</span> <span class="o">=</span> <span class="nb">NULL</span>
</span><span class='line'>  <span class="p">})</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>And that works, but why?  d.next is assigned an address of a
compound literal.  Granted, you probably don&rsquo;t want to be declaring your entire
linked list like this, as nesting gets out of control fast.  I really like this
style because it reminds me of JavaScript&rsquo;s syntax for declaring object
literals.  It would look nicer if all of your nested structs were values and
not references though; then you could just use designated initializers and
wouldn&rsquo;t need compound literals or address of operators.</p>

<p>What&rsquo;s your favorite or most interesting part of C syntax?</p>

<p>Acknowledgements:</p>

<ul>
<li><a href="http://louisstowasser.com/">Louis Stowasser</a></li>
<li><a href="http://fredericiana.com/">Frederic Wenzel</a></li>
<li><a href="http://shop.oreilly.com/product/0636920025108.do">21st Century C</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Why I'll be Marching this 4th]]></title>
    <link href="http://nickdesaulniers.github.io/blog/2013/07/03/why-ill-be-marching-this-4th/"/>
    <updated>2013-07-03T22:27:00-07:00</updated>
    <id>http://nickdesaulniers.github.io/blog/2013/07/03/why-ill-be-marching-this-4th</id>
    <content type="html"><![CDATA[<blockquote><p>If you&#8217;ve done nothing wrong, then you&#8217;ve got nothing to hide.</p></blockquote>


<p>Wrong.  Nothing ever justifies giving up your
<a href="http://www.un.org/en/documents/udhr/index.shtml#a12">human rights</a>
, especially to
prove lack of wrong doing, and any government that asks you to do so is not
your friend.</p>

<p>Terrorism has become a weapon used against us by those elected to lead to keep
us
compliant, like blinders you&rsquo;d put on a horse.  The threat just keeps growing
and growing instead diminishing, despite the money and lives we throw at
it.  Terrorism is the new Communism, and the
<a href="http://www.guardian.co.uk/world/2013/jun/06/us-tech-giants-nsa-data">NSA PRISM program</a>
and the
<a href="http://www.technologyreview.com/news/515861/nsa-surveillance-reflects-a-broader-interpretation-of-the-patriot-act/">Patriot Act</a>
are the modern day overreactions equivalent to
<a href="https://en.wikipedia.org/wiki/McCarthyism">McCarthyism</a> and
the <a href="https://en.wikipedia.org/wiki/Red_scare">Red Scare</a>.</p>

<p>A captain and crew of a boat would reflect upon the current state of their
vessel and make
corrections.  The cycle of reflection and correction is what keeps the boat
from running ashore, hitting other boats, or making other costly mistakes.
Unfortunately, I feel that NSA, enabled by
<a href="http://www.aclu.org/free-speech-national-security-technology-and-liberty/reform-patriot-act-section-215">section 215 of the Patriot Act</a>,
have become so powerful that they feel they
<a href="http://www.motherjones.com/mojo/2013/06/fisa-court-nsa-spying-opinion-reject-request">don&rsquo;t need to reflect upon their actions anymore</a>.</p>

<p>If
your neighbor was peeking in your window at night, that would probably make you
very angry, and you would probably never trust that neighbor again.  Think
about how all of our fellow countries feel about us right now.
It&rsquo;s really unfortunate that Germany and our allies
<a href="http://www.washingtontimes.com/news/2013/jun/12/germany-decries-nsa-surveillance-stasi-methods/">now severely distrust us</a>.
I apologize to
all non US citizens that my government doesn&rsquo;t respect you enough to extend the
human right to privacy to you, as it supposedly does to its own citizens, and
I&rsquo;m ashamed I have to apologize on behalf of them.  It&rsquo;s troubling that the
NSA <a href="https://www.youtube.com/watch?v=4v7YtTnon90">has trouble</a> telling the
<a href="http://www.techspot.com/news/53031-senators-demand-that-nsa-fix-inaccuracies-in-prism-factsheet.html">truth</a>.
It&rsquo;s awesome but ultimately embarrassing that Ecuador
<a href="http://inserbia.info/news/2013/06/ecuador-offers-to-fund-human-rights-training-in-the-us/">offers to fund Human Rights training to us</a>.</p>

<p>It&rsquo;s hypocritical that we frown upon countries like
<a href="http://en.wikipedia.org/wiki/Golden_Shield_Project">China spying on their citizens</a>,
like the East German Stasi, and yet we are doing it to our
own people!  While this administration may try its best to be benevolent with
this power, who&rsquo;s to say all future administrations will use it for good?
Even without content you can
<a href="https://www.youtube.com/watch?v=raxUNmzgCWE">glean an awful (unacceptable) amount</a>
of <a href="http://www.ted.com/talks/malte_spitz_your_phone_company_is_watching.html">information about somebody</a>.</p>

<p>So how did we get here?  The justification I keep hearing is that
<a href="https://soundcloud.com/madiha-1/students-question-the-nsa-at">this is all legal</a>.
Regardless of whether or not something is legal, we should be asking ourselves
“but is this right?” and “what were the motivations of those that created this
law?  Was it to entrench the privileged or represent the constituents?”
<a href="http://en.wikipedia.org/wiki/First_they_came...">Good people not standing up for the right thing</a>
is what got us here.  Good people
not standing up at the Tech companies accused of handing over data to the NSA.
Good people at the NSA not speaking out about their surveillance programs.
Good people in Congress not speaking out about programs they&rsquo;ve been briefed
on.  Everyone just keeps saying how they&rsquo;re just complying with the law while
looking the other way.
Sounds to me like the crew hasn&rsquo;t been doing enough reflection.  What about the
captain?</p>

<blockquote><p>I think it’s important to recognize that you can’t have 100 percent security<br/>and also then have 100 per cent privacy and zero inconvenience.</p><footer><strong>President Obama</strong> <cite><a href='http://www.youtube.com/watch?v=Xec48sUutuA'>www.youtube.com/&hellip;</a></cite></footer></blockquote>


<p>Hearing the President of our country say that,
<a href="http://www.washingtonpost.com/blogs/wonkblog/wp/2013/07/03/how-ed-snowden-became-a-bigger-story-than-nsa-spying-in-two-charts/">the incompetent media&rsquo;s focus on Snowden</a>,
and
<a href="http://www.usatoday.com/story/news/politics/2013/06/17/americans-say-snowden-should-be-prosecuted-for-nsa-leaks-in-usa-today-poll/2430583/">the American people&rsquo;s fundamental misunderstand of privacy</a>,
literally reminds me of the part in Star Wars where in order to stop a growing
threat and protect the people, a democracy is turned into an authoritarian
empire.</p>

<blockquote><p>So this is how liberty dies&#8230;with thunderous applause?</p><footer><strong>Padme, Star Wars Ep. 3</strong> <cite><a href='http://vimeo.com/57563428'>vimeo.com/57563428/&hellip;</a></cite></footer></blockquote>


<p>Not on my watch.  And not on yours either.  Join us this 4th of July for a
peaceful rally against infringements on our 4th Amendment rights as part of the
national
<a href="http://www.restorethefourth.net/">Restore the Fourth</a>
movement.  Let&rsquo;s ask the NSA to go
back to the drawing board and find a way to uncompromisingly provide security
<strong><em>and</em></strong> privacy.</p>
]]></content>
  </entry>
  
</feed>
